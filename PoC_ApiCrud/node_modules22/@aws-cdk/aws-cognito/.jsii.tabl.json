{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "c53bca97797226597795242d0791034f722853432f3f3953207ba2130aecaf9c": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    user_pool_name=\"myawesomeapp-userpool\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    UserPoolName = \"myawesomeapp-userpool\"\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        .userPoolName(\"myawesomeapp-userpool\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  userPoolName: 'myawesomeapp-userpool',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 66
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  userPoolName: 'myawesomeapp-userpool',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 3,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "266918a959449e5795fe42eb3157178091b965a46757fb2571ff9bf5c1d93035"
    },
    "734a6e10a55a113fb58d45bb6cdee5580d6b341cbd470e8b7f5a3ea75f861870": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    self_sign_up_enabled=True,\n    user_verification=cognito.UserVerificationConfig(\n        email_subject=\"Verify your email for our awesome app!\",\n        email_body=\"Thanks for signing up to our awesome app! Your verification code is {####}\",\n        email_style=cognito.VerificationEmailStyle.CODE,\n        sms_message=\"Thanks for signing up to our awesome app! Your verification code is {####}\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    SelfSignUpEnabled = true,\n    UserVerification = new UserVerificationConfig {\n        EmailSubject = \"Verify your email for our awesome app!\",\n        EmailBody = \"Thanks for signing up to our awesome app! Your verification code is {####}\",\n        EmailStyle = VerificationEmailStyle.CODE,\n        SmsMessage = \"Thanks for signing up to our awesome app! Your verification code is {####}\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .selfSignUpEnabled(true)\n        .userVerification(UserVerificationConfig.builder()\n                .emailSubject(\"Verify your email for our awesome app!\")\n                .emailBody(\"Thanks for signing up to our awesome app! Your verification code is {####}\")\n                .emailStyle(VerificationEmailStyle.CODE)\n                .smsMessage(\"Thanks for signing up to our awesome app! Your verification code is {####}\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  selfSignUpEnabled: true,\n  userVerification: {\n    emailSubject: 'Verify your email for our awesome app!',\n    emailBody: 'Thanks for signing up to our awesome app! Your verification code is {####}',\n    emailStyle: cognito.VerificationEmailStyle.CODE,\n    smsMessage: 'Thanks for signing up to our awesome app! Your verification code is {####}',\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 85
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps",
        "@aws-cdk/aws-cognito.UserVerificationConfig",
        "@aws-cdk/aws-cognito.VerificationEmailStyle",
        "@aws-cdk/aws-cognito.VerificationEmailStyle#CODE"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  selfSignUpEnabled: true,\n  userVerification: {\n    emailSubject: 'Verify your email for our awesome app!',\n    emailBody: 'Thanks for signing up to our awesome app! Your verification code is {####}',\n    emailStyle: cognito.VerificationEmailStyle.CODE,\n    smsMessage: 'Thanks for signing up to our awesome app! Your verification code is {####}',\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "104": 1,
        "106": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "c71586e0f47e6bd74152e867df9c49a132498519fab3930a847ced8131561ae6"
    },
    "0db21c40d7e6b5e9313b9c2af1d7258abbc2d87e41d2637d9d32b2af8fbcacb9": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    user_invitation=cognito.UserInvitationConfig(\n        email_subject=\"Invite to join our awesome app!\",\n        email_body=\"Hello {username}, you have been invited to join our awesome app! Your temporary password is {####}\",\n        sms_message=\"Hello {username}, your temporary password for our awesome app is {####}\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    UserInvitation = new UserInvitationConfig {\n        EmailSubject = \"Invite to join our awesome app!\",\n        EmailBody = \"Hello {username}, you have been invited to join our awesome app! Your temporary password is {####}\",\n        SmsMessage = \"Hello {username}, your temporary password for our awesome app is {####}\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .userInvitation(UserInvitationConfig.builder()\n                .emailSubject(\"Invite to join our awesome app!\")\n                .emailBody(\"Hello {username}, you have been invited to join our awesome app! Your temporary password is {####}\")\n                .smsMessage(\"Hello {username}, your temporary password for our awesome app is {####}\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  userInvitation: {\n    emailSubject: 'Invite to join our awesome app!',\n    emailBody: 'Hello {username}, you have been invited to join our awesome app! Your temporary password is {####}',\n    smsMessage: 'Hello {username}, your temporary password for our awesome app is {####}'\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 105
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserInvitationConfig",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  userInvitation: {\n    emailSubject: 'Invite to join our awesome app!',\n    emailBody: 'Hello {username}, you have been invited to join our awesome app! Your temporary password is {####}',\n    smsMessage: 'Hello {username}, your temporary password for our awesome app is {####}'\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "492e7fdb1738131e035ca7e604dacb63a3f401131cf651b2763a24c72083ea7f"
    },
    "d425e697c61d73129ae62185616f9e45d346deff16805d53ed63ccb53b99f394": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    # ...\n    sign_in_aliases=cognito.SignInAliases(\n        username=True,\n        email=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    // ...\n    SignInAliases = new SignInAliases {\n        Username = true,\n        Email = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        // ...\n        .signInAliases(SignInAliases.builder()\n                .username(true)\n                .email(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  // ...\n  signInAliases: {\n    username: true,\n    email: true\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 133
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.SignInAliases",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  // ...\n  signInAliases: {\n    username: true,\n    email: true\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "104": 1,
        "106": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "23e1c6f4cf6e558d4b85351ebf3e827127548c09551f79b054256bb3c097b3cc"
    },
    "9100ac62c5dd05137bc70064bc8e1b4162447ed3c6745e4c586300baf639ea7d": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    # ...\n    sign_in_aliases=cognito.SignInAliases(username=True, email=True),\n    auto_verify=cognito.AutoVerifiedAttrs(email=True, phone=True)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    // ...\n    SignInAliases = new SignInAliases { Username = true, Email = true },\n    AutoVerify = new AutoVerifiedAttrs { Email = true, Phone = true }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        // ...\n        .signInAliases(SignInAliases.builder().username(true).email(true).build())\n        .autoVerify(AutoVerifiedAttrs.builder().email(true).phone(true).build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  // ...\n  signInAliases: { username: true, email: true },\n  autoVerify: { email: true, phone: true }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 163
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.AutoVerifiedAttrs",
        "@aws-cdk/aws-cognito.SignInAliases",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  // ...\n  signInAliases: { username: true, email: true },\n  autoVerify: { email: true, phone: true }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "104": 1,
        "106": 4,
        "193": 3,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "98de56be721351d3f03842dfaaa455f902108a665996eafb396ff988e44cec17"
    },
    "9c3457c1bc50acc6ca2152d90e4eb5b36633fbf60a513953dbe2c50ddc13d332": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    standard_attributes=cognito.StandardAttributes(\n        fullname=cognito.StandardAttribute(\n            required=True,\n            mutable=False\n        ),\n        address=cognito.StandardAttribute(\n            required=False,\n            mutable=True\n        )\n    ),\n    custom_attributes={\n        \"myappid\": cognito.StringAttribute(min_len=5, max_len=15, mutable=False),\n        \"callingcode\": cognito.NumberAttribute(min=1, max=3, mutable=True),\n        \"is_employee\": cognito.BooleanAttribute(mutable=True),\n        \"joined_on\": cognito.DateTimeAttribute()\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    StandardAttributes = new StandardAttributes {\n        Fullname = new StandardAttribute {\n            Required = true,\n            Mutable = false\n        },\n        Address = new StandardAttribute {\n            Required = false,\n            Mutable = true\n        }\n    },\n    CustomAttributes = new Dictionary<string, ICustomAttribute> {\n        { \"myappid\", new StringAttribute(new StringAttributeProps { MinLen = 5, MaxLen = 15, Mutable = false }) },\n        { \"callingcode\", new NumberAttribute(new NumberAttributeProps { Min = 1, Max = 3, Mutable = true }) },\n        { \"isEmployee\", new BooleanAttribute(new CustomAttributeProps { Mutable = true }) },\n        { \"joinedOn\", new DateTimeAttribute() }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .standardAttributes(StandardAttributes.builder()\n                .fullname(StandardAttribute.builder()\n                        .required(true)\n                        .mutable(false)\n                        .build())\n                .address(StandardAttribute.builder()\n                        .required(false)\n                        .mutable(true)\n                        .build())\n                .build())\n        .customAttributes(Map.of(\n                \"myappid\", StringAttribute.Builder.create().minLen(5).maxLen(15).mutable(false).build(),\n                \"callingcode\", NumberAttribute.Builder.create().min(1).max(3).mutable(true).build(),\n                \"isEmployee\", BooleanAttribute.Builder.create().mutable(true).build(),\n                \"joinedOn\", new DateTimeAttribute()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  standardAttributes: {\n    fullname: {\n      required: true,\n      mutable: false,\n    },\n    address: {\n      required: false,\n      mutable: true,\n    },\n  },\n  customAttributes: {\n    'myappid': new cognito.StringAttribute({ minLen: 5, maxLen: 15, mutable: false }),\n    'callingcode': new cognito.NumberAttribute({ min: 1, max: 3, mutable: true }),\n    'isEmployee': new cognito.BooleanAttribute({ mutable: true }),\n    'joinedOn': new cognito.DateTimeAttribute(),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 188
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.BooleanAttribute",
        "@aws-cdk/aws-cognito.CustomAttributeProps",
        "@aws-cdk/aws-cognito.DateTimeAttribute",
        "@aws-cdk/aws-cognito.ICustomAttribute",
        "@aws-cdk/aws-cognito.NumberAttribute",
        "@aws-cdk/aws-cognito.NumberAttributeProps",
        "@aws-cdk/aws-cognito.StandardAttribute",
        "@aws-cdk/aws-cognito.StandardAttributes",
        "@aws-cdk/aws-cognito.StringAttribute",
        "@aws-cdk/aws-cognito.StringAttributeProps",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  standardAttributes: {\n    fullname: {\n      required: true,\n      mutable: false,\n    },\n    address: {\n      required: false,\n      mutable: true,\n    },\n  },\n  customAttributes: {\n    'myappid': new cognito.StringAttribute({ minLen: 5, maxLen: 15, mutable: false }),\n    'callingcode': new cognito.NumberAttribute({ min: 1, max: 3, mutable: true }),\n    'isEmployee': new cognito.BooleanAttribute({ mutable: true }),\n    'joinedOn': new cognito.DateTimeAttribute(),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 5,
        "75": 25,
        "91": 3,
        "104": 1,
        "106": 4,
        "193": 8,
        "194": 5,
        "197": 5,
        "226": 1,
        "281": 19
      },
      "fqnsFingerprint": "c68147e1bcefec12a021aece4881899e8960f7d1bfcb6288bfd954b94687e375"
    },
    "f085656abd76db2c0f804f278b8e1282c9b69215b8e813f3c0537703dfac11c3": {
      "translations": {
        "python": {
          "source": "pool_sms_role = iam.Role(self, \"userpoolsmsrole\",\n    assumed_by=iam.ServicePrincipal(\"foo\")\n)\n\ncognito.UserPool(self, \"myuserpool\",\n    # ...\n    sms_role=pool_sms_role,\n    sms_role_external_id=\"c87467be-4f34-11ea-b77f-2e728ce88125\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Role poolSmsRole = new Role(this, \"userpoolsmsrole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"foo\")\n});\n\nnew UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    SmsRole = poolSmsRole,\n    SmsRoleExternalId = \"c87467be-4f34-11ea-b77f-2e728ce88125\"\n});",
          "version": "1"
        },
        "java": {
          "source": "Role poolSmsRole = Role.Builder.create(this, \"userpoolsmsrole\")\n        .assumedBy(new ServicePrincipal(\"foo\"))\n        .build();\n\nUserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .smsRole(poolSmsRole)\n        .smsRoleExternalId(\"c87467be-4f34-11ea-b77f-2e728ce88125\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const poolSmsRole = new iam.Role(this, 'userpoolsmsrole', {\n  assumedBy: new iam.ServicePrincipal('foo'),\n});\n\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  smsRole: poolSmsRole,\n  smsRoleExternalId: 'c87467be-4f34-11ea-b77f-2e728ce88125'\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 236
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst poolSmsRole = new iam.Role(this, 'userpoolsmsrole', {\n  assumedBy: new iam.ServicePrincipal('foo'),\n});\n\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  smsRole: poolSmsRole,\n  smsRoleExternalId: 'c87467be-4f34-11ea-b77f-2e728ce88125'\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "104": 2,
        "193": 2,
        "194": 3,
        "197": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "e6ceea58ca8ed7773e69933f8ace6bf7e8f97b73d6018923d61fc3a6fcc028ad"
    },
    "70ebcdcfe8d2448286af2831084ee86f41560cd508aa4bf946841d6136412931": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    mfa=cognito.Mfa.REQUIRED,\n    mfa_second_factor=cognito.MfaSecondFactor(\n        sms=True,\n        otp=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    Mfa = Mfa.REQUIRED,\n    MfaSecondFactor = new MfaSecondFactor {\n        Sms = true,\n        Otp = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .mfa(Mfa.REQUIRED)\n        .mfaSecondFactor(MfaSecondFactor.builder()\n                .sms(true)\n                .otp(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  mfa: cognito.Mfa.REQUIRED,\n  mfaSecondFactor: {\n    sms: true,\n    otp: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 266
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.Mfa",
        "@aws-cdk/aws-cognito.Mfa#REQUIRED",
        "@aws-cdk/aws-cognito.MfaSecondFactor",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  mfa: cognito.Mfa.REQUIRED,\n  mfaSecondFactor: {\n    sms: true,\n    otp: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "104": 1,
        "106": 2,
        "193": 2,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "fa3e67f69607a1e3baab59fb5d4eb874e0f313cda89dd911a76ae91ed3f9235c"
    },
    "ea9d020e8ca961cc3e1bfd3bf663069589314aa017b89bc3f3a1e2dc6fe27c97": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    password_policy=cognito.PasswordPolicy(\n        min_length=12,\n        require_lowercase=True,\n        require_uppercase=True,\n        require_digits=True,\n        require_symbols=True,\n        temp_password_validity=Duration.days(3)\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    PasswordPolicy = new PasswordPolicy {\n        MinLength = 12,\n        RequireLowercase = true,\n        RequireUppercase = true,\n        RequireDigits = true,\n        RequireSymbols = true,\n        TempPasswordValidity = Duration.Days(3)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .passwordPolicy(PasswordPolicy.builder()\n                .minLength(12)\n                .requireLowercase(true)\n                .requireUppercase(true)\n                .requireDigits(true)\n                .requireSymbols(true)\n                .tempPasswordValidity(Duration.days(3))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  passwordPolicy: {\n    minLength: 12,\n    requireLowercase: true,\n    requireUppercase: true,\n    requireDigits: true,\n    requireSymbols: true,\n    tempPasswordValidity: Duration.days(3),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 286
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.PasswordPolicy",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  passwordPolicy: {\n    minLength: 12,\n    requireLowercase: true,\n    requireUppercase: true,\n    requireDigits: true,\n    requireSymbols: true,\n    tempPasswordValidity: Duration.days(3),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 11,
        "104": 1,
        "106": 4,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 7
      },
      "fqnsFingerprint": "63b62bff7a37c61bc5cb6d8b770aeb0b5c7eac5bf443a18a2ac5ee59260e60c7"
    },
    "dc08ba0a5dc98d6666a9480b44948ba41712f93454785fea30a1d807dcc1c0ae": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"UserPool\",\n    # ...\n    account_recovery=cognito.AccountRecovery.EMAIL_ONLY\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"UserPool\", new UserPoolProps {\n    // ...\n    AccountRecovery = AccountRecovery.EMAIL_ONLY\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"UserPool\")\n        // ...\n        .accountRecovery(AccountRecovery.EMAIL_ONLY)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'UserPool', {\n  // ...\n  accountRecovery: cognito.AccountRecovery.EMAIL_ONLY,\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 307
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.AccountRecovery",
        "@aws-cdk/aws-cognito.AccountRecovery#EMAIL_ONLY",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'UserPool', {\n  // ...\n  accountRecovery: cognito.AccountRecovery.EMAIL_ONLY,\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "66f9e351ba83e7e7e600c66ad839ce704bad078db5b8665ff6bccf3313eb8568"
    },
    "73ade43d216c2a0ab2b2691f745ec58a33f1d649ff9c9b1c158839d5c971922d": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    email=UserPoolEmail.with_cognito(\"support@myawesomeapp.com\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    Email = UserPoolEmail.WithCognito(\"support@myawesomeapp.com\")\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        .email(UserPoolEmail.withCognito(\"support@myawesomeapp.com\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  email: UserPoolEmail.withCognito('support@myawesomeapp.com'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 328
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolEmail",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  email: UserPoolEmail.withCognito('support@myawesomeapp.com'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "0d8dd6456845c46bd24f4df754900f784142e887245b151030b393893f29f8f8"
    },
    "69d02cde7032890f40dc8a255ab129b7dbf47c41f9f61edf5b5540d62a8a777f": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    email=UserPoolEmail.with_sES(\n        from_email=\"noreply@myawesomeapp.com\",\n        from_name=\"Awesome App\",\n        reply_to=\"support@myawesomeapp.com\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    Email = UserPoolEmail.WithSES(new Struct {\n        FromEmail = \"noreply@myawesomeapp.com\",\n        FromName = \"Awesome App\",\n        ReplyTo = \"support@myawesomeapp.com\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        .email(UserPoolEmail.withSES(Map.of(\n                \"fromEmail\", \"noreply@myawesomeapp.com\",\n                \"fromName\", \"Awesome App\",\n                \"replyTo\", \"support@myawesomeapp.com\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  email: UserPoolEmail.withSES({\n    fromEmail: 'noreply@myawesomeapp.com',\n    fromName: 'Awesome App',\n    replyTo: 'support@myawesomeapp.com',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 342
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolEmail",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  email: UserPoolEmail.withSES({\n    fromEmail: 'noreply@myawesomeapp.com',\n    fromName: 'Awesome App',\n    replyTo: 'support@myawesomeapp.com',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "104": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "0d8dd6456845c46bd24f4df754900f784142e887245b151030b393893f29f8f8"
    },
    "2ee9e64c3bca4919cf5de4580d897e6b429ca21de0713e061dc1ae4243ee7926": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    email=UserPoolEmail.with_sES(\n        ses_region=\"us-east-1\",\n        from_email=\"noreply@myawesomeapp.com\",\n        from_name=\"Awesome App\",\n        reply_to=\"support@myawesomeapp.com\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    Email = UserPoolEmail.WithSES(new Struct {\n        SesRegion = \"us-east-1\",\n        FromEmail = \"noreply@myawesomeapp.com\",\n        FromName = \"Awesome App\",\n        ReplyTo = \"support@myawesomeapp.com\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        .email(UserPoolEmail.withSES(Map.of(\n                \"sesRegion\", \"us-east-1\",\n                \"fromEmail\", \"noreply@myawesomeapp.com\",\n                \"fromName\", \"Awesome App\",\n                \"replyTo\", \"support@myawesomeapp.com\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  email: UserPoolEmail.withSES({\n    sesRegion: 'us-east-1',\n    fromEmail: 'noreply@myawesomeapp.com',\n    fromName: 'Awesome App',\n    replyTo: 'support@myawesomeapp.com',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 355
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolEmail",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  email: UserPoolEmail.withSES({\n    sesRegion: 'us-east-1',\n    fromEmail: 'noreply@myawesomeapp.com',\n    fromName: 'Awesome App',\n    replyTo: 'support@myawesomeapp.com',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 9,
        "104": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "0d8dd6456845c46bd24f4df754900f784142e887245b151030b393893f29f8f8"
    },
    "7731a9d10f2b08db6816c2d27ab18b11ba84918e8a865ae1e3396a55a4b4a4e9": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    device_tracking=cognito.DeviceTracking(\n        challenge_required_on_new_device=True,\n        device_only_remembered_on_user_prompt=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    DeviceTracking = new DeviceTracking {\n        ChallengeRequiredOnNewDevice = true,\n        DeviceOnlyRememberedOnUserPrompt = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .deviceTracking(DeviceTracking.builder()\n                .challengeRequiredOnNewDevice(true)\n                .deviceOnlyRememberedOnUserPrompt(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  deviceTracking: {\n    challengeRequiredOnNewDevice: true,\n    deviceOnlyRememberedOnUserPrompt: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 372
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.DeviceTracking",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  deviceTracking: {\n    challengeRequiredOnNewDevice: true,\n    deviceOnlyRememberedOnUserPrompt: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "104": 1,
        "106": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "5b509e976c681a81528bcf55e7dc359e4b6ea3ce73647a5d5432804d2140febd"
    },
    "acdedad57ed96dd50e572a71d157c04e53c4e46aa8381bcc27c09a5e884f0838": {
      "translations": {
        "python": {
          "source": "auth_challenge_fn = lambda_.Function(self, \"authChallengeFn\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset()\n)\n\nuserpool = cognito.UserPool(self, \"myuserpool\",\n    # ...\n    lambda_triggers=cognito.UserPoolTriggers(\n        create_auth_challenge=auth_challenge_fn\n    )\n)\n\nuserpool.add_trigger(cognito.UserPoolOperation.USER_MIGRATION, lambda_.Function(self, \"userMigrationFn\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset()\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Function authChallengeFn = new Function(this, \"authChallengeFn\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset()\n});\n\nUserPool userpool = new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    LambdaTriggers = new UserPoolTriggers {\n        CreateAuthChallenge = authChallengeFn\n    }\n});\n\nuserpool.AddTrigger(UserPoolOperation.USER_MIGRATION, new Function(this, \"userMigrationFn\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset()\n}));",
          "version": "1"
        },
        "java": {
          "source": "Function authChallengeFn = Function.Builder.create(this, \"authChallengeFn\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset())\n        .build();\n\nUserPool userpool = UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .lambdaTriggers(UserPoolTriggers.builder()\n                .createAuthChallenge(authChallengeFn)\n                .build())\n        .build();\n\nuserpool.addTrigger(UserPoolOperation.USER_MIGRATION, Function.Builder.create(this, \"userMigrationFn\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const authChallengeFn = new lambda.Function(this, 'authChallengeFn', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(/* path to lambda asset */),\n});\n\nconst userpool = new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  lambdaTriggers: {\n    createAuthChallenge: authChallengeFn,\n    // ...\n  }\n});\n\nuserpool.addTrigger(cognito.UserPoolOperation.USER_MIGRATION, new lambda.Function(this, 'userMigrationFn', {\n    runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(/* path to lambda asset */),\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 394
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPool#addTrigger",
        "@aws-cdk/aws-cognito.UserPoolOperation",
        "@aws-cdk/aws-cognito.UserPoolOperation#USER_MIGRATION",
        "@aws-cdk/aws-cognito.UserPoolProps",
        "@aws-cdk/aws-cognito.UserPoolTriggers",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst authChallengeFn = new lambda.Function(this, 'authChallengeFn', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(/* path to lambda asset */),\n});\n\nconst userpool = new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  lambdaTriggers: {\n    createAuthChallenge: authChallengeFn,\n    // ...\n  }\n});\n\nuserpool.addTrigger(cognito.UserPoolOperation.USER_MIGRATION, new lambda.Function(this, 'userMigrationFn', {\n    runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(/* path to lambda asset */),\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 34,
        "104": 3,
        "193": 4,
        "194": 14,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "401a6cda1f7aff6108afc9560aa8a483773b0d12d9469b435765c70c71bdb767"
    },
    "841b664e475670fa65da74204b7beb333ffd35db20e10089ea2b218a82f3ceac": {
      "translations": {
        "python": {
          "source": "# provide permissions to describe the user pool scoped to the ARN the user pool\npost_auth_fn.role.attach_inline_policy(iam.Policy(self, \"userpool-policy\",\n    statements=[iam.PolicyStatement(\n        actions=[\"cognito-idp:DescribeUserPool\"],\n        resources=[userpool.user_pool_arn]\n    )]\n))",
          "version": "1"
        },
        "csharp": {
          "source": "// provide permissions to describe the user pool scoped to the ARN the user pool\npostAuthFn.Role.AttachInlinePolicy(new Policy(this, \"userpool-policy\", new PolicyProps {\n    Statements = new [] { new PolicyStatement(new PolicyStatementProps {\n        Actions = new [] { \"cognito-idp:DescribeUserPool\" },\n        Resources = new [] { userpool.UserPoolArn }\n    }) }\n}));",
          "version": "1"
        },
        "java": {
          "source": "// provide permissions to describe the user pool scoped to the ARN the user pool\npostAuthFn.role.attachInlinePolicy(Policy.Builder.create(this, \"userpool-policy\")\n        .statements(List.of(PolicyStatement.Builder.create()\n                .actions(List.of(\"cognito-idp:DescribeUserPool\"))\n                .resources(List.of(userpool.getUserPoolArn()))\n                .build()))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "// provide permissions to describe the user pool scoped to the ARN the user pool\npostAuthFn.role?.attachInlinePolicy(new iam.Policy(this, 'userpool-policy', {\n  statements: [new iam.PolicyStatement({\n    actions: ['cognito-idp:DescribeUserPool'],\n    resources: [userpool.userPoolArn],\n  })],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 431
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPool#userPoolArn",
        "@aws-cdk/aws-cognito.UserPoolTriggers",
        "@aws-cdk/aws-iam.IIdentity#attachInlinePolicy",
        "@aws-cdk/aws-iam.Policy",
        "@aws-cdk/aws-iam.PolicyProps",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Function#role",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const postAuthFn = new lambda.Function(this, 'postAuthFn', {\n      code: lambda.Code.fromInline('post authentication'),\n      runtime: lambda.Runtime.NODEJS_12_X,\n      handler: 'index.handler',\n    });\n\n    const userpool = new cognito.UserPool(this, 'myuserpool', {\n      lambdaTriggers: {\n        postAuthentication: postAuthFn,\n      },\n    });\n\n    // Code snippet begins after !show marker below\n/// !show\n// provide permissions to describe the user pool scoped to the ARN the user pool\npostAuthFn.role?.attachInlinePolicy(new iam.Policy(this, 'userpool-policy', {\n  statements: [new iam.PolicyStatement({\n    actions: ['cognito-idp:DescribeUserPool'],\n    resources: [userpool.userPoolArn],\n  })],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "28": 1,
        "75": 12,
        "104": 1,
        "192": 3,
        "193": 2,
        "194": 5,
        "196": 1,
        "197": 2,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "c45d4307b4d762438721f6f997447a22b7f5f0994c3b3237a5e8afd270b59c62"
    },
    "666564a14cac34f6090c25419712bd710b27b3b67d414bfc8cd915b2dd5d73b2": {
      "translations": {
        "python": {
          "source": "awesome_pool = cognito.UserPool.from_user_pool_id(self, \"awesome-user-pool\", \"us-east-1_oiuR12Abd\")\n\nother_awesome_pool = cognito.UserPool.from_user_pool_arn(self, \"other-awesome-user-pool\", \"arn:aws:cognito-idp:eu-west-1:123456789012:userpool/us-east-1_mtRyYQ14D\")",
          "version": "1"
        },
        "csharp": {
          "source": "IUserPool awesomePool = UserPool.FromUserPoolId(this, \"awesome-user-pool\", \"us-east-1_oiuR12Abd\");\n\nIUserPool otherAwesomePool = UserPool.FromUserPoolArn(this, \"other-awesome-user-pool\", \"arn:aws:cognito-idp:eu-west-1:123456789012:userpool/us-east-1_mtRyYQ14D\");",
          "version": "1"
        },
        "java": {
          "source": "IUserPool awesomePool = UserPool.fromUserPoolId(this, \"awesome-user-pool\", \"us-east-1_oiuR12Abd\");\n\nIUserPool otherAwesomePool = UserPool.fromUserPoolArn(this, \"other-awesome-user-pool\", \"arn:aws:cognito-idp:eu-west-1:123456789012:userpool/us-east-1_mtRyYQ14D\");",
          "version": "1"
        },
        "$": {
          "source": "const awesomePool = cognito.UserPool.fromUserPoolId(this, 'awesome-user-pool', 'us-east-1_oiuR12Abd');\n\nconst otherAwesomePool = cognito.UserPool.fromUserPoolArn(this, 'other-awesome-user-pool',\n  'arn:aws:cognito-idp:eu-west-1:123456789012:userpool/us-east-1_mtRyYQ14D');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 452
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.IUserPool",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPool#fromUserPoolArn",
        "@aws-cdk/aws-cognito.UserPool#fromUserPoolId"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst awesomePool = cognito.UserPool.fromUserPoolId(this, 'awesome-user-pool', 'us-east-1_oiuR12Abd');\n\nconst otherAwesomePool = cognito.UserPool.fromUserPoolArn(this, 'other-awesome-user-pool',\n  'arn:aws:cognito-idp:eu-west-1:123456789012:userpool/us-east-1_mtRyYQ14D');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "104": 2,
        "194": 4,
        "196": 2,
        "225": 2,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "4232d48b6f583101a125b7fb9c85b11c6598fca1fcd129fdcb632477962d9e17"
    },
    "72fde5974a8332e271e55ea76ef605d44345ea2c819972e3337b3b77cafe6fc4": {
      "translations": {
        "python": {
          "source": "userpool = cognito.UserPool(self, \"Pool\")\n\nprovider = cognito.UserPoolIdentityProviderAmazon(self, \"Amazon\",\n    client_id=\"amzn-client-id\",\n    client_secret=\"amzn-client-secret\",\n    user_pool=userpool\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool userpool = new UserPool(this, \"Pool\");\n\nUserPoolIdentityProviderAmazon provider = new UserPoolIdentityProviderAmazon(this, \"Amazon\", new UserPoolIdentityProviderAmazonProps {\n    ClientId = \"amzn-client-id\",\n    ClientSecret = \"amzn-client-secret\",\n    UserPool = userpool\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool userpool = new UserPool(this, \"Pool\");\n\nUserPoolIdentityProviderAmazon provider = UserPoolIdentityProviderAmazon.Builder.create(this, \"Amazon\")\n        .clientId(\"amzn-client-id\")\n        .clientSecret(\"amzn-client-secret\")\n        .userPool(userpool)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const userpool = new cognito.UserPool(this, 'Pool');\n\nconst provider = new cognito.UserPoolIdentityProviderAmazon(this, 'Amazon', {\n  clientId: 'amzn-client-id',\n  clientSecret: 'amzn-client-secret',\n  userPool: userpool,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 477
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.IUserPool",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolIdentityProviderAmazon",
        "@aws-cdk/aws-cognito.UserPoolIdentityProviderAmazonProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst userpool = new cognito.UserPool(this, 'Pool');\n\nconst provider = new cognito.UserPoolIdentityProviderAmazon(this, 'Amazon', {\n  clientId: 'amzn-client-id',\n  clientSecret: 'amzn-client-secret',\n  userPool: userpool,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 10,
        "104": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 3
      },
      "fqnsFingerprint": "471a493a1b764f64a7acd89122eaac8c4815019b70964312462232e45a4d3286"
    },
    "4ac266e761d9ab4a92df71e83f7ce76fa395862adf497a075c111607e05db45a": {
      "translations": {
        "python": {
          "source": "userpool = cognito.UserPool(self, \"Pool\")\n\ncognito.UserPoolIdentityProviderAmazon(self, \"Amazon\",\n    client_id=\"amzn-client-id\",\n    client_secret=\"amzn-client-secret\",\n    user_pool=userpool,\n    attribute_mapping=cognito.AttributeMapping(\n        email=cognito.ProviderAttribute.AMAZON_EMAIL,\n        website=cognito.ProviderAttribute.other(\"url\"),  # use other() when an attribute is not pre-defined in the CDK\n        custom={\n            # custom user pool attributes go here\n            \"unique_id\": cognito.ProviderAttribute.AMAZON_USER_ID\n        }\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool userpool = new UserPool(this, \"Pool\");\n\nnew UserPoolIdentityProviderAmazon(this, \"Amazon\", new UserPoolIdentityProviderAmazonProps {\n    ClientId = \"amzn-client-id\",\n    ClientSecret = \"amzn-client-secret\",\n    UserPool = userpool,\n    AttributeMapping = new AttributeMapping {\n        Email = ProviderAttribute.AMAZON_EMAIL,\n        Website = ProviderAttribute.Other(\"url\"),  // use other() when an attribute is not pre-defined in the CDK\n        Custom = new Dictionary<string, ProviderAttribute> {\n            // custom user pool attributes go here\n            { \"uniqueId\", ProviderAttribute.AMAZON_USER_ID }\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool userpool = new UserPool(this, \"Pool\");\n\nUserPoolIdentityProviderAmazon.Builder.create(this, \"Amazon\")\n        .clientId(\"amzn-client-id\")\n        .clientSecret(\"amzn-client-secret\")\n        .userPool(userpool)\n        .attributeMapping(AttributeMapping.builder()\n                .email(ProviderAttribute.AMAZON_EMAIL)\n                .website(ProviderAttribute.other(\"url\")) // use other() when an attribute is not pre-defined in the CDK\n                .custom(Map.of(\n                        // custom user pool attributes go here\n                        \"uniqueId\", ProviderAttribute.AMAZON_USER_ID))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const userpool = new cognito.UserPool(this, 'Pool');\n\nnew cognito.UserPoolIdentityProviderAmazon(this, 'Amazon', {\n  clientId: 'amzn-client-id',\n  clientSecret: 'amzn-client-secret',\n  userPool: userpool,\n  attributeMapping: {\n    email: cognito.ProviderAttribute.AMAZON_EMAIL,\n    website: cognito.ProviderAttribute.other('url'), // use other() when an attribute is not pre-defined in the CDK\n    custom: {\n      // custom user pool attributes go here\n      uniqueId: cognito.ProviderAttribute.AMAZON_USER_ID,\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 494
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.AttributeMapping",
        "@aws-cdk/aws-cognito.IUserPool",
        "@aws-cdk/aws-cognito.ProviderAttribute",
        "@aws-cdk/aws-cognito.ProviderAttribute#AMAZON_EMAIL",
        "@aws-cdk/aws-cognito.ProviderAttribute#AMAZON_USER_ID",
        "@aws-cdk/aws-cognito.ProviderAttribute#other",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolIdentityProviderAmazon",
        "@aws-cdk/aws-cognito.UserPoolIdentityProviderAmazonProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst userpool = new cognito.UserPool(this, 'Pool');\n\nnew cognito.UserPoolIdentityProviderAmazon(this, 'Amazon', {\n  clientId: 'amzn-client-id',\n  clientSecret: 'amzn-client-secret',\n  userPool: userpool,\n  attributeMapping: {\n    email: cognito.ProviderAttribute.AMAZON_EMAIL,\n    website: cognito.ProviderAttribute.other('url'), // use other() when an attribute is not pre-defined in the CDK\n    custom: {\n      // custom user pool attributes go here\n      uniqueId: cognito.ProviderAttribute.AMAZON_USER_ID,\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 23,
        "104": 2,
        "193": 3,
        "194": 8,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 8
      },
      "fqnsFingerprint": "89c9a9f330c8b6a2da8f25e59ffaef3da0c69c64f07f9818a447c72e909e333b"
    },
    "3bafaab079728958b3b426b32e7f29dab0865186fedc71285fbd2f50c523e9dc": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"pool\")\nclient = pool.add_client(\"customer-app-client\")\nclient_id = client.user_pool_client_id",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"pool\");\nUserPoolClient client = pool.AddClient(\"customer-app-client\");\nstring clientId = client.UserPoolClientId;",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"pool\");\nUserPoolClient client = pool.addClient(\"customer-app-client\");\nString clientId = client.getUserPoolClientId();",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'pool');\nconst client = pool.addClient('customer-app-client');\nconst clientId = client.userPoolClientId;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 521
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClient",
        "@aws-cdk/aws-cognito.UserPoolClient#userPoolClientId"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'pool');\nconst client = pool.addClient('customer-app-client');\nconst clientId = client.userPoolClientId;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 3,
        "242": 3,
        "243": 3
      },
      "fqnsFingerprint": "49071ef7c5a153c9fcf9ad28aa6a153d9886e97432cb220759b7d615491e3df9"
    },
    "64a27f7e13e29ecfa95eadf4c0362a2c334416b883b9da6987c72586f6b44b77": {
      "translations": {
        "python": {
          "source": "imported_pool = cognito.UserPool.from_user_pool_id(self, \"imported-pool\", \"us-east-1_oiuR12Abd\")\ncognito.UserPoolClient(self, \"customer-app-client\",\n    user_pool=imported_pool\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IUserPool importedPool = UserPool.FromUserPoolId(this, \"imported-pool\", \"us-east-1_oiuR12Abd\");\nnew UserPoolClient(this, \"customer-app-client\", new UserPoolClientProps {\n    UserPool = importedPool\n});",
          "version": "1"
        },
        "java": {
          "source": "IUserPool importedPool = UserPool.fromUserPoolId(this, \"imported-pool\", \"us-east-1_oiuR12Abd\");\nUserPoolClient.Builder.create(this, \"customer-app-client\")\n        .userPool(importedPool)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const importedPool = cognito.UserPool.fromUserPoolId(this, 'imported-pool', 'us-east-1_oiuR12Abd');\nnew cognito.UserPoolClient(this, 'customer-app-client', {\n  userPool: importedPool\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 530
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.IUserPool",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPool#fromUserPoolId",
        "@aws-cdk/aws-cognito.UserPoolClient",
        "@aws-cdk/aws-cognito.UserPoolClientProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst importedPool = cognito.UserPool.fromUserPoolId(this, 'imported-pool', 'us-east-1_oiuR12Abd');\nnew cognito.UserPoolClient(this, 'customer-app-client', {\n  userPool: importedPool\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "104": 2,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "d48963119d64342c267d7ac3e8cd23a396b0ac4cf8f1d5a755564f5f94691d8d"
    },
    "10536d56a48ec706c335661f7584a05ec36e8db848b56ea953eab87da9066396": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"pool\")\npool.add_client(\"app-client\",\n    auth_flows=cognito.AuthFlow(\n        user_password=True,\n        user_srp=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"pool\");\npool.AddClient(\"app-client\", new UserPoolClientOptions {\n    AuthFlows = new AuthFlow {\n        UserPassword = true,\n        UserSrp = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"pool\");\npool.addClient(\"app-client\", UserPoolClientOptions.builder()\n        .authFlows(AuthFlow.builder()\n                .userPassword(true)\n                .userSrp(true)\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'pool');\npool.addClient('app-client', {\n  authFlows: {\n    userPassword: true,\n    userSrp: true,\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 544
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.AuthFlow",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClientOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'pool');\npool.addClient('app-client', {\n  authFlows: {\n    userPassword: true,\n    userSrp: true,\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "106": 2,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "f6219d4b61a46feb8b4297937f0ecf88915df83143cd5586d935d9dfaad7f95f"
    },
    "ac9bf16ce90ca43b39ff3478055cb29280398c875670fd36c45bf01c554f01db": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"Pool\")\npool.add_client(\"app-client\",\n    o_auth=cognito.OAuthSettings(\n        flows=cognito.OAuthFlows(\n            authorization_code_grant=True\n        ),\n        scopes=[cognito.OAuthScope.OPENID],\n        callback_urls=[\"https://my-app-domain.com/welcome\"],\n        logout_urls=[\"https://my-app-domain.com/signin\"]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\npool.AddClient(\"app-client\", new UserPoolClientOptions {\n    OAuth = new OAuthSettings {\n        Flows = new OAuthFlows {\n            AuthorizationCodeGrant = true\n        },\n        Scopes = new [] { OAuthScope.OPENID },\n        CallbackUrls = new [] { \"https://my-app-domain.com/welcome\" },\n        LogoutUrls = new [] { \"https://my-app-domain.com/signin\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\npool.addClient(\"app-client\", UserPoolClientOptions.builder()\n        .oAuth(OAuthSettings.builder()\n                .flows(OAuthFlows.builder()\n                        .authorizationCodeGrant(true)\n                        .build())\n                .scopes(List.of(OAuthScope.OPENID))\n                .callbackUrls(List.of(\"https://my-app-domain.com/welcome\"))\n                .logoutUrls(List.of(\"https://my-app-domain.com/signin\"))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'Pool');\npool.addClient('app-client', {\n  oAuth: {\n    flows: {\n      authorizationCodeGrant: true,\n    },\n    scopes: [ cognito.OAuthScope.OPENID ],\n    callbackUrls: [ 'https://my-app-domain.com/welcome' ],\n    logoutUrls: [ 'https://my-app-domain.com/signin' ],\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 568
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.OAuthFlows",
        "@aws-cdk/aws-cognito.OAuthScope",
        "@aws-cdk/aws-cognito.OAuthScope#OPENID",
        "@aws-cdk/aws-cognito.OAuthSettings",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClientOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'Pool');\npool.addClient('app-client', {\n  oAuth: {\n    flows: {\n      authorizationCodeGrant: true,\n    },\n    scopes: [ cognito.OAuthScope.OPENID ],\n    callbackUrls: [ 'https://my-app-domain.com/welcome' ],\n    logoutUrls: [ 'https://my-app-domain.com/signin' ],\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 14,
        "104": 1,
        "106": 1,
        "192": 3,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "a23e8fe6ebe9b47d29ec72105693d6153dec063898f8acce687bda66334612ec"
    },
    "45e1250661485f375c213fdac7c9c48d961c5ebe50a00b4988179179de9e45c8": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"Pool\")\npool.add_client(\"app-client\",\n    prevent_user_existence_errors=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\npool.AddClient(\"app-client\", new UserPoolClientOptions {\n    PreventUserExistenceErrors = true\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\npool.addClient(\"app-client\", UserPoolClientOptions.builder()\n        .preventUserExistenceErrors(true)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'Pool');\npool.addClient('app-client', {\n  preventUserExistenceErrors: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 589
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClientOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'Pool');\npool.addClient('app-client', {\n  preventUserExistenceErrors: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "00e619a456b10d9bcd2adfc3359bb4a8dabd77d781d2b18f80a2677ea9bbdc14"
    },
    "823a5a0be9207f398ea28c2667665db78e641d7483e023584dcbcfa622ed49ea": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"Pool\")\npool.add_client(\"app-client\",\n    # ...\n    supported_identity_providers=[cognito.UserPoolClientIdentityProvider.AMAZON, cognito.UserPoolClientIdentityProvider.COGNITO\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\npool.AddClient(\"app-client\", new UserPoolClientOptions {\n    // ...\n    SupportedIdentityProviders = new [] { UserPoolClientIdentityProvider.AMAZON, UserPoolClientIdentityProvider.COGNITO }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\npool.addClient(\"app-client\", UserPoolClientOptions.builder()\n        // ...\n        .supportedIdentityProviders(List.of(UserPoolClientIdentityProvider.AMAZON, UserPoolClientIdentityProvider.COGNITO))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'Pool');\npool.addClient('app-client', {\n  // ...\n  supportedIdentityProviders: [\n    cognito.UserPoolClientIdentityProvider.AMAZON,\n    cognito.UserPoolClientIdentityProvider.COGNITO,\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 601
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClientIdentityProvider",
        "@aws-cdk/aws-cognito.UserPoolClientIdentityProvider#AMAZON",
        "@aws-cdk/aws-cognito.UserPoolClientIdentityProvider#COGNITO",
        "@aws-cdk/aws-cognito.UserPoolClientOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'Pool');\npool.addClient('app-client', {\n  // ...\n  supportedIdentityProviders: [\n    cognito.UserPoolClientIdentityProvider.AMAZON,\n    cognito.UserPoolClientIdentityProvider.COGNITO,\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 6,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "4442637905e39245c252cfe7cb0c40a2e4196baa79e164d704a0d9ae299e1cec"
    },
    "8f0de59bb7fa742d9607f5875e31d41a0a3eb49e452dbd21b82fe2fe966e7f04": {
      "translations": {
        "python": {
          "source": "provider = cognito.UserPoolIdentityProviderAmazon(self, \"Amazon\")\nclient = pool.add_client(\"app-client\", {\n    # ...\n    \"supported_identity_providers\": [cognito.UserPoolClientIdentityProvider.AMAZON\n    ]\n},\nclient.node.add_dependency(provider))",
          "version": "1"
        },
        "csharp": {
          "source": "UserPoolIdentityProviderAmazon provider = new UserPoolIdentityProviderAmazon(this, \"Amazon\", new UserPoolIdentityProviderAmazonProps { });\nvar client = pool.AddClient(\"app-client\", new Struct {\n    // ...\n    SupportedIdentityProviders = new [] { UserPoolClientIdentityProvider.AMAZON }\n}, client.Node.AddDependency(provider));",
          "version": "1"
        },
        "java": {
          "source": "UserPoolIdentityProviderAmazon provider = UserPoolIdentityProviderAmazon.Builder.create(this, \"Amazon\").build();\nObject client = pool.addClient(\"app-client\", Map.of(\n        // ...\n        \"supportedIdentityProviders\", List.of(UserPoolClientIdentityProvider.AMAZON)), client.node.addDependency(provider));",
          "version": "1"
        },
        "$": {
          "source": "const provider = new cognito.UserPoolIdentityProviderAmazon(this, 'Amazon', {\n  // ...\n});\nconst client = pool.addClient('app-client', {\n  // ...\n  supportedIdentityProviders: [\n    cognito.UserPoolClientIdentityProvider.AMAZON,\n  ],\n}\nclient.node.addDependency(provider);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 614
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPoolClientIdentityProvider",
        "@aws-cdk/aws-cognito.UserPoolClientIdentityProvider#AMAZON",
        "@aws-cdk/aws-cognito.UserPoolIdentityProviderAmazon",
        "@aws-cdk/aws-cognito.UserPoolIdentityProviderAmazonProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = new cognito.UserPoolIdentityProviderAmazon(this, 'Amazon', {\n  // ...\n});\nconst client = pool.addClient('app-client', {\n  // ...\n  supportedIdentityProviders: [\n    cognito.UserPoolClientIdentityProvider.AMAZON,\n  ],\n}\nclient.node.addDependency(provider);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1
      },
      "fqnsFingerprint": "3f1a8bb163e365358fdd95291bff66df54fe9363ea5ce901bcf9c55eaeaef7cc"
    },
    "2e975cd0fee072b08851fea0d1eff0ae2a394686d06fb9dcc3d832b88812dc25": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"Pool\")\npool.add_client(\"app-client\",\n    # ...\n    access_token_validity=Duration.minutes(60),\n    id_token_validity=Duration.minutes(60),\n    refresh_token_validity=Duration.days(30)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\npool.AddClient(\"app-client\", new UserPoolClientOptions {\n    // ...\n    AccessTokenValidity = Duration.Minutes(60),\n    IdTokenValidity = Duration.Minutes(60),\n    RefreshTokenValidity = Duration.Days(30)\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\npool.addClient(\"app-client\", UserPoolClientOptions.builder()\n        // ...\n        .accessTokenValidity(Duration.minutes(60))\n        .idTokenValidity(Duration.minutes(60))\n        .refreshTokenValidity(Duration.days(30))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'Pool');\npool.addClient('app-client', {\n  // ...\n  accessTokenValidity: Duration.minutes(60),\n  idTokenValidity: Duration.minutes(60),\n  refreshTokenValidity: Duration.days(30),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 631
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClientOptions",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days",
        "@aws-cdk/core.Duration#minutes"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'Pool');\npool.addClient('app-client', {\n  // ...\n  accessTokenValidity: Duration.minutes(60),\n  idTokenValidity: Duration.minutes(60),\n  refreshTokenValidity: Duration.days(30),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 2,
        "75": 14,
        "104": 1,
        "193": 1,
        "194": 5,
        "196": 4,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "a558b6a370061b1b308ea93a18e2a8975e484b45c421558f9128016561f82110"
    },
    "94eb03d1ec56449307eaffef4c357f91913da118b1cfcaee9d7b7f8187a27b8e": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"Pool\")\n\nclient_write_attributes = (ClientAttributes()).with_standard_attributes(fullname=True, email=True).with_custom_attributes(\"favouritePizza\", \"favouriteBeverage\")\n\nclient_read_attributes = client_write_attributes.with_standard_attributes(email_verified=True).with_custom_attributes(\"pointsEarned\")\n\npool.add_client(\"app-client\",\n    # ...\n    read_attributes=client_read_attributes,\n    write_attributes=client_write_attributes\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\nvar clientWriteAttributes = (new ClientAttributes()).WithStandardAttributes(new Struct { Fullname = true, Email = true }).WithCustomAttributes(\"favouritePizza\", \"favouriteBeverage\");\n\nvar clientReadAttributes = clientWriteAttributes.WithStandardAttributes(new Struct { EmailVerified = true }).WithCustomAttributes(\"pointsEarned\");\n\npool.AddClient(\"app-client\", new UserPoolClientOptions {\n    // ...\n    ReadAttributes = clientReadAttributes,\n    WriteAttributes = clientWriteAttributes\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\nObject clientWriteAttributes = (new ClientAttributes()).withStandardAttributes(Map.of(\"fullname\", true, \"email\", true)).withCustomAttributes(\"favouritePizza\", \"favouriteBeverage\");\n\nObject clientReadAttributes = clientWriteAttributes.withStandardAttributes(Map.of(\"emailVerified\", true)).withCustomAttributes(\"pointsEarned\");\n\npool.addClient(\"app-client\", UserPoolClientOptions.builder()\n        // ...\n        .readAttributes(clientReadAttributes)\n        .writeAttributes(clientWriteAttributes)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'Pool');\n\nconst clientWriteAttributes = (new ClientAttributes())\n  .withStandardAttributes({fullname: true, email: true})\n  .withCustomAttributes('favouritePizza', 'favouriteBeverage');\n\nconst clientReadAttributes = clientWriteAttributes\n  .withStandardAttributes({emailVerified: true})\n  .withCustomAttributes('pointsEarned');\n\npool.addClient('app-client', {\n  // ...\n  readAttributes: clientReadAttributes,\n  writeAttributes: clientWriteAttributes,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 647
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.ClientAttributes",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClientOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'Pool');\n\nconst clientWriteAttributes = (new ClientAttributes())\n  .withStandardAttributes({fullname: true, email: true})\n  .withCustomAttributes('favouritePizza', 'favouriteBeverage');\n\nconst clientReadAttributes = clientWriteAttributes\n  .withStandardAttributes({emailVerified: true})\n  .withCustomAttributes('pointsEarned');\n\npool.addClient('app-client', {\n  // ...\n  readAttributes: clientReadAttributes,\n  writeAttributes: clientWriteAttributes,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 1,
        "106": 3,
        "193": 3,
        "194": 6,
        "196": 5,
        "197": 2,
        "200": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5
      },
      "fqnsFingerprint": "435265a4480b9632915f548393721bb3544a4a7f2e1bbbb541b5ae629e595319"
    },
    "3836d3272372fa67fb2c9e362e4c88998c61e659ea2bd3696aa1d037e264a8dd": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"Pool\")\npool.add_client(\"app-client\",\n    # ...\n    enable_token_revocation=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\npool.AddClient(\"app-client\", new UserPoolClientOptions {\n    // ...\n    EnableTokenRevocation = true\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\npool.addClient(\"app-client\", UserPoolClientOptions.builder()\n        // ...\n        .enableTokenRevocation(true)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'Pool');\npool.addClient('app-client', {\n  // ...\n  enableTokenRevocation: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 668
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClientOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'Pool');\npool.addClient('app-client', {\n  // ...\n  enableTokenRevocation: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 6,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "00e619a456b10d9bcd2adfc3359bb4a8dabd77d781d2b18f80a2677ea9bbdc14"
    },
    "e4c72e87f6033c75320e76e055c7b9b2cbb882ec4fc0f867adccbe85ff0d5d57": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"Pool\")\n\nread_only_scope = ResourceServerScope(scope_name=\"read\", scope_description=\"Read-only access\")\nfull_access_scope = ResourceServerScope(scope_name=\"*\", scope_description=\"Full access\")\n\nuser_server = pool.add_resource_server(\"ResourceServer\",\n    identifier=\"users\",\n    scopes=[read_only_scope, full_access_scope]\n)\n\nread_only_client = pool.add_client(\"read-only-client\",\n    # ...\n    o_auth=cognito.OAuthSettings(\n        # ...\n        scopes=[OAuthScope.resource_server(user_server, read_only_scope)]\n    )\n)\n\nfull_access_client = pool.add_client(\"full-access-client\",\n    # ...\n    o_auth=cognito.OAuthSettings(\n        # ...\n        scopes=[OAuthScope.resource_server(user_server, full_access_scope)]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\nvar readOnlyScope = new ResourceServerScope(new Struct { ScopeName = \"read\", ScopeDescription = \"Read-only access\" });\nvar fullAccessScope = new ResourceServerScope(new Struct { ScopeName = \"*\", ScopeDescription = \"Full access\" });\n\nUserPoolResourceServer userServer = pool.AddResourceServer(\"ResourceServer\", new UserPoolResourceServerOptions {\n    Identifier = \"users\",\n    Scopes = new [] { readOnlyScope, fullAccessScope }\n});\n\nUserPoolClient readOnlyClient = pool.AddClient(\"read-only-client\", new UserPoolClientOptions {\n    // ...\n    OAuth = new OAuthSettings {\n        // ...\n        Scopes = new [] { OAuthScope.ResourceServer(userServer, readOnlyScope) }\n    }\n});\n\nUserPoolClient fullAccessClient = pool.AddClient(\"full-access-client\", new UserPoolClientOptions {\n    // ...\n    OAuth = new OAuthSettings {\n        // ...\n        Scopes = new [] { OAuthScope.ResourceServer(userServer, fullAccessScope) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\nObject readOnlyScope = ResourceServerScope.Builder.create().scopeName(\"read\").scopeDescription(\"Read-only access\").build();\nObject fullAccessScope = ResourceServerScope.Builder.create().scopeName(\"*\").scopeDescription(\"Full access\").build();\n\nUserPoolResourceServer userServer = pool.addResourceServer(\"ResourceServer\", UserPoolResourceServerOptions.builder()\n        .identifier(\"users\")\n        .scopes(List.of(readOnlyScope, fullAccessScope))\n        .build());\n\nUserPoolClient readOnlyClient = pool.addClient(\"read-only-client\", UserPoolClientOptions.builder()\n        // ...\n        .oAuth(OAuthSettings.builder()\n                // ...\n                .scopes(List.of(OAuthScope.resourceServer(userServer, readOnlyScope)))\n                .build())\n        .build());\n\nUserPoolClient fullAccessClient = pool.addClient(\"full-access-client\", UserPoolClientOptions.builder()\n        // ...\n        .oAuth(OAuthSettings.builder()\n                // ...\n                .scopes(List.of(OAuthScope.resourceServer(userServer, fullAccessScope)))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'Pool');\n\nconst readOnlyScope = new ResourceServerScope({ scopeName: 'read', scopeDescription: 'Read-only access' });\nconst fullAccessScope = new ResourceServerScope({ scopeName: '*', scopeDescription: 'Full access' });\n\nconst userServer = pool.addResourceServer('ResourceServer', {\n  identifier: 'users',\n  scopes: [ readOnlyScope, fullAccessScope ],\n});\n\nconst readOnlyClient = pool.addClient('read-only-client', {\n  // ...\n  oAuth: {\n    // ...\n    scopes: [ OAuthScope.resourceServer(userServer, readOnlyScope) ],\n  },\n});\n\nconst fullAccessClient = pool.addClient('full-access-client', {\n  // ...\n  oAuth: {\n    // ...\n    scopes: [ OAuthScope.resourceServer(userServer, fullAccessScope) ],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 687
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.OAuthSettings",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClient",
        "@aws-cdk/aws-cognito.UserPoolClientOptions",
        "@aws-cdk/aws-cognito.UserPoolResourceServer",
        "@aws-cdk/aws-cognito.UserPoolResourceServerOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'Pool');\n\nconst readOnlyScope = new ResourceServerScope({ scopeName: 'read', scopeDescription: 'Read-only access' });\nconst fullAccessScope = new ResourceServerScope({ scopeName: '*', scopeDescription: 'Full access' });\n\nconst userServer = pool.addResourceServer('ResourceServer', {\n  identifier: 'users',\n  scopes: [ readOnlyScope, fullAccessScope ],\n});\n\nconst readOnlyClient = pool.addClient('read-only-client', {\n  // ...\n  oAuth: {\n    // ...\n    scopes: [ OAuthScope.resourceServer(userServer, readOnlyScope) ],\n  },\n});\n\nconst fullAccessClient = pool.addClient('full-access-client', {\n  // ...\n  oAuth: {\n    // ...\n    scopes: [ OAuthScope.resourceServer(userServer, fullAccessScope) ],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 36,
        "104": 1,
        "192": 3,
        "193": 7,
        "194": 6,
        "196": 5,
        "197": 3,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 10
      },
      "fqnsFingerprint": "ea4eb9f671ed2aa123740c93223fe9da05e4694a0acd4dbfe0d3ebd5876c63d9"
    },
    "eb757d53e359c98677410ba1a011ff70ad944579fff705071044656dc221bae3": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"Pool\")\n\npool.add_domain(\"CognitoDomain\",\n    cognito_domain=cognito.CognitoDomainOptions(\n        domain_prefix=\"my-awesome-app\"\n    )\n)\n\ncertificate_arn = \"arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"\n\ndomain_cert = certificatemanager.Certificate.from_certificate_arn(self, \"domainCert\", certificate_arn)\npool.add_domain(\"CustomDomain\",\n    custom_domain=cognito.CustomDomainOptions(\n        domain_name=\"user.myapp.com\",\n        certificate=domain_cert\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\npool.AddDomain(\"CognitoDomain\", new UserPoolDomainOptions {\n    CognitoDomain = new CognitoDomainOptions {\n        DomainPrefix = \"my-awesome-app\"\n    }\n});\n\nstring certificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d\";\n\nICertificate domainCert = Certificate.FromCertificateArn(this, \"domainCert\", certificateArn);\npool.AddDomain(\"CustomDomain\", new UserPoolDomainOptions {\n    CustomDomain = new CustomDomainOptions {\n        DomainName = \"user.myapp.com\",\n        Certificate = domainCert\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\npool.addDomain(\"CognitoDomain\", UserPoolDomainOptions.builder()\n        .cognitoDomain(CognitoDomainOptions.builder()\n                .domainPrefix(\"my-awesome-app\")\n                .build())\n        .build());\n\nString certificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d\";\n\nICertificate domainCert = Certificate.fromCertificateArn(this, \"domainCert\", certificateArn);\npool.addDomain(\"CustomDomain\", UserPoolDomainOptions.builder()\n        .customDomain(CustomDomainOptions.builder()\n                .domainName(\"user.myapp.com\")\n                .certificate(domainCert)\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'Pool');\n\npool.addDomain('CognitoDomain', {\n  cognitoDomain: {\n    domainPrefix: 'my-awesome-app',\n  },\n});\n\nconst certificateArn = 'arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d';\n\nconst domainCert = certificatemanager.Certificate.fromCertificateArn(this, 'domainCert', certificateArn);\npool.addDomain('CustomDomain', {\n  customDomain: {\n    domainName: 'user.myapp.com',\n    certificate: domainCert,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 725
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-certificatemanager.Certificate",
        "@aws-cdk/aws-certificatemanager.Certificate#fromCertificateArn",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-cognito.CognitoDomainOptions",
        "@aws-cdk/aws-cognito.CustomDomainOptions",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolDomainOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'Pool');\n\npool.addDomain('CognitoDomain', {\n  cognitoDomain: {\n    domainPrefix: 'my-awesome-app',\n  },\n});\n\nconst certificateArn = 'arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d';\n\nconst domainCert = certificatemanager.Certificate.fromCertificateArn(this, 'domainCert', certificateArn);\npool.addDomain('CustomDomain', {\n  customDomain: {\n    domainName: 'user.myapp.com',\n    certificate: domainCert,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 19,
        "104": 2,
        "193": 4,
        "194": 5,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 5
      },
      "fqnsFingerprint": "08f518e6c611908d19222ec462d8450805480858d3ecd0c1e12cb87d5c22964d"
    },
    "1b27ee6a50aef119fffd9cdd70a3b88f6ef9839c5944824084a5814663e5b13f": {
      "translations": {
        "python": {
          "source": "userpool = cognito.UserPool(self, \"UserPool\")\nclient = userpool.add_client(\"Client\",\n    # ...\n    o_auth=cognito.OAuthSettings(\n        flows=cognito.OAuthFlows(\n            implicit_code_grant=True\n        ),\n        callback_urls=[\"https://myapp.com/home\", \"https://myapp.com/users\"\n        ]\n    )\n)\ndomain = userpool.add_domain(\"Domain\")\nsign_in_url = domain.sign_in_url(client,\n    redirect_uri=\"https://myapp.com/home\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool userpool = new UserPool(this, \"UserPool\", new UserPoolProps { });\nUserPoolClient client = userpool.AddClient(\"Client\", new UserPoolClientOptions {\n    // ...\n    OAuth = new OAuthSettings {\n        Flows = new OAuthFlows {\n            ImplicitCodeGrant = true\n        },\n        CallbackUrls = new [] { \"https://myapp.com/home\", \"https://myapp.com/users\" }\n    }\n});\nUserPoolDomain domain = userpool.AddDomain(\"Domain\", new UserPoolDomainOptions { });\nstring signInUrl = domain.SignInUrl(client, new SignInUrlOptions {\n    RedirectUri = \"https://myapp.com/home\"\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool userpool = UserPool.Builder.create(this, \"UserPool\").build();\nUserPoolClient client = userpool.addClient(\"Client\", UserPoolClientOptions.builder()\n        // ...\n        .oAuth(OAuthSettings.builder()\n                .flows(OAuthFlows.builder()\n                        .implicitCodeGrant(true)\n                        .build())\n                .callbackUrls(List.of(\"https://myapp.com/home\", \"https://myapp.com/users\"))\n                .build())\n        .build());\nUserPoolDomain domain = userpool.addDomain(\"Domain\", UserPoolDomainOptions.builder().build());\nString signInUrl = domain.signInUrl(client, SignInUrlOptions.builder()\n        .redirectUri(\"https://myapp.com/home\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const userpool = new cognito.UserPool(this, 'UserPool', {\n  // ...\n});\nconst client = userpool.addClient('Client', {\n  // ...\n  oAuth: {\n    flows: {\n      implicitCodeGrant: true,\n    },\n    callbackUrls: [\n      'https://myapp.com/home',\n      'https://myapp.com/users',\n    ]\n  }\n})\nconst domain = userpool.addDomain('Domain', {\n  // ...\n});\nconst signInUrl = domain.signInUrl(client, {\n  redirectUri: 'https://myapp.com/home', // must be a URL configured under 'callbackUrls' with the client\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 753
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.OAuthFlows",
        "@aws-cdk/aws-cognito.OAuthSettings",
        "@aws-cdk/aws-cognito.SignInUrlOptions",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClient",
        "@aws-cdk/aws-cognito.UserPoolClientOptions",
        "@aws-cdk/aws-cognito.UserPoolDomain",
        "@aws-cdk/aws-cognito.UserPoolDomain#signInUrl",
        "@aws-cdk/aws-cognito.UserPoolDomainOptions",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst userpool = new cognito.UserPool(this, 'UserPool', {\n  // ...\n});\nconst client = userpool.addClient('Client', {\n  // ...\n  oAuth: {\n    flows: {\n      implicitCodeGrant: true,\n    },\n    callbackUrls: [\n      'https://myapp.com/home',\n      'https://myapp.com/users',\n    ]\n  }\n})\nconst domain = userpool.addDomain('Domain', {\n  // ...\n});\nconst signInUrl = domain.signInUrl(client, {\n  redirectUri: 'https://myapp.com/home', // must be a URL configured under 'callbackUrls' with the client\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 18,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 6,
        "194": 4,
        "196": 3,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 5
      },
      "fqnsFingerprint": "a28a2564e65c2cff60431cbe161f94cd13a43ac6b97268bd6af6eb4c68296dd2"
    },
    "4aa99d75b8e1ed7d1c9d55426815745834a2a19faf657d7c55f274fae4507818": {
      "translations": {
        "python": {
          "source": "my_user_pool_domain = cognito.UserPoolDomain.from_domain_name(self, \"my-user-pool-domain\", \"domain-name\")",
          "version": "1"
        },
        "csharp": {
          "source": "IUserPoolDomain myUserPoolDomain = UserPoolDomain.FromDomainName(this, \"my-user-pool-domain\", \"domain-name\");",
          "version": "1"
        },
        "java": {
          "source": "IUserPoolDomain myUserPoolDomain = UserPoolDomain.fromDomainName(this, \"my-user-pool-domain\", \"domain-name\");",
          "version": "1"
        },
        "$": {
          "source": "const myUserPoolDomain = cognito.UserPoolDomain.fromDomainName(this, 'my-user-pool-domain', 'domain-name');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito"
        },
        "field": {
          "field": "markdown",
          "line": 779
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.IUserPoolDomain",
        "@aws-cdk/aws-cognito.UserPoolDomain",
        "@aws-cdk/aws-cognito.UserPoolDomain#fromDomainName"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst myUserPoolDomain = cognito.UserPoolDomain.fromDomainName(this, 'my-user-pool-domain', 'domain-name');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 4,
        "104": 1,
        "194": 2,
        "196": 1,
        "225": 1,
        "242": 1,
        "243": 1
      },
      "fqnsFingerprint": "3e27c2454fbfd7ed1ab1a808e9fd3ec4636dc51d257b8e5f33fc70d0d901f6e4"
    },
    "c0a847ecc2411ffb05b9e0040b1b86a4cc163dfe6b9720dad16b254fc59c4686": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"UserPool\",\n    # ...\n    account_recovery=cognito.AccountRecovery.EMAIL_ONLY\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"UserPool\", new UserPoolProps {\n    // ...\n    AccountRecovery = AccountRecovery.EMAIL_ONLY\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"UserPool\")\n        // ...\n        .accountRecovery(AccountRecovery.EMAIL_ONLY)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'UserPool', {\n  // ...\n  accountRecovery: cognito.AccountRecovery.EMAIL_ONLY,\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.AccountRecovery"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.AccountRecovery",
        "@aws-cdk/aws-cognito.AccountRecovery#EMAIL_ONLY",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'UserPool', {\n  // ...\n  accountRecovery: cognito.AccountRecovery.EMAIL_ONLY,\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "104": 1,
        "193": 1,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 1
      },
      "fqnsFingerprint": "66f9e351ba83e7e7e600c66ad839ce704bad078db5b8665ff6bccf3313eb8568"
    },
    "87dee05f5bc47a71c169a39657c0552ca21ac5d6c5d3bc4017f11a234c93f3d9": {
      "translations": {
        "python": {
          "source": "userpool = cognito.UserPool(self, \"Pool\")\n\ncognito.UserPoolIdentityProviderAmazon(self, \"Amazon\",\n    client_id=\"amzn-client-id\",\n    client_secret=\"amzn-client-secret\",\n    user_pool=userpool,\n    attribute_mapping=cognito.AttributeMapping(\n        email=cognito.ProviderAttribute.AMAZON_EMAIL,\n        website=cognito.ProviderAttribute.other(\"url\"),  # use other() when an attribute is not pre-defined in the CDK\n        custom={\n            # custom user pool attributes go here\n            \"unique_id\": cognito.ProviderAttribute.AMAZON_USER_ID\n        }\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool userpool = new UserPool(this, \"Pool\");\n\nnew UserPoolIdentityProviderAmazon(this, \"Amazon\", new UserPoolIdentityProviderAmazonProps {\n    ClientId = \"amzn-client-id\",\n    ClientSecret = \"amzn-client-secret\",\n    UserPool = userpool,\n    AttributeMapping = new AttributeMapping {\n        Email = ProviderAttribute.AMAZON_EMAIL,\n        Website = ProviderAttribute.Other(\"url\"),  // use other() when an attribute is not pre-defined in the CDK\n        Custom = new Dictionary<string, ProviderAttribute> {\n            // custom user pool attributes go here\n            { \"uniqueId\", ProviderAttribute.AMAZON_USER_ID }\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool userpool = new UserPool(this, \"Pool\");\n\nUserPoolIdentityProviderAmazon.Builder.create(this, \"Amazon\")\n        .clientId(\"amzn-client-id\")\n        .clientSecret(\"amzn-client-secret\")\n        .userPool(userpool)\n        .attributeMapping(AttributeMapping.builder()\n                .email(ProviderAttribute.AMAZON_EMAIL)\n                .website(ProviderAttribute.other(\"url\")) // use other() when an attribute is not pre-defined in the CDK\n                .custom(Map.of(\n                        // custom user pool attributes go here\n                        \"uniqueId\", ProviderAttribute.AMAZON_USER_ID))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const userpool = new cognito.UserPool(this, 'Pool');\n\nnew cognito.UserPoolIdentityProviderAmazon(this, 'Amazon', {\n  clientId: 'amzn-client-id',\n  clientSecret: 'amzn-client-secret',\n  userPool: userpool,\n  attributeMapping: {\n    email: cognito.ProviderAttribute.AMAZON_EMAIL,\n    website: cognito.ProviderAttribute.other('url'), // use other() when an attribute is not pre-defined in the CDK\n    custom: {\n      // custom user pool attributes go here\n      uniqueId: cognito.ProviderAttribute.AMAZON_USER_ID,\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.AttributeMapping"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.AttributeMapping",
        "@aws-cdk/aws-cognito.IUserPool",
        "@aws-cdk/aws-cognito.ProviderAttribute",
        "@aws-cdk/aws-cognito.ProviderAttribute#AMAZON_EMAIL",
        "@aws-cdk/aws-cognito.ProviderAttribute#AMAZON_USER_ID",
        "@aws-cdk/aws-cognito.ProviderAttribute#other",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolIdentityProviderAmazon",
        "@aws-cdk/aws-cognito.UserPoolIdentityProviderAmazonProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst userpool = new cognito.UserPool(this, 'Pool');\n\nnew cognito.UserPoolIdentityProviderAmazon(this, 'Amazon', {\n  clientId: 'amzn-client-id',\n  clientSecret: 'amzn-client-secret',\n  userPool: userpool,\n  attributeMapping: {\n    email: cognito.ProviderAttribute.AMAZON_EMAIL,\n    website: cognito.ProviderAttribute.other('url'), // use other() when an attribute is not pre-defined in the CDK\n    custom: {\n      // custom user pool attributes go here\n      uniqueId: cognito.ProviderAttribute.AMAZON_USER_ID,\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 23,
        "104": 2,
        "193": 3,
        "194": 8,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 8
      },
      "fqnsFingerprint": "89c9a9f330c8b6a2da8f25e59ffaef3da0c69c64f07f9818a447c72e909e333b"
    },
    "0e3fa6dfd4e1c26eacafc54123924a7f342394284d4574086f501aa84e64735b": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"pool\")\npool.add_client(\"app-client\",\n    auth_flows=cognito.AuthFlow(\n        user_password=True,\n        user_srp=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"pool\");\npool.AddClient(\"app-client\", new UserPoolClientOptions {\n    AuthFlows = new AuthFlow {\n        UserPassword = true,\n        UserSrp = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"pool\");\npool.addClient(\"app-client\", UserPoolClientOptions.builder()\n        .authFlows(AuthFlow.builder()\n                .userPassword(true)\n                .userSrp(true)\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'pool');\npool.addClient('app-client', {\n  authFlows: {\n    userPassword: true,\n    userSrp: true,\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.AuthFlow"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.AuthFlow",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClientOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'pool');\npool.addClient('app-client', {\n  authFlows: {\n    userPassword: true,\n    userSrp: true,\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "106": 2,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "f6219d4b61a46feb8b4297937f0ecf88915df83143cd5586d935d9dfaad7f95f"
    },
    "a3730c24b48d0450a7c7993b07307780f97f7ddcaa16c139049f051210768570": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    # ...\n    sign_in_aliases=cognito.SignInAliases(username=True, email=True),\n    auto_verify=cognito.AutoVerifiedAttrs(email=True, phone=True)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    // ...\n    SignInAliases = new SignInAliases { Username = true, Email = true },\n    AutoVerify = new AutoVerifiedAttrs { Email = true, Phone = true }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        // ...\n        .signInAliases(SignInAliases.builder().username(true).email(true).build())\n        .autoVerify(AutoVerifiedAttrs.builder().email(true).phone(true).build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  // ...\n  signInAliases: { username: true, email: true },\n  autoVerify: { email: true, phone: true }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.AutoVerifiedAttrs"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.AutoVerifiedAttrs",
        "@aws-cdk/aws-cognito.SignInAliases",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  // ...\n  signInAliases: { username: true, email: true },\n  autoVerify: { email: true, phone: true }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 8,
        "104": 1,
        "106": 4,
        "193": 3,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "98de56be721351d3f03842dfaaa455f902108a665996eafb396ff988e44cec17"
    },
    "36f2b34a3a25503438d27cd870a2c413b693649530d9b6c769e2f7ca0e29eb0a": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    standard_attributes=cognito.StandardAttributes(\n        fullname=cognito.StandardAttribute(\n            required=True,\n            mutable=False\n        ),\n        address=cognito.StandardAttribute(\n            required=False,\n            mutable=True\n        )\n    ),\n    custom_attributes={\n        \"myappid\": cognito.StringAttribute(min_len=5, max_len=15, mutable=False),\n        \"callingcode\": cognito.NumberAttribute(min=1, max=3, mutable=True),\n        \"is_employee\": cognito.BooleanAttribute(mutable=True),\n        \"joined_on\": cognito.DateTimeAttribute()\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    StandardAttributes = new StandardAttributes {\n        Fullname = new StandardAttribute {\n            Required = true,\n            Mutable = false\n        },\n        Address = new StandardAttribute {\n            Required = false,\n            Mutable = true\n        }\n    },\n    CustomAttributes = new Dictionary<string, ICustomAttribute> {\n        { \"myappid\", new StringAttribute(new StringAttributeProps { MinLen = 5, MaxLen = 15, Mutable = false }) },\n        { \"callingcode\", new NumberAttribute(new NumberAttributeProps { Min = 1, Max = 3, Mutable = true }) },\n        { \"isEmployee\", new BooleanAttribute(new CustomAttributeProps { Mutable = true }) },\n        { \"joinedOn\", new DateTimeAttribute() }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .standardAttributes(StandardAttributes.builder()\n                .fullname(StandardAttribute.builder()\n                        .required(true)\n                        .mutable(false)\n                        .build())\n                .address(StandardAttribute.builder()\n                        .required(false)\n                        .mutable(true)\n                        .build())\n                .build())\n        .customAttributes(Map.of(\n                \"myappid\", StringAttribute.Builder.create().minLen(5).maxLen(15).mutable(false).build(),\n                \"callingcode\", NumberAttribute.Builder.create().min(1).max(3).mutable(true).build(),\n                \"isEmployee\", BooleanAttribute.Builder.create().mutable(true).build(),\n                \"joinedOn\", new DateTimeAttribute()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  standardAttributes: {\n    fullname: {\n      required: true,\n      mutable: false,\n    },\n    address: {\n      required: false,\n      mutable: true,\n    },\n  },\n  customAttributes: {\n    'myappid': new cognito.StringAttribute({ minLen: 5, maxLen: 15, mutable: false }),\n    'callingcode': new cognito.NumberAttribute({ min: 1, max: 3, mutable: true }),\n    'isEmployee': new cognito.BooleanAttribute({ mutable: true }),\n    'joinedOn': new cognito.DateTimeAttribute(),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.BooleanAttribute"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.BooleanAttribute",
        "@aws-cdk/aws-cognito.CustomAttributeProps",
        "@aws-cdk/aws-cognito.DateTimeAttribute",
        "@aws-cdk/aws-cognito.ICustomAttribute",
        "@aws-cdk/aws-cognito.NumberAttribute",
        "@aws-cdk/aws-cognito.NumberAttributeProps",
        "@aws-cdk/aws-cognito.StandardAttribute",
        "@aws-cdk/aws-cognito.StandardAttributes",
        "@aws-cdk/aws-cognito.StringAttribute",
        "@aws-cdk/aws-cognito.StringAttributeProps",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  standardAttributes: {\n    fullname: {\n      required: true,\n      mutable: false,\n    },\n    address: {\n      required: false,\n      mutable: true,\n    },\n  },\n  customAttributes: {\n    'myappid': new cognito.StringAttribute({ minLen: 5, maxLen: 15, mutable: false }),\n    'callingcode': new cognito.NumberAttribute({ min: 1, max: 3, mutable: true }),\n    'isEmployee': new cognito.BooleanAttribute({ mutable: true }),\n    'joinedOn': new cognito.DateTimeAttribute(),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 5,
        "75": 25,
        "91": 3,
        "104": 1,
        "106": 4,
        "193": 8,
        "194": 5,
        "197": 5,
        "226": 1,
        "281": 19
      },
      "fqnsFingerprint": "c68147e1bcefec12a021aece4881899e8960f7d1bfcb6288bfd954b94687e375"
    },
    "70e620c5b4659b96a19ffd375465c6d5f1ec92ec2614377ad63d308b9dca0080": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cognito as cognito\n\n# my_provider is of type OpenIdConnectProvider\n\ncognito.CfnIdentityPool(self, \"IdentityPool\",\n    open_id_connect_provider_arns=[my_provider.open_id_connect_provider_arn],\n    # And the other properties for your identity pool\n    allow_unauthenticated_identities=False\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Cognito;\n\nOpenIdConnectProvider myProvider;\n\nnew CfnIdentityPool(this, \"IdentityPool\", new CfnIdentityPoolProps {\n    OpenIdConnectProviderArns = new [] { myProvider.OpenIdConnectProviderArn },\n    // And the other properties for your identity pool\n    AllowUnauthenticatedIdentities = false\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cognito.*;\n\nOpenIdConnectProvider myProvider;\n\nCfnIdentityPool.Builder.create(this, \"IdentityPool\")\n        .openIdConnectProviderArns(List.of(myProvider.getOpenIdConnectProviderArn()))\n        // And the other properties for your identity pool\n        .allowUnauthenticatedIdentities(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as cognito from '@aws-cdk/aws-cognito';\n\ndeclare const myProvider: iam.OpenIdConnectProvider;\nnew cognito.CfnIdentityPool(this, 'IdentityPool', {\n  openIdConnectProviderArns: [myProvider.openIdConnectProviderArn],\n  // And the other properties for your identity pool\n  allowUnauthenticatedIdentities: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.CfnIdentityPool"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.CfnIdentityPool",
        "@aws-cdk/aws-cognito.CfnIdentityPoolProps",
        "@aws-cdk/aws-iam.OpenIdConnectProvider#openIdConnectProviderArn",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cognito from '@aws-cdk/aws-cognito';\n\ndeclare const myProvider: iam.OpenIdConnectProvider;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cognito.CfnIdentityPool(this, 'IdentityPool', {\n  openIdConnectProviderArns: [myProvider.openIdConnectProviderArn],\n  // And the other properties for your identity pool\n  allowUnauthenticatedIdentities: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "91": 1,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "88614557b7c590a69b40ee12ca7370d1a87825e3b503c8404255d67483b83037"
    },
    "310bd778aabea9276f366ff5eeebbf70ef1b658b1b35a0630c8c39c81113ccc4": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cognito as cognito\n\n# my_provider is of type OpenIdConnectProvider\n\ncognito.CfnIdentityPool(self, \"IdentityPool\",\n    open_id_connect_provider_arns=[my_provider.open_id_connect_provider_arn],\n    # And the other properties for your identity pool\n    allow_unauthenticated_identities=False\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Cognito;\n\nOpenIdConnectProvider myProvider;\n\nnew CfnIdentityPool(this, \"IdentityPool\", new CfnIdentityPoolProps {\n    OpenIdConnectProviderArns = new [] { myProvider.OpenIdConnectProviderArn },\n    // And the other properties for your identity pool\n    AllowUnauthenticatedIdentities = false\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cognito.*;\n\nOpenIdConnectProvider myProvider;\n\nCfnIdentityPool.Builder.create(this, \"IdentityPool\")\n        .openIdConnectProviderArns(List.of(myProvider.getOpenIdConnectProviderArn()))\n        // And the other properties for your identity pool\n        .allowUnauthenticatedIdentities(false)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as cognito from '@aws-cdk/aws-cognito';\n\ndeclare const myProvider: iam.OpenIdConnectProvider;\nnew cognito.CfnIdentityPool(this, 'IdentityPool', {\n  openIdConnectProviderArns: [myProvider.openIdConnectProviderArn],\n  // And the other properties for your identity pool\n  allowUnauthenticatedIdentities: false,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.CfnIdentityPoolProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.CfnIdentityPool",
        "@aws-cdk/aws-cognito.CfnIdentityPoolProps",
        "@aws-cdk/aws-iam.OpenIdConnectProvider#openIdConnectProviderArn",
        "@aws-cdk/core.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as cognito from '@aws-cdk/aws-cognito';\n\ndeclare const myProvider: iam.OpenIdConnectProvider;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from 'constructs';\nimport { CustomResource, Stack } from '@aws-cdk/core';\nimport * as codepipeline from '@aws-cdk/aws-codepipeline';\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\nimport * as lambda from '@aws-cdk/aws-lambda';\nimport * as iam from '@aws-cdk/aws-iam';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nnew cognito.CfnIdentityPool(this, 'IdentityPool', {\n  openIdConnectProviderArns: [myProvider.openIdConnectProviderArn],\n  // And the other properties for your identity pool\n  allowUnauthenticatedIdentities: false,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "91": 1,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "88614557b7c590a69b40ee12ca7370d1a87825e3b503c8404255d67483b83037"
    },
    "6d1fae8d81be0b5d7992ba0a88e5b1d906106550d8a4ac31d0126c8145612c45": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cognito as cognito\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_elasticloadbalancingv2 as elbv2\nfrom aws_cdk.core import App, CfnOutput, Stack\nfrom constructs import Construct\nimport aws_cdk.aws_elasticloadbalancingv2_actions as actions\n\nStack): lb = elbv2.ApplicationLoadBalancer(self, \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\n\nuser_pool = cognito.UserPool(self, \"UserPool\")\nuser_pool_client = cognito.UserPoolClient(self, \"Client\",\n    user_pool=user_pool,\n\n    # Required minimal configuration for use with an ELB\n    generate_secret=True,\n    auth_flows=cognito.AuthFlow(\n        user_password=True\n    ),\n    o_auth=cognito.OAuthSettings(\n        flows=cognito.OAuthFlows(\n            authorization_code_grant=True\n        ),\n        scopes=[cognito.OAuthScope.EMAIL],\n        callback_urls=[f\"https://{lb.loadBalancerDnsName}/oauth2/idpresponse\"\n        ]\n    )\n)\ncfn_client = user_pool_client.node.default_child\ncfn_client.add_property_override(\"RefreshTokenValidity\", 1)\ncfn_client.add_property_override(\"SupportedIdentityProviders\", [\"COGNITO\"])\n\nuser_pool_domain = cognito.UserPoolDomain(self, \"Domain\",\n    user_pool=user_pool,\n    cognito_domain=cognito.CognitoDomainOptions(\n        domain_prefix=\"test-cdk-prefix\"\n    )\n)\n\nlb.add_listener(\"Listener\",\n    port=443,\n    certificates=[certificate],\n    default_action=actions.AuthenticateCognitoAction(\n        user_pool=user_pool,\n        user_pool_client=user_pool_client,\n        user_pool_domain=user_pool_domain,\n        next=elbv2.ListenerAction.fixed_response(200,\n            content_type=\"text/plain\",\n            message_body=\"Authenticated\"\n        )\n    )\n)\n\nCfnOutput(self, \"DNS\",\n    value=lb.load_balancer_dns_name\n)\n\napp = App()\nCognitoStack(app, \"integ-cognito\")\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Cognito;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2;\nusing Amazon.CDK;\nusing Constructs;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2.Actions;\n\nCognitoStack : Stack\n{ApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps {\n    Vpc = vpc,\n    InternetFacing = true\n});\n\nUserPool userPool = new UserPool(this, \"UserPool\");\nUserPoolClient userPoolClient = new UserPoolClient(this, \"Client\", new UserPoolClientProps {\n    UserPool = userPool,\n\n    // Required minimal configuration for use with an ELB\n    GenerateSecret = true,\n    AuthFlows = new AuthFlow {\n        UserPassword = true\n    },\n    OAuth = new OAuthSettings {\n        Flows = new OAuthFlows {\n            AuthorizationCodeGrant = true\n        },\n        Scopes = new [] { OAuthScope.EMAIL },\n        CallbackUrls = new [] { $\"https://{lb.loadBalancerDnsName}/oauth2/idpresponse\" }\n    }\n});\nCfnUserPoolClient cfnClient = (CfnUserPoolClient)userPoolClient.Node.DefaultChild;\ncfnClient.AddPropertyOverride(\"RefreshTokenValidity\", 1);\ncfnClient.AddPropertyOverride(\"SupportedIdentityProviders\", new [] { \"COGNITO\" });\n\nUserPoolDomain userPoolDomain = new UserPoolDomain(this, \"Domain\", new UserPoolDomainProps {\n    UserPool = userPool,\n    CognitoDomain = new CognitoDomainOptions {\n        DomainPrefix = \"test-cdk-prefix\"\n    }\n});\n\nlb.AddListener(\"Listener\", new BaseApplicationListenerProps {\n    Port = 443,\n    Certificates = new [] { certificate },\n    DefaultAction = new AuthenticateCognitoAction(new AuthenticateCognitoActionProps {\n        UserPool = userPool,\n        UserPoolClient = userPoolClient,\n        UserPoolDomain = userPoolDomain,\n        Next = ListenerAction.FixedResponse(200, new FixedResponseOptions {\n            ContentType = \"text/plain\",\n            MessageBody = \"Authenticated\"\n        })\n    })\n});\n\nnew CfnOutput(this, \"DNS\", new CfnOutputProps {\n    Value = lb.LoadBalancerDnsName\n});\n\nApp app = new App();\nnew CognitoStack(app, \"integ-cognito\");\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cognito.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.*;\nimport software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.CfnOutput;\nimport software.amazon.awscdk.core.Stack;\nimport constructs.Construct;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.actions.*;\n\nCognitoStack extends Stack {CognitoStack(ApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\")\n        .vpc(vpc)\n        .internetFacing(true)\n        .build();\n\nUserPool userPool = new UserPool(this, \"UserPool\");\nUserPoolClient userPoolClient = UserPoolClient.Builder.create(this, \"Client\")\n        .userPool(userPool)\n\n        // Required minimal configuration for use with an ELB\n        .generateSecret(true)\n        .authFlows(AuthFlow.builder()\n                .userPassword(true)\n                .build())\n        .oAuth(OAuthSettings.builder()\n                .flows(OAuthFlows.builder()\n                        .authorizationCodeGrant(true)\n                        .build())\n                .scopes(List.of(OAuthScope.EMAIL))\n                .callbackUrls(List.of(String.format(\"https://%s/oauth2/idpresponse\", lb.getLoadBalancerDnsName())))\n                .build())\n        .build();\nCfnUserPoolClient cfnClient = (CfnUserPoolClient)userPoolClient.getNode().getDefaultChild();\ncfnClient.addPropertyOverride(\"RefreshTokenValidity\", 1);\ncfnClient.addPropertyOverride(\"SupportedIdentityProviders\", List.of(\"COGNITO\"));\n\nUserPoolDomain userPoolDomain = UserPoolDomain.Builder.create(this, \"Domain\")\n        .userPool(userPool)\n        .cognitoDomain(CognitoDomainOptions.builder()\n                .domainPrefix(\"test-cdk-prefix\")\n                .build())\n        .build();\n\nlb.addListener(\"Listener\", BaseApplicationListenerProps.builder()\n        .port(443)\n        .certificates(List.of(certificate))\n        .defaultAction(AuthenticateCognitoAction.Builder.create()\n                .userPool(userPool)\n                .userPoolClient(userPoolClient)\n                .userPoolDomain(userPoolDomain)\n                .next(ListenerAction.fixedResponse(200, FixedResponseOptions.builder()\n                        .contentType(\"text/plain\")\n                        .messageBody(\"Authenticated\")\n                        .build()))\n                .build())\n        .build());\n\nCfnOutput.Builder.create(this, \"DNS\")\n        .value(lb.getLoadBalancerDnsName())\n        .build();\n\nApp app = new App();\nnew CognitoStack(app, \"integ-cognito\");\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "    const lb = new elbv2.ApplicationLoadBalancer(this, 'LB', {\n      vpc,\n      internetFacing: true,\n    });\n\n    const userPool = new cognito.UserPool(this, 'UserPool');\n    const userPoolClient = new cognito.UserPoolClient(this, 'Client', {\n      userPool,\n\n      // Required minimal configuration for use with an ELB\n      generateSecret: true,\n      authFlows: {\n        userPassword: true,\n      },\n      oAuth: {\n        flows: {\n          authorizationCodeGrant: true,\n        },\n        scopes: [cognito.OAuthScope.EMAIL],\n        callbackUrls: [\n          `https://${lb.loadBalancerDnsName}/oauth2/idpresponse`,\n        ],\n      },\n    });\n    const cfnClient = userPoolClient.node.defaultChild as cognito.CfnUserPoolClient;\n    cfnClient.addPropertyOverride('RefreshTokenValidity', 1);\n    cfnClient.addPropertyOverride('SupportedIdentityProviders', ['COGNITO']);\n\n    const userPoolDomain = new cognito.UserPoolDomain(this, 'Domain', {\n      userPool,\n      cognitoDomain: {\n        domainPrefix: 'test-cdk-prefix',\n      },\n    });\n\n    lb.addListener('Listener', {\n      port: 443,\n      certificates: [certificate],\n      defaultAction: new actions.AuthenticateCognitoAction({\n        userPool,\n        userPoolClient,\n        userPoolDomain,\n        next: elbv2.ListenerAction.fixedResponse(200, {\n          contentType: 'text/plain',\n          messageBody: 'Authenticated',\n        }),\n      }),\n    });\n\n    new CfnOutput(this, 'DNS', {\n      value: lb.loadBalancerDnsName,\n    });\n  }\n}\n\nconst app = new App();\nnew CognitoStack(app, 'integ-cognito');\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.CfnUserPoolClient"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.AuthFlow",
        "@aws-cdk/aws-cognito.CfnUserPoolClient",
        "@aws-cdk/aws-cognito.CognitoDomainOptions",
        "@aws-cdk/aws-cognito.IUserPool",
        "@aws-cdk/aws-cognito.IUserPoolClient",
        "@aws-cdk/aws-cognito.IUserPoolDomain",
        "@aws-cdk/aws-cognito.OAuthFlows",
        "@aws-cdk/aws-cognito.OAuthScope",
        "@aws-cdk/aws-cognito.OAuthScope#EMAIL",
        "@aws-cdk/aws-cognito.OAuthSettings",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClient",
        "@aws-cdk/aws-cognito.UserPoolClientProps",
        "@aws-cdk/aws-cognito.UserPoolDomain",
        "@aws-cdk/aws-cognito.UserPoolDomainProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-elasticloadbalancingv2-actions.AuthenticateCognitoAction",
        "@aws-cdk/aws-elasticloadbalancingv2-actions.AuthenticateCognitoActionProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseLoadBalancer#loadBalancerDnsName",
        "@aws-cdk/aws-elasticloadbalancingv2.FixedResponseOptions",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction#fixedResponse",
        "@aws-cdk/core.App",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.CfnResource#addPropertyOverride",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as cognito from '@aws-cdk/aws-cognito';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport { App, CfnOutput, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as actions from '../lib';\n\nclass CognitoStack extends Stack {\n\n  /// !hide\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'Stack', {\n      maxAzs: 2,\n    });\n\n    const certificate: elbv2.IListenerCertificate = {\n      certificateArn: process.env.SELF_SIGNED_CERT_ARN ?? '',\n    };\n\n    /// !show\n    const lb = new elbv2.ApplicationLoadBalancer(this, 'LB', {\n      vpc,\n      internetFacing: true,\n    });\n\n    const userPool = new cognito.UserPool(this, 'UserPool');\n    const userPoolClient = new cognito.UserPoolClient(this, 'Client', {\n      userPool,\n\n      // Required minimal configuration for use with an ELB\n      generateSecret: true,\n      authFlows: {\n        userPassword: true,\n      },\n      oAuth: {\n        flows: {\n          authorizationCodeGrant: true,\n        },\n        scopes: [cognito.OAuthScope.EMAIL],\n        callbackUrls: [\n          `https://${lb.loadBalancerDnsName}/oauth2/idpresponse`,\n        ],\n      },\n    });\n    const cfnClient = userPoolClient.node.defaultChild as cognito.CfnUserPoolClient;\n    cfnClient.addPropertyOverride('RefreshTokenValidity', 1);\n    cfnClient.addPropertyOverride('SupportedIdentityProviders', ['COGNITO']);\n\n    const userPoolDomain = new cognito.UserPoolDomain(this, 'Domain', {\n      userPool,\n      cognitoDomain: {\n        domainPrefix: 'test-cdk-prefix',\n      },\n    });\n\n    lb.addListener('Listener', {\n      port: 443,\n      certificates: [certificate],\n      defaultAction: new actions.AuthenticateCognitoAction({\n        userPool,\n        userPoolClient,\n        userPoolDomain,\n        next: elbv2.ListenerAction.fixedResponse(200, {\n          contentType: 'text/plain',\n          messageBody: 'Authenticated',\n        }),\n      }),\n    });\n\n    new CfnOutput(this, 'DNS', {\n      value: lb.loadBalancerDnsName,\n    });\n  }\n}\n\nconst app = new App();\nnew CognitoStack(app, 'integ-cognito');\napp.synth();",
      "syntaxKindCounter": {
        "8": 3,
        "10": 19,
        "15": 1,
        "17": 1,
        "75": 78,
        "104": 5,
        "106": 4,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 11,
        "194": 17,
        "196": 5,
        "197": 8,
        "211": 1,
        "216": 1,
        "217": 1,
        "221": 1,
        "225": 6,
        "226": 6,
        "242": 6,
        "243": 6,
        "245": 1,
        "254": 6,
        "255": 6,
        "256": 4,
        "257": 2,
        "258": 4,
        "279": 1,
        "281": 18,
        "282": 6,
        "290": 1
      },
      "fqnsFingerprint": "9c5a56be5122fdebccc1a32d5315be4f4a44ce346645bc0fdd152bebf32dba30"
    },
    "629cdf86f009d60dafe29a95ef52a1677eb04f49334249c3adca7c98dc629c2b": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"Pool\")\n\nclient_write_attributes = (ClientAttributes()).with_standard_attributes(fullname=True, email=True).with_custom_attributes(\"favouritePizza\", \"favouriteBeverage\")\n\nclient_read_attributes = client_write_attributes.with_standard_attributes(email_verified=True).with_custom_attributes(\"pointsEarned\")\n\npool.add_client(\"app-client\",\n    # ...\n    read_attributes=client_read_attributes,\n    write_attributes=client_write_attributes\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\nvar clientWriteAttributes = (new ClientAttributes()).WithStandardAttributes(new Struct { Fullname = true, Email = true }).WithCustomAttributes(\"favouritePizza\", \"favouriteBeverage\");\n\nvar clientReadAttributes = clientWriteAttributes.WithStandardAttributes(new Struct { EmailVerified = true }).WithCustomAttributes(\"pointsEarned\");\n\npool.AddClient(\"app-client\", new UserPoolClientOptions {\n    // ...\n    ReadAttributes = clientReadAttributes,\n    WriteAttributes = clientWriteAttributes\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\nObject clientWriteAttributes = (new ClientAttributes()).withStandardAttributes(Map.of(\"fullname\", true, \"email\", true)).withCustomAttributes(\"favouritePizza\", \"favouriteBeverage\");\n\nObject clientReadAttributes = clientWriteAttributes.withStandardAttributes(Map.of(\"emailVerified\", true)).withCustomAttributes(\"pointsEarned\");\n\npool.addClient(\"app-client\", UserPoolClientOptions.builder()\n        // ...\n        .readAttributes(clientReadAttributes)\n        .writeAttributes(clientWriteAttributes)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'Pool');\n\nconst clientWriteAttributes = (new ClientAttributes())\n  .withStandardAttributes({fullname: true, email: true})\n  .withCustomAttributes('favouritePizza', 'favouriteBeverage');\n\nconst clientReadAttributes = clientWriteAttributes\n  .withStandardAttributes({emailVerified: true})\n  .withCustomAttributes('pointsEarned');\n\npool.addClient('app-client', {\n  // ...\n  readAttributes: clientReadAttributes,\n  writeAttributes: clientWriteAttributes,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.ClientAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.ClientAttributes",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClientOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'Pool');\n\nconst clientWriteAttributes = (new ClientAttributes())\n  .withStandardAttributes({fullname: true, email: true})\n  .withCustomAttributes('favouritePizza', 'favouriteBeverage');\n\nconst clientReadAttributes = clientWriteAttributes\n  .withStandardAttributes({emailVerified: true})\n  .withCustomAttributes('pointsEarned');\n\npool.addClient('app-client', {\n  // ...\n  readAttributes: clientReadAttributes,\n  writeAttributes: clientWriteAttributes,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 20,
        "104": 1,
        "106": 3,
        "193": 3,
        "194": 6,
        "196": 5,
        "197": 2,
        "200": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "281": 5
      },
      "fqnsFingerprint": "435265a4480b9632915f548393721bb3544a4a7f2e1bbbb541b5ae629e595319"
    },
    "99a428335c5cb075b776b6e694c08399ab3e6e1d9c21c0f017094a40febb649a": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"Pool\")\n\npool.add_domain(\"CognitoDomain\",\n    cognito_domain=cognito.CognitoDomainOptions(\n        domain_prefix=\"my-awesome-app\"\n    )\n)\n\ncertificate_arn = \"arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"\n\ndomain_cert = certificatemanager.Certificate.from_certificate_arn(self, \"domainCert\", certificate_arn)\npool.add_domain(\"CustomDomain\",\n    custom_domain=cognito.CustomDomainOptions(\n        domain_name=\"user.myapp.com\",\n        certificate=domain_cert\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\npool.AddDomain(\"CognitoDomain\", new UserPoolDomainOptions {\n    CognitoDomain = new CognitoDomainOptions {\n        DomainPrefix = \"my-awesome-app\"\n    }\n});\n\nstring certificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d\";\n\nICertificate domainCert = Certificate.FromCertificateArn(this, \"domainCert\", certificateArn);\npool.AddDomain(\"CustomDomain\", new UserPoolDomainOptions {\n    CustomDomain = new CustomDomainOptions {\n        DomainName = \"user.myapp.com\",\n        Certificate = domainCert\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\npool.addDomain(\"CognitoDomain\", UserPoolDomainOptions.builder()\n        .cognitoDomain(CognitoDomainOptions.builder()\n                .domainPrefix(\"my-awesome-app\")\n                .build())\n        .build());\n\nString certificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d\";\n\nICertificate domainCert = Certificate.fromCertificateArn(this, \"domainCert\", certificateArn);\npool.addDomain(\"CustomDomain\", UserPoolDomainOptions.builder()\n        .customDomain(CustomDomainOptions.builder()\n                .domainName(\"user.myapp.com\")\n                .certificate(domainCert)\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'Pool');\n\npool.addDomain('CognitoDomain', {\n  cognitoDomain: {\n    domainPrefix: 'my-awesome-app',\n  },\n});\n\nconst certificateArn = 'arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d';\n\nconst domainCert = certificatemanager.Certificate.fromCertificateArn(this, 'domainCert', certificateArn);\npool.addDomain('CustomDomain', {\n  customDomain: {\n    domainName: 'user.myapp.com',\n    certificate: domainCert,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.CognitoDomainOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-certificatemanager.Certificate",
        "@aws-cdk/aws-certificatemanager.Certificate#fromCertificateArn",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-cognito.CognitoDomainOptions",
        "@aws-cdk/aws-cognito.CustomDomainOptions",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolDomainOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'Pool');\n\npool.addDomain('CognitoDomain', {\n  cognitoDomain: {\n    domainPrefix: 'my-awesome-app',\n  },\n});\n\nconst certificateArn = 'arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d';\n\nconst domainCert = certificatemanager.Certificate.fromCertificateArn(this, 'domainCert', certificateArn);\npool.addDomain('CustomDomain', {\n  customDomain: {\n    domainName: 'user.myapp.com',\n    certificate: domainCert,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 19,
        "104": 2,
        "193": 4,
        "194": 5,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 5
      },
      "fqnsFingerprint": "08f518e6c611908d19222ec462d8450805480858d3ecd0c1e12cb87d5c22964d"
    },
    "d7cd60533cbb0d21e798b62788d3843864893321404a6a27646fed98701192e5": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    standard_attributes=cognito.StandardAttributes(\n        fullname=cognito.StandardAttribute(\n            required=True,\n            mutable=False\n        ),\n        address=cognito.StandardAttribute(\n            required=False,\n            mutable=True\n        )\n    ),\n    custom_attributes={\n        \"myappid\": cognito.StringAttribute(min_len=5, max_len=15, mutable=False),\n        \"callingcode\": cognito.NumberAttribute(min=1, max=3, mutable=True),\n        \"is_employee\": cognito.BooleanAttribute(mutable=True),\n        \"joined_on\": cognito.DateTimeAttribute()\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    StandardAttributes = new StandardAttributes {\n        Fullname = new StandardAttribute {\n            Required = true,\n            Mutable = false\n        },\n        Address = new StandardAttribute {\n            Required = false,\n            Mutable = true\n        }\n    },\n    CustomAttributes = new Dictionary<string, ICustomAttribute> {\n        { \"myappid\", new StringAttribute(new StringAttributeProps { MinLen = 5, MaxLen = 15, Mutable = false }) },\n        { \"callingcode\", new NumberAttribute(new NumberAttributeProps { Min = 1, Max = 3, Mutable = true }) },\n        { \"isEmployee\", new BooleanAttribute(new CustomAttributeProps { Mutable = true }) },\n        { \"joinedOn\", new DateTimeAttribute() }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .standardAttributes(StandardAttributes.builder()\n                .fullname(StandardAttribute.builder()\n                        .required(true)\n                        .mutable(false)\n                        .build())\n                .address(StandardAttribute.builder()\n                        .required(false)\n                        .mutable(true)\n                        .build())\n                .build())\n        .customAttributes(Map.of(\n                \"myappid\", StringAttribute.Builder.create().minLen(5).maxLen(15).mutable(false).build(),\n                \"callingcode\", NumberAttribute.Builder.create().min(1).max(3).mutable(true).build(),\n                \"isEmployee\", BooleanAttribute.Builder.create().mutable(true).build(),\n                \"joinedOn\", new DateTimeAttribute()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  standardAttributes: {\n    fullname: {\n      required: true,\n      mutable: false,\n    },\n    address: {\n      required: false,\n      mutable: true,\n    },\n  },\n  customAttributes: {\n    'myappid': new cognito.StringAttribute({ minLen: 5, maxLen: 15, mutable: false }),\n    'callingcode': new cognito.NumberAttribute({ min: 1, max: 3, mutable: true }),\n    'isEmployee': new cognito.BooleanAttribute({ mutable: true }),\n    'joinedOn': new cognito.DateTimeAttribute(),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.CustomAttributeProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.BooleanAttribute",
        "@aws-cdk/aws-cognito.CustomAttributeProps",
        "@aws-cdk/aws-cognito.DateTimeAttribute",
        "@aws-cdk/aws-cognito.ICustomAttribute",
        "@aws-cdk/aws-cognito.NumberAttribute",
        "@aws-cdk/aws-cognito.NumberAttributeProps",
        "@aws-cdk/aws-cognito.StandardAttribute",
        "@aws-cdk/aws-cognito.StandardAttributes",
        "@aws-cdk/aws-cognito.StringAttribute",
        "@aws-cdk/aws-cognito.StringAttributeProps",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  standardAttributes: {\n    fullname: {\n      required: true,\n      mutable: false,\n    },\n    address: {\n      required: false,\n      mutable: true,\n    },\n  },\n  customAttributes: {\n    'myappid': new cognito.StringAttribute({ minLen: 5, maxLen: 15, mutable: false }),\n    'callingcode': new cognito.NumberAttribute({ min: 1, max: 3, mutable: true }),\n    'isEmployee': new cognito.BooleanAttribute({ mutable: true }),\n    'joinedOn': new cognito.DateTimeAttribute(),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 5,
        "75": 25,
        "91": 3,
        "104": 1,
        "106": 4,
        "193": 8,
        "194": 5,
        "197": 5,
        "226": 1,
        "281": 19
      },
      "fqnsFingerprint": "c68147e1bcefec12a021aece4881899e8960f7d1bfcb6288bfd954b94687e375"
    },
    "eddaad9e79c56c225f1eec7e2c874a9b52b56c8cc3559e0d45a0a352961d77c8": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"Pool\")\n\npool.add_domain(\"CognitoDomain\",\n    cognito_domain=cognito.CognitoDomainOptions(\n        domain_prefix=\"my-awesome-app\"\n    )\n)\n\ncertificate_arn = \"arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"\n\ndomain_cert = certificatemanager.Certificate.from_certificate_arn(self, \"domainCert\", certificate_arn)\npool.add_domain(\"CustomDomain\",\n    custom_domain=cognito.CustomDomainOptions(\n        domain_name=\"user.myapp.com\",\n        certificate=domain_cert\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\npool.AddDomain(\"CognitoDomain\", new UserPoolDomainOptions {\n    CognitoDomain = new CognitoDomainOptions {\n        DomainPrefix = \"my-awesome-app\"\n    }\n});\n\nstring certificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d\";\n\nICertificate domainCert = Certificate.FromCertificateArn(this, \"domainCert\", certificateArn);\npool.AddDomain(\"CustomDomain\", new UserPoolDomainOptions {\n    CustomDomain = new CustomDomainOptions {\n        DomainName = \"user.myapp.com\",\n        Certificate = domainCert\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\npool.addDomain(\"CognitoDomain\", UserPoolDomainOptions.builder()\n        .cognitoDomain(CognitoDomainOptions.builder()\n                .domainPrefix(\"my-awesome-app\")\n                .build())\n        .build());\n\nString certificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d\";\n\nICertificate domainCert = Certificate.fromCertificateArn(this, \"domainCert\", certificateArn);\npool.addDomain(\"CustomDomain\", UserPoolDomainOptions.builder()\n        .customDomain(CustomDomainOptions.builder()\n                .domainName(\"user.myapp.com\")\n                .certificate(domainCert)\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'Pool');\n\npool.addDomain('CognitoDomain', {\n  cognitoDomain: {\n    domainPrefix: 'my-awesome-app',\n  },\n});\n\nconst certificateArn = 'arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d';\n\nconst domainCert = certificatemanager.Certificate.fromCertificateArn(this, 'domainCert', certificateArn);\npool.addDomain('CustomDomain', {\n  customDomain: {\n    domainName: 'user.myapp.com',\n    certificate: domainCert,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.CustomDomainOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-certificatemanager.Certificate",
        "@aws-cdk/aws-certificatemanager.Certificate#fromCertificateArn",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-cognito.CognitoDomainOptions",
        "@aws-cdk/aws-cognito.CustomDomainOptions",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolDomainOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'Pool');\n\npool.addDomain('CognitoDomain', {\n  cognitoDomain: {\n    domainPrefix: 'my-awesome-app',\n  },\n});\n\nconst certificateArn = 'arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d';\n\nconst domainCert = certificatemanager.Certificate.fromCertificateArn(this, 'domainCert', certificateArn);\npool.addDomain('CustomDomain', {\n  customDomain: {\n    domainName: 'user.myapp.com',\n    certificate: domainCert,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 19,
        "104": 2,
        "193": 4,
        "194": 5,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 5
      },
      "fqnsFingerprint": "08f518e6c611908d19222ec462d8450805480858d3ecd0c1e12cb87d5c22964d"
    },
    "019931aae2bac8aa5985b122c6a41444498fd7f92308a51163f463c26b50ba37": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    standard_attributes=cognito.StandardAttributes(\n        fullname=cognito.StandardAttribute(\n            required=True,\n            mutable=False\n        ),\n        address=cognito.StandardAttribute(\n            required=False,\n            mutable=True\n        )\n    ),\n    custom_attributes={\n        \"myappid\": cognito.StringAttribute(min_len=5, max_len=15, mutable=False),\n        \"callingcode\": cognito.NumberAttribute(min=1, max=3, mutable=True),\n        \"is_employee\": cognito.BooleanAttribute(mutable=True),\n        \"joined_on\": cognito.DateTimeAttribute()\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    StandardAttributes = new StandardAttributes {\n        Fullname = new StandardAttribute {\n            Required = true,\n            Mutable = false\n        },\n        Address = new StandardAttribute {\n            Required = false,\n            Mutable = true\n        }\n    },\n    CustomAttributes = new Dictionary<string, ICustomAttribute> {\n        { \"myappid\", new StringAttribute(new StringAttributeProps { MinLen = 5, MaxLen = 15, Mutable = false }) },\n        { \"callingcode\", new NumberAttribute(new NumberAttributeProps { Min = 1, Max = 3, Mutable = true }) },\n        { \"isEmployee\", new BooleanAttribute(new CustomAttributeProps { Mutable = true }) },\n        { \"joinedOn\", new DateTimeAttribute() }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .standardAttributes(StandardAttributes.builder()\n                .fullname(StandardAttribute.builder()\n                        .required(true)\n                        .mutable(false)\n                        .build())\n                .address(StandardAttribute.builder()\n                        .required(false)\n                        .mutable(true)\n                        .build())\n                .build())\n        .customAttributes(Map.of(\n                \"myappid\", StringAttribute.Builder.create().minLen(5).maxLen(15).mutable(false).build(),\n                \"callingcode\", NumberAttribute.Builder.create().min(1).max(3).mutable(true).build(),\n                \"isEmployee\", BooleanAttribute.Builder.create().mutable(true).build(),\n                \"joinedOn\", new DateTimeAttribute()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  standardAttributes: {\n    fullname: {\n      required: true,\n      mutable: false,\n    },\n    address: {\n      required: false,\n      mutable: true,\n    },\n  },\n  customAttributes: {\n    'myappid': new cognito.StringAttribute({ minLen: 5, maxLen: 15, mutable: false }),\n    'callingcode': new cognito.NumberAttribute({ min: 1, max: 3, mutable: true }),\n    'isEmployee': new cognito.BooleanAttribute({ mutable: true }),\n    'joinedOn': new cognito.DateTimeAttribute(),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.DateTimeAttribute"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.BooleanAttribute",
        "@aws-cdk/aws-cognito.CustomAttributeProps",
        "@aws-cdk/aws-cognito.DateTimeAttribute",
        "@aws-cdk/aws-cognito.ICustomAttribute",
        "@aws-cdk/aws-cognito.NumberAttribute",
        "@aws-cdk/aws-cognito.NumberAttributeProps",
        "@aws-cdk/aws-cognito.StandardAttribute",
        "@aws-cdk/aws-cognito.StandardAttributes",
        "@aws-cdk/aws-cognito.StringAttribute",
        "@aws-cdk/aws-cognito.StringAttributeProps",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  standardAttributes: {\n    fullname: {\n      required: true,\n      mutable: false,\n    },\n    address: {\n      required: false,\n      mutable: true,\n    },\n  },\n  customAttributes: {\n    'myappid': new cognito.StringAttribute({ minLen: 5, maxLen: 15, mutable: false }),\n    'callingcode': new cognito.NumberAttribute({ min: 1, max: 3, mutable: true }),\n    'isEmployee': new cognito.BooleanAttribute({ mutable: true }),\n    'joinedOn': new cognito.DateTimeAttribute(),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 5,
        "75": 25,
        "91": 3,
        "104": 1,
        "106": 4,
        "193": 8,
        "194": 5,
        "197": 5,
        "226": 1,
        "281": 19
      },
      "fqnsFingerprint": "c68147e1bcefec12a021aece4881899e8960f7d1bfcb6288bfd954b94687e375"
    },
    "8304d734b31de6c1f5964d64d420fd0a6a47b0ad3a5ba37a9ef744d6e35f68a5": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    device_tracking=cognito.DeviceTracking(\n        challenge_required_on_new_device=True,\n        device_only_remembered_on_user_prompt=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    DeviceTracking = new DeviceTracking {\n        ChallengeRequiredOnNewDevice = true,\n        DeviceOnlyRememberedOnUserPrompt = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .deviceTracking(DeviceTracking.builder()\n                .challengeRequiredOnNewDevice(true)\n                .deviceOnlyRememberedOnUserPrompt(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  deviceTracking: {\n    challengeRequiredOnNewDevice: true,\n    deviceOnlyRememberedOnUserPrompt: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.DeviceTracking"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.DeviceTracking",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  deviceTracking: {\n    challengeRequiredOnNewDevice: true,\n    deviceOnlyRememberedOnUserPrompt: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "104": 1,
        "106": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "5b509e976c681a81528bcf55e7dc359e4b6ea3ce73647a5d5432804d2140febd"
    },
    "fdd3103ad9540e79dec10f5e3c53b50c5c32f2cfbbb10a1b58c72396caf84e83": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    mfa=cognito.Mfa.REQUIRED,\n    mfa_second_factor=cognito.MfaSecondFactor(\n        sms=True,\n        otp=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    Mfa = Mfa.REQUIRED,\n    MfaSecondFactor = new MfaSecondFactor {\n        Sms = true,\n        Otp = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .mfa(Mfa.REQUIRED)\n        .mfaSecondFactor(MfaSecondFactor.builder()\n                .sms(true)\n                .otp(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  mfa: cognito.Mfa.REQUIRED,\n  mfaSecondFactor: {\n    sms: true,\n    otp: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.Mfa"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.Mfa",
        "@aws-cdk/aws-cognito.Mfa#REQUIRED",
        "@aws-cdk/aws-cognito.MfaSecondFactor",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  mfa: cognito.Mfa.REQUIRED,\n  mfaSecondFactor: {\n    sms: true,\n    otp: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "104": 1,
        "106": 2,
        "193": 2,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "fa3e67f69607a1e3baab59fb5d4eb874e0f313cda89dd911a76ae91ed3f9235c"
    },
    "2b78e91ee991e8263c3aab36e1c855b744a6c57542adf25931fde028d62c5850": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    mfa=cognito.Mfa.REQUIRED,\n    mfa_second_factor=cognito.MfaSecondFactor(\n        sms=True,\n        otp=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    Mfa = Mfa.REQUIRED,\n    MfaSecondFactor = new MfaSecondFactor {\n        Sms = true,\n        Otp = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .mfa(Mfa.REQUIRED)\n        .mfaSecondFactor(MfaSecondFactor.builder()\n                .sms(true)\n                .otp(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  mfa: cognito.Mfa.REQUIRED,\n  mfaSecondFactor: {\n    sms: true,\n    otp: true,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.MfaSecondFactor"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.Mfa",
        "@aws-cdk/aws-cognito.Mfa#REQUIRED",
        "@aws-cdk/aws-cognito.MfaSecondFactor",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  mfa: cognito.Mfa.REQUIRED,\n  mfaSecondFactor: {\n    sms: true,\n    otp: true,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 9,
        "104": 1,
        "106": 2,
        "193": 2,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "fa3e67f69607a1e3baab59fb5d4eb874e0f313cda89dd911a76ae91ed3f9235c"
    },
    "6095a15641c15d3f4cada2c8f3f85cc2f22c010bab041786121d0ea63c1963b1": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    standard_attributes=cognito.StandardAttributes(\n        fullname=cognito.StandardAttribute(\n            required=True,\n            mutable=False\n        ),\n        address=cognito.StandardAttribute(\n            required=False,\n            mutable=True\n        )\n    ),\n    custom_attributes={\n        \"myappid\": cognito.StringAttribute(min_len=5, max_len=15, mutable=False),\n        \"callingcode\": cognito.NumberAttribute(min=1, max=3, mutable=True),\n        \"is_employee\": cognito.BooleanAttribute(mutable=True),\n        \"joined_on\": cognito.DateTimeAttribute()\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    StandardAttributes = new StandardAttributes {\n        Fullname = new StandardAttribute {\n            Required = true,\n            Mutable = false\n        },\n        Address = new StandardAttribute {\n            Required = false,\n            Mutable = true\n        }\n    },\n    CustomAttributes = new Dictionary<string, ICustomAttribute> {\n        { \"myappid\", new StringAttribute(new StringAttributeProps { MinLen = 5, MaxLen = 15, Mutable = false }) },\n        { \"callingcode\", new NumberAttribute(new NumberAttributeProps { Min = 1, Max = 3, Mutable = true }) },\n        { \"isEmployee\", new BooleanAttribute(new CustomAttributeProps { Mutable = true }) },\n        { \"joinedOn\", new DateTimeAttribute() }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .standardAttributes(StandardAttributes.builder()\n                .fullname(StandardAttribute.builder()\n                        .required(true)\n                        .mutable(false)\n                        .build())\n                .address(StandardAttribute.builder()\n                        .required(false)\n                        .mutable(true)\n                        .build())\n                .build())\n        .customAttributes(Map.of(\n                \"myappid\", StringAttribute.Builder.create().minLen(5).maxLen(15).mutable(false).build(),\n                \"callingcode\", NumberAttribute.Builder.create().min(1).max(3).mutable(true).build(),\n                \"isEmployee\", BooleanAttribute.Builder.create().mutable(true).build(),\n                \"joinedOn\", new DateTimeAttribute()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  standardAttributes: {\n    fullname: {\n      required: true,\n      mutable: false,\n    },\n    address: {\n      required: false,\n      mutable: true,\n    },\n  },\n  customAttributes: {\n    'myappid': new cognito.StringAttribute({ minLen: 5, maxLen: 15, mutable: false }),\n    'callingcode': new cognito.NumberAttribute({ min: 1, max: 3, mutable: true }),\n    'isEmployee': new cognito.BooleanAttribute({ mutable: true }),\n    'joinedOn': new cognito.DateTimeAttribute(),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.NumberAttribute"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.BooleanAttribute",
        "@aws-cdk/aws-cognito.CustomAttributeProps",
        "@aws-cdk/aws-cognito.DateTimeAttribute",
        "@aws-cdk/aws-cognito.ICustomAttribute",
        "@aws-cdk/aws-cognito.NumberAttribute",
        "@aws-cdk/aws-cognito.NumberAttributeProps",
        "@aws-cdk/aws-cognito.StandardAttribute",
        "@aws-cdk/aws-cognito.StandardAttributes",
        "@aws-cdk/aws-cognito.StringAttribute",
        "@aws-cdk/aws-cognito.StringAttributeProps",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  standardAttributes: {\n    fullname: {\n      required: true,\n      mutable: false,\n    },\n    address: {\n      required: false,\n      mutable: true,\n    },\n  },\n  customAttributes: {\n    'myappid': new cognito.StringAttribute({ minLen: 5, maxLen: 15, mutable: false }),\n    'callingcode': new cognito.NumberAttribute({ min: 1, max: 3, mutable: true }),\n    'isEmployee': new cognito.BooleanAttribute({ mutable: true }),\n    'joinedOn': new cognito.DateTimeAttribute(),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 5,
        "75": 25,
        "91": 3,
        "104": 1,
        "106": 4,
        "193": 8,
        "194": 5,
        "197": 5,
        "226": 1,
        "281": 19
      },
      "fqnsFingerprint": "c68147e1bcefec12a021aece4881899e8960f7d1bfcb6288bfd954b94687e375"
    },
    "25fb102ad31d31ff34ccd8340615550617b7e51cb5f04f78871855ee5cda08e4": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    standard_attributes=cognito.StandardAttributes(\n        fullname=cognito.StandardAttribute(\n            required=True,\n            mutable=False\n        ),\n        address=cognito.StandardAttribute(\n            required=False,\n            mutable=True\n        )\n    ),\n    custom_attributes={\n        \"myappid\": cognito.StringAttribute(min_len=5, max_len=15, mutable=False),\n        \"callingcode\": cognito.NumberAttribute(min=1, max=3, mutable=True),\n        \"is_employee\": cognito.BooleanAttribute(mutable=True),\n        \"joined_on\": cognito.DateTimeAttribute()\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    StandardAttributes = new StandardAttributes {\n        Fullname = new StandardAttribute {\n            Required = true,\n            Mutable = false\n        },\n        Address = new StandardAttribute {\n            Required = false,\n            Mutable = true\n        }\n    },\n    CustomAttributes = new Dictionary<string, ICustomAttribute> {\n        { \"myappid\", new StringAttribute(new StringAttributeProps { MinLen = 5, MaxLen = 15, Mutable = false }) },\n        { \"callingcode\", new NumberAttribute(new NumberAttributeProps { Min = 1, Max = 3, Mutable = true }) },\n        { \"isEmployee\", new BooleanAttribute(new CustomAttributeProps { Mutable = true }) },\n        { \"joinedOn\", new DateTimeAttribute() }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .standardAttributes(StandardAttributes.builder()\n                .fullname(StandardAttribute.builder()\n                        .required(true)\n                        .mutable(false)\n                        .build())\n                .address(StandardAttribute.builder()\n                        .required(false)\n                        .mutable(true)\n                        .build())\n                .build())\n        .customAttributes(Map.of(\n                \"myappid\", StringAttribute.Builder.create().minLen(5).maxLen(15).mutable(false).build(),\n                \"callingcode\", NumberAttribute.Builder.create().min(1).max(3).mutable(true).build(),\n                \"isEmployee\", BooleanAttribute.Builder.create().mutable(true).build(),\n                \"joinedOn\", new DateTimeAttribute()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  standardAttributes: {\n    fullname: {\n      required: true,\n      mutable: false,\n    },\n    address: {\n      required: false,\n      mutable: true,\n    },\n  },\n  customAttributes: {\n    'myappid': new cognito.StringAttribute({ minLen: 5, maxLen: 15, mutable: false }),\n    'callingcode': new cognito.NumberAttribute({ min: 1, max: 3, mutable: true }),\n    'isEmployee': new cognito.BooleanAttribute({ mutable: true }),\n    'joinedOn': new cognito.DateTimeAttribute(),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.NumberAttributeProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.BooleanAttribute",
        "@aws-cdk/aws-cognito.CustomAttributeProps",
        "@aws-cdk/aws-cognito.DateTimeAttribute",
        "@aws-cdk/aws-cognito.ICustomAttribute",
        "@aws-cdk/aws-cognito.NumberAttribute",
        "@aws-cdk/aws-cognito.NumberAttributeProps",
        "@aws-cdk/aws-cognito.StandardAttribute",
        "@aws-cdk/aws-cognito.StandardAttributes",
        "@aws-cdk/aws-cognito.StringAttribute",
        "@aws-cdk/aws-cognito.StringAttributeProps",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  standardAttributes: {\n    fullname: {\n      required: true,\n      mutable: false,\n    },\n    address: {\n      required: false,\n      mutable: true,\n    },\n  },\n  customAttributes: {\n    'myappid': new cognito.StringAttribute({ minLen: 5, maxLen: 15, mutable: false }),\n    'callingcode': new cognito.NumberAttribute({ min: 1, max: 3, mutable: true }),\n    'isEmployee': new cognito.BooleanAttribute({ mutable: true }),\n    'joinedOn': new cognito.DateTimeAttribute(),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 5,
        "75": 25,
        "91": 3,
        "104": 1,
        "106": 4,
        "193": 8,
        "194": 5,
        "197": 5,
        "226": 1,
        "281": 19
      },
      "fqnsFingerprint": "c68147e1bcefec12a021aece4881899e8960f7d1bfcb6288bfd954b94687e375"
    },
    "f697b88ba03b638f222955dd63e16c313bca8c62bca504a4422b0de305f65d76": {
      "translations": {
        "python": {
          "source": "userpool = cognito.UserPool(self, \"UserPool\")\nclient = userpool.add_client(\"Client\",\n    # ...\n    o_auth=cognito.OAuthSettings(\n        flows=cognito.OAuthFlows(\n            implicit_code_grant=True\n        ),\n        callback_urls=[\"https://myapp.com/home\", \"https://myapp.com/users\"\n        ]\n    )\n)\ndomain = userpool.add_domain(\"Domain\")\nsign_in_url = domain.sign_in_url(client,\n    redirect_uri=\"https://myapp.com/home\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool userpool = new UserPool(this, \"UserPool\", new UserPoolProps { });\nUserPoolClient client = userpool.AddClient(\"Client\", new UserPoolClientOptions {\n    // ...\n    OAuth = new OAuthSettings {\n        Flows = new OAuthFlows {\n            ImplicitCodeGrant = true\n        },\n        CallbackUrls = new [] { \"https://myapp.com/home\", \"https://myapp.com/users\" }\n    }\n});\nUserPoolDomain domain = userpool.AddDomain(\"Domain\", new UserPoolDomainOptions { });\nstring signInUrl = domain.SignInUrl(client, new SignInUrlOptions {\n    RedirectUri = \"https://myapp.com/home\"\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool userpool = UserPool.Builder.create(this, \"UserPool\").build();\nUserPoolClient client = userpool.addClient(\"Client\", UserPoolClientOptions.builder()\n        // ...\n        .oAuth(OAuthSettings.builder()\n                .flows(OAuthFlows.builder()\n                        .implicitCodeGrant(true)\n                        .build())\n                .callbackUrls(List.of(\"https://myapp.com/home\", \"https://myapp.com/users\"))\n                .build())\n        .build());\nUserPoolDomain domain = userpool.addDomain(\"Domain\", UserPoolDomainOptions.builder().build());\nString signInUrl = domain.signInUrl(client, SignInUrlOptions.builder()\n        .redirectUri(\"https://myapp.com/home\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const userpool = new cognito.UserPool(this, 'UserPool', {\n  // ...\n});\nconst client = userpool.addClient('Client', {\n  // ...\n  oAuth: {\n    flows: {\n      implicitCodeGrant: true,\n    },\n    callbackUrls: [\n      'https://myapp.com/home',\n      'https://myapp.com/users',\n    ]\n  }\n})\nconst domain = userpool.addDomain('Domain', {\n  // ...\n});\nconst signInUrl = domain.signInUrl(client, {\n  redirectUri: 'https://myapp.com/home', // must be a URL configured under 'callbackUrls' with the client\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.OAuthFlows"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.OAuthFlows",
        "@aws-cdk/aws-cognito.OAuthSettings",
        "@aws-cdk/aws-cognito.SignInUrlOptions",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClient",
        "@aws-cdk/aws-cognito.UserPoolClientOptions",
        "@aws-cdk/aws-cognito.UserPoolDomain",
        "@aws-cdk/aws-cognito.UserPoolDomain#signInUrl",
        "@aws-cdk/aws-cognito.UserPoolDomainOptions",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst userpool = new cognito.UserPool(this, 'UserPool', {\n  // ...\n});\nconst client = userpool.addClient('Client', {\n  // ...\n  oAuth: {\n    flows: {\n      implicitCodeGrant: true,\n    },\n    callbackUrls: [\n      'https://myapp.com/home',\n      'https://myapp.com/users',\n    ]\n  }\n})\nconst domain = userpool.addDomain('Domain', {\n  // ...\n});\nconst signInUrl = domain.signInUrl(client, {\n  redirectUri: 'https://myapp.com/home', // must be a URL configured under 'callbackUrls' with the client\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 18,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 6,
        "194": 4,
        "196": 3,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 5
      },
      "fqnsFingerprint": "a28a2564e65c2cff60431cbe161f94cd13a43ac6b97268bd6af6eb4c68296dd2"
    },
    "aab96ea8457f94b1d3d5ee186ced3e9d1be3fa7ef8c51043fc9e5df69eb675f0": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"Pool\")\npool.add_client(\"app-client\",\n    o_auth=cognito.OAuthSettings(\n        flows=cognito.OAuthFlows(\n            authorization_code_grant=True\n        ),\n        scopes=[cognito.OAuthScope.OPENID],\n        callback_urls=[\"https://my-app-domain.com/welcome\"],\n        logout_urls=[\"https://my-app-domain.com/signin\"]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\npool.AddClient(\"app-client\", new UserPoolClientOptions {\n    OAuth = new OAuthSettings {\n        Flows = new OAuthFlows {\n            AuthorizationCodeGrant = true\n        },\n        Scopes = new [] { OAuthScope.OPENID },\n        CallbackUrls = new [] { \"https://my-app-domain.com/welcome\" },\n        LogoutUrls = new [] { \"https://my-app-domain.com/signin\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\npool.addClient(\"app-client\", UserPoolClientOptions.builder()\n        .oAuth(OAuthSettings.builder()\n                .flows(OAuthFlows.builder()\n                        .authorizationCodeGrant(true)\n                        .build())\n                .scopes(List.of(OAuthScope.OPENID))\n                .callbackUrls(List.of(\"https://my-app-domain.com/welcome\"))\n                .logoutUrls(List.of(\"https://my-app-domain.com/signin\"))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'Pool');\npool.addClient('app-client', {\n  oAuth: {\n    flows: {\n      authorizationCodeGrant: true,\n    },\n    scopes: [ cognito.OAuthScope.OPENID ],\n    callbackUrls: [ 'https://my-app-domain.com/welcome' ],\n    logoutUrls: [ 'https://my-app-domain.com/signin' ],\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.OAuthScope"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.OAuthFlows",
        "@aws-cdk/aws-cognito.OAuthScope",
        "@aws-cdk/aws-cognito.OAuthScope#OPENID",
        "@aws-cdk/aws-cognito.OAuthSettings",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClientOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'Pool');\npool.addClient('app-client', {\n  oAuth: {\n    flows: {\n      authorizationCodeGrant: true,\n    },\n    scopes: [ cognito.OAuthScope.OPENID ],\n    callbackUrls: [ 'https://my-app-domain.com/welcome' ],\n    logoutUrls: [ 'https://my-app-domain.com/signin' ],\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 14,
        "104": 1,
        "106": 1,
        "192": 3,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "a23e8fe6ebe9b47d29ec72105693d6153dec063898f8acce687bda66334612ec"
    },
    "890fe5cf9fcfa160929287cda35ac94e57e016db944d94fcc812f39884c6dcc9": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"Pool\")\n\nread_only_scope = ResourceServerScope(scope_name=\"read\", scope_description=\"Read-only access\")\nfull_access_scope = ResourceServerScope(scope_name=\"*\", scope_description=\"Full access\")\n\nuser_server = pool.add_resource_server(\"ResourceServer\",\n    identifier=\"users\",\n    scopes=[read_only_scope, full_access_scope]\n)\n\nread_only_client = pool.add_client(\"read-only-client\",\n    # ...\n    o_auth=cognito.OAuthSettings(\n        # ...\n        scopes=[OAuthScope.resource_server(user_server, read_only_scope)]\n    )\n)\n\nfull_access_client = pool.add_client(\"full-access-client\",\n    # ...\n    o_auth=cognito.OAuthSettings(\n        # ...\n        scopes=[OAuthScope.resource_server(user_server, full_access_scope)]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\nvar readOnlyScope = new ResourceServerScope(new Struct { ScopeName = \"read\", ScopeDescription = \"Read-only access\" });\nvar fullAccessScope = new ResourceServerScope(new Struct { ScopeName = \"*\", ScopeDescription = \"Full access\" });\n\nUserPoolResourceServer userServer = pool.AddResourceServer(\"ResourceServer\", new UserPoolResourceServerOptions {\n    Identifier = \"users\",\n    Scopes = new [] { readOnlyScope, fullAccessScope }\n});\n\nUserPoolClient readOnlyClient = pool.AddClient(\"read-only-client\", new UserPoolClientOptions {\n    // ...\n    OAuth = new OAuthSettings {\n        // ...\n        Scopes = new [] { OAuthScope.ResourceServer(userServer, readOnlyScope) }\n    }\n});\n\nUserPoolClient fullAccessClient = pool.AddClient(\"full-access-client\", new UserPoolClientOptions {\n    // ...\n    OAuth = new OAuthSettings {\n        // ...\n        Scopes = new [] { OAuthScope.ResourceServer(userServer, fullAccessScope) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\nObject readOnlyScope = ResourceServerScope.Builder.create().scopeName(\"read\").scopeDescription(\"Read-only access\").build();\nObject fullAccessScope = ResourceServerScope.Builder.create().scopeName(\"*\").scopeDescription(\"Full access\").build();\n\nUserPoolResourceServer userServer = pool.addResourceServer(\"ResourceServer\", UserPoolResourceServerOptions.builder()\n        .identifier(\"users\")\n        .scopes(List.of(readOnlyScope, fullAccessScope))\n        .build());\n\nUserPoolClient readOnlyClient = pool.addClient(\"read-only-client\", UserPoolClientOptions.builder()\n        // ...\n        .oAuth(OAuthSettings.builder()\n                // ...\n                .scopes(List.of(OAuthScope.resourceServer(userServer, readOnlyScope)))\n                .build())\n        .build());\n\nUserPoolClient fullAccessClient = pool.addClient(\"full-access-client\", UserPoolClientOptions.builder()\n        // ...\n        .oAuth(OAuthSettings.builder()\n                // ...\n                .scopes(List.of(OAuthScope.resourceServer(userServer, fullAccessScope)))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'Pool');\n\nconst readOnlyScope = new ResourceServerScope({ scopeName: 'read', scopeDescription: 'Read-only access' });\nconst fullAccessScope = new ResourceServerScope({ scopeName: '*', scopeDescription: 'Full access' });\n\nconst userServer = pool.addResourceServer('ResourceServer', {\n  identifier: 'users',\n  scopes: [ readOnlyScope, fullAccessScope ],\n});\n\nconst readOnlyClient = pool.addClient('read-only-client', {\n  // ...\n  oAuth: {\n    // ...\n    scopes: [ OAuthScope.resourceServer(userServer, readOnlyScope) ],\n  },\n});\n\nconst fullAccessClient = pool.addClient('full-access-client', {\n  // ...\n  oAuth: {\n    // ...\n    scopes: [ OAuthScope.resourceServer(userServer, fullAccessScope) ],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.OAuthSettings"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.OAuthSettings",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClient",
        "@aws-cdk/aws-cognito.UserPoolClientOptions",
        "@aws-cdk/aws-cognito.UserPoolResourceServer",
        "@aws-cdk/aws-cognito.UserPoolResourceServerOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'Pool');\n\nconst readOnlyScope = new ResourceServerScope({ scopeName: 'read', scopeDescription: 'Read-only access' });\nconst fullAccessScope = new ResourceServerScope({ scopeName: '*', scopeDescription: 'Full access' });\n\nconst userServer = pool.addResourceServer('ResourceServer', {\n  identifier: 'users',\n  scopes: [ readOnlyScope, fullAccessScope ],\n});\n\nconst readOnlyClient = pool.addClient('read-only-client', {\n  // ...\n  oAuth: {\n    // ...\n    scopes: [ OAuthScope.resourceServer(userServer, readOnlyScope) ],\n  },\n});\n\nconst fullAccessClient = pool.addClient('full-access-client', {\n  // ...\n  oAuth: {\n    // ...\n    scopes: [ OAuthScope.resourceServer(userServer, fullAccessScope) ],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 36,
        "104": 1,
        "192": 3,
        "193": 7,
        "194": 6,
        "196": 5,
        "197": 3,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 10
      },
      "fqnsFingerprint": "ea4eb9f671ed2aa123740c93223fe9da05e4694a0acd4dbfe0d3ebd5876c63d9"
    },
    "3ee493f06a67dfb23199b0748c7c6f96cc4f04efbe935e071913c1f131ff93e7": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    password_policy=cognito.PasswordPolicy(\n        min_length=12,\n        require_lowercase=True,\n        require_uppercase=True,\n        require_digits=True,\n        require_symbols=True,\n        temp_password_validity=Duration.days(3)\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    PasswordPolicy = new PasswordPolicy {\n        MinLength = 12,\n        RequireLowercase = true,\n        RequireUppercase = true,\n        RequireDigits = true,\n        RequireSymbols = true,\n        TempPasswordValidity = Duration.Days(3)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .passwordPolicy(PasswordPolicy.builder()\n                .minLength(12)\n                .requireLowercase(true)\n                .requireUppercase(true)\n                .requireDigits(true)\n                .requireSymbols(true)\n                .tempPasswordValidity(Duration.days(3))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  passwordPolicy: {\n    minLength: 12,\n    requireLowercase: true,\n    requireUppercase: true,\n    requireDigits: true,\n    requireSymbols: true,\n    tempPasswordValidity: Duration.days(3),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.PasswordPolicy"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.PasswordPolicy",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  passwordPolicy: {\n    minLength: 12,\n    requireLowercase: true,\n    requireUppercase: true,\n    requireDigits: true,\n    requireSymbols: true,\n    tempPasswordValidity: Duration.days(3),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 1,
        "75": 11,
        "104": 1,
        "106": 4,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 7
      },
      "fqnsFingerprint": "63b62bff7a37c61bc5cb6d8b770aeb0b5c7eac5bf443a18a2ac5ee59260e60c7"
    },
    "5f169899de5306a2234ce1ac99a84b8af86de41820fc37776b6b9899f7c2bf63": {
      "translations": {
        "python": {
          "source": "userpool = cognito.UserPool(self, \"Pool\")\n\ncognito.UserPoolIdentityProviderAmazon(self, \"Amazon\",\n    client_id=\"amzn-client-id\",\n    client_secret=\"amzn-client-secret\",\n    user_pool=userpool,\n    attribute_mapping=cognito.AttributeMapping(\n        email=cognito.ProviderAttribute.AMAZON_EMAIL,\n        website=cognito.ProviderAttribute.other(\"url\"),  # use other() when an attribute is not pre-defined in the CDK\n        custom={\n            # custom user pool attributes go here\n            \"unique_id\": cognito.ProviderAttribute.AMAZON_USER_ID\n        }\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool userpool = new UserPool(this, \"Pool\");\n\nnew UserPoolIdentityProviderAmazon(this, \"Amazon\", new UserPoolIdentityProviderAmazonProps {\n    ClientId = \"amzn-client-id\",\n    ClientSecret = \"amzn-client-secret\",\n    UserPool = userpool,\n    AttributeMapping = new AttributeMapping {\n        Email = ProviderAttribute.AMAZON_EMAIL,\n        Website = ProviderAttribute.Other(\"url\"),  // use other() when an attribute is not pre-defined in the CDK\n        Custom = new Dictionary<string, ProviderAttribute> {\n            // custom user pool attributes go here\n            { \"uniqueId\", ProviderAttribute.AMAZON_USER_ID }\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool userpool = new UserPool(this, \"Pool\");\n\nUserPoolIdentityProviderAmazon.Builder.create(this, \"Amazon\")\n        .clientId(\"amzn-client-id\")\n        .clientSecret(\"amzn-client-secret\")\n        .userPool(userpool)\n        .attributeMapping(AttributeMapping.builder()\n                .email(ProviderAttribute.AMAZON_EMAIL)\n                .website(ProviderAttribute.other(\"url\")) // use other() when an attribute is not pre-defined in the CDK\n                .custom(Map.of(\n                        // custom user pool attributes go here\n                        \"uniqueId\", ProviderAttribute.AMAZON_USER_ID))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const userpool = new cognito.UserPool(this, 'Pool');\n\nnew cognito.UserPoolIdentityProviderAmazon(this, 'Amazon', {\n  clientId: 'amzn-client-id',\n  clientSecret: 'amzn-client-secret',\n  userPool: userpool,\n  attributeMapping: {\n    email: cognito.ProviderAttribute.AMAZON_EMAIL,\n    website: cognito.ProviderAttribute.other('url'), // use other() when an attribute is not pre-defined in the CDK\n    custom: {\n      // custom user pool attributes go here\n      uniqueId: cognito.ProviderAttribute.AMAZON_USER_ID,\n    }\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.ProviderAttribute"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.AttributeMapping",
        "@aws-cdk/aws-cognito.IUserPool",
        "@aws-cdk/aws-cognito.ProviderAttribute",
        "@aws-cdk/aws-cognito.ProviderAttribute#AMAZON_EMAIL",
        "@aws-cdk/aws-cognito.ProviderAttribute#AMAZON_USER_ID",
        "@aws-cdk/aws-cognito.ProviderAttribute#other",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolIdentityProviderAmazon",
        "@aws-cdk/aws-cognito.UserPoolIdentityProviderAmazonProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst userpool = new cognito.UserPool(this, 'Pool');\n\nnew cognito.UserPoolIdentityProviderAmazon(this, 'Amazon', {\n  clientId: 'amzn-client-id',\n  clientSecret: 'amzn-client-secret',\n  userPool: userpool,\n  attributeMapping: {\n    email: cognito.ProviderAttribute.AMAZON_EMAIL,\n    website: cognito.ProviderAttribute.other('url'), // use other() when an attribute is not pre-defined in the CDK\n    custom: {\n      // custom user pool attributes go here\n      uniqueId: cognito.ProviderAttribute.AMAZON_USER_ID,\n    }\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 23,
        "104": 2,
        "193": 3,
        "194": 8,
        "196": 1,
        "197": 2,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 8
      },
      "fqnsFingerprint": "89c9a9f330c8b6a2da8f25e59ffaef3da0c69c64f07f9818a447c72e909e333b"
    },
    "ea49b106f2aa4d51ce16e2646476566e74745a0ce68fe3feba30e9a88e64c452": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    # ...\n    sign_in_aliases=cognito.SignInAliases(\n        username=True,\n        email=True\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    // ...\n    SignInAliases = new SignInAliases {\n        Username = true,\n        Email = true\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        // ...\n        .signInAliases(SignInAliases.builder()\n                .username(true)\n                .email(true)\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  // ...\n  signInAliases: {\n    username: true,\n    email: true\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.SignInAliases"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.SignInAliases",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  // ...\n  signInAliases: {\n    username: true,\n    email: true\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "104": 1,
        "106": 2,
        "193": 2,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "23e1c6f4cf6e558d4b85351ebf3e827127548c09551f79b054256bb3c097b3cc"
    },
    "157ee4166722611a5b67f7b3c2a67066aa15b78e6930bffddc4cb5472a095a9f": {
      "translations": {
        "python": {
          "source": "userpool = cognito.UserPool(self, \"UserPool\")\nclient = userpool.add_client(\"Client\",\n    # ...\n    o_auth=cognito.OAuthSettings(\n        flows=cognito.OAuthFlows(\n            implicit_code_grant=True\n        ),\n        callback_urls=[\"https://myapp.com/home\", \"https://myapp.com/users\"\n        ]\n    )\n)\ndomain = userpool.add_domain(\"Domain\")\nsign_in_url = domain.sign_in_url(client,\n    redirect_uri=\"https://myapp.com/home\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool userpool = new UserPool(this, \"UserPool\", new UserPoolProps { });\nUserPoolClient client = userpool.AddClient(\"Client\", new UserPoolClientOptions {\n    // ...\n    OAuth = new OAuthSettings {\n        Flows = new OAuthFlows {\n            ImplicitCodeGrant = true\n        },\n        CallbackUrls = new [] { \"https://myapp.com/home\", \"https://myapp.com/users\" }\n    }\n});\nUserPoolDomain domain = userpool.AddDomain(\"Domain\", new UserPoolDomainOptions { });\nstring signInUrl = domain.SignInUrl(client, new SignInUrlOptions {\n    RedirectUri = \"https://myapp.com/home\"\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool userpool = UserPool.Builder.create(this, \"UserPool\").build();\nUserPoolClient client = userpool.addClient(\"Client\", UserPoolClientOptions.builder()\n        // ...\n        .oAuth(OAuthSettings.builder()\n                .flows(OAuthFlows.builder()\n                        .implicitCodeGrant(true)\n                        .build())\n                .callbackUrls(List.of(\"https://myapp.com/home\", \"https://myapp.com/users\"))\n                .build())\n        .build());\nUserPoolDomain domain = userpool.addDomain(\"Domain\", UserPoolDomainOptions.builder().build());\nString signInUrl = domain.signInUrl(client, SignInUrlOptions.builder()\n        .redirectUri(\"https://myapp.com/home\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const userpool = new cognito.UserPool(this, 'UserPool', {\n  // ...\n});\nconst client = userpool.addClient('Client', {\n  // ...\n  oAuth: {\n    flows: {\n      implicitCodeGrant: true,\n    },\n    callbackUrls: [\n      'https://myapp.com/home',\n      'https://myapp.com/users',\n    ]\n  }\n})\nconst domain = userpool.addDomain('Domain', {\n  // ...\n});\nconst signInUrl = domain.signInUrl(client, {\n  redirectUri: 'https://myapp.com/home', // must be a URL configured under 'callbackUrls' with the client\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.SignInUrlOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.OAuthFlows",
        "@aws-cdk/aws-cognito.OAuthSettings",
        "@aws-cdk/aws-cognito.SignInUrlOptions",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClient",
        "@aws-cdk/aws-cognito.UserPoolClientOptions",
        "@aws-cdk/aws-cognito.UserPoolDomain",
        "@aws-cdk/aws-cognito.UserPoolDomain#signInUrl",
        "@aws-cdk/aws-cognito.UserPoolDomainOptions",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst userpool = new cognito.UserPool(this, 'UserPool', {\n  // ...\n});\nconst client = userpool.addClient('Client', {\n  // ...\n  oAuth: {\n    flows: {\n      implicitCodeGrant: true,\n    },\n    callbackUrls: [\n      'https://myapp.com/home',\n      'https://myapp.com/users',\n    ]\n  }\n})\nconst domain = userpool.addDomain('Domain', {\n  // ...\n});\nconst signInUrl = domain.signInUrl(client, {\n  redirectUri: 'https://myapp.com/home', // must be a URL configured under 'callbackUrls' with the client\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 18,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 6,
        "194": 4,
        "196": 3,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 5
      },
      "fqnsFingerprint": "a28a2564e65c2cff60431cbe161f94cd13a43ac6b97268bd6af6eb4c68296dd2"
    },
    "dbb75d0532f5b87c77d650b42745cfb1a962db555da4542241e848d808221815": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    standard_attributes=cognito.StandardAttributes(\n        fullname=cognito.StandardAttribute(\n            required=True,\n            mutable=False\n        ),\n        address=cognito.StandardAttribute(\n            required=False,\n            mutable=True\n        )\n    ),\n    custom_attributes={\n        \"myappid\": cognito.StringAttribute(min_len=5, max_len=15, mutable=False),\n        \"callingcode\": cognito.NumberAttribute(min=1, max=3, mutable=True),\n        \"is_employee\": cognito.BooleanAttribute(mutable=True),\n        \"joined_on\": cognito.DateTimeAttribute()\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    StandardAttributes = new StandardAttributes {\n        Fullname = new StandardAttribute {\n            Required = true,\n            Mutable = false\n        },\n        Address = new StandardAttribute {\n            Required = false,\n            Mutable = true\n        }\n    },\n    CustomAttributes = new Dictionary<string, ICustomAttribute> {\n        { \"myappid\", new StringAttribute(new StringAttributeProps { MinLen = 5, MaxLen = 15, Mutable = false }) },\n        { \"callingcode\", new NumberAttribute(new NumberAttributeProps { Min = 1, Max = 3, Mutable = true }) },\n        { \"isEmployee\", new BooleanAttribute(new CustomAttributeProps { Mutable = true }) },\n        { \"joinedOn\", new DateTimeAttribute() }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .standardAttributes(StandardAttributes.builder()\n                .fullname(StandardAttribute.builder()\n                        .required(true)\n                        .mutable(false)\n                        .build())\n                .address(StandardAttribute.builder()\n                        .required(false)\n                        .mutable(true)\n                        .build())\n                .build())\n        .customAttributes(Map.of(\n                \"myappid\", StringAttribute.Builder.create().minLen(5).maxLen(15).mutable(false).build(),\n                \"callingcode\", NumberAttribute.Builder.create().min(1).max(3).mutable(true).build(),\n                \"isEmployee\", BooleanAttribute.Builder.create().mutable(true).build(),\n                \"joinedOn\", new DateTimeAttribute()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  standardAttributes: {\n    fullname: {\n      required: true,\n      mutable: false,\n    },\n    address: {\n      required: false,\n      mutable: true,\n    },\n  },\n  customAttributes: {\n    'myappid': new cognito.StringAttribute({ minLen: 5, maxLen: 15, mutable: false }),\n    'callingcode': new cognito.NumberAttribute({ min: 1, max: 3, mutable: true }),\n    'isEmployee': new cognito.BooleanAttribute({ mutable: true }),\n    'joinedOn': new cognito.DateTimeAttribute(),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.StandardAttribute"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.BooleanAttribute",
        "@aws-cdk/aws-cognito.CustomAttributeProps",
        "@aws-cdk/aws-cognito.DateTimeAttribute",
        "@aws-cdk/aws-cognito.ICustomAttribute",
        "@aws-cdk/aws-cognito.NumberAttribute",
        "@aws-cdk/aws-cognito.NumberAttributeProps",
        "@aws-cdk/aws-cognito.StandardAttribute",
        "@aws-cdk/aws-cognito.StandardAttributes",
        "@aws-cdk/aws-cognito.StringAttribute",
        "@aws-cdk/aws-cognito.StringAttributeProps",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  standardAttributes: {\n    fullname: {\n      required: true,\n      mutable: false,\n    },\n    address: {\n      required: false,\n      mutable: true,\n    },\n  },\n  customAttributes: {\n    'myappid': new cognito.StringAttribute({ minLen: 5, maxLen: 15, mutable: false }),\n    'callingcode': new cognito.NumberAttribute({ min: 1, max: 3, mutable: true }),\n    'isEmployee': new cognito.BooleanAttribute({ mutable: true }),\n    'joinedOn': new cognito.DateTimeAttribute(),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 5,
        "75": 25,
        "91": 3,
        "104": 1,
        "106": 4,
        "193": 8,
        "194": 5,
        "197": 5,
        "226": 1,
        "281": 19
      },
      "fqnsFingerprint": "c68147e1bcefec12a021aece4881899e8960f7d1bfcb6288bfd954b94687e375"
    },
    "1b6881c5a07b8ca785b30b0ebb7c3d79d23be3b33c36bf036dcfd1ad59fe82aa": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    standard_attributes=cognito.StandardAttributes(\n        fullname=cognito.StandardAttribute(\n            required=True,\n            mutable=False\n        ),\n        address=cognito.StandardAttribute(\n            required=False,\n            mutable=True\n        )\n    ),\n    custom_attributes={\n        \"myappid\": cognito.StringAttribute(min_len=5, max_len=15, mutable=False),\n        \"callingcode\": cognito.NumberAttribute(min=1, max=3, mutable=True),\n        \"is_employee\": cognito.BooleanAttribute(mutable=True),\n        \"joined_on\": cognito.DateTimeAttribute()\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    StandardAttributes = new StandardAttributes {\n        Fullname = new StandardAttribute {\n            Required = true,\n            Mutable = false\n        },\n        Address = new StandardAttribute {\n            Required = false,\n            Mutable = true\n        }\n    },\n    CustomAttributes = new Dictionary<string, ICustomAttribute> {\n        { \"myappid\", new StringAttribute(new StringAttributeProps { MinLen = 5, MaxLen = 15, Mutable = false }) },\n        { \"callingcode\", new NumberAttribute(new NumberAttributeProps { Min = 1, Max = 3, Mutable = true }) },\n        { \"isEmployee\", new BooleanAttribute(new CustomAttributeProps { Mutable = true }) },\n        { \"joinedOn\", new DateTimeAttribute() }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .standardAttributes(StandardAttributes.builder()\n                .fullname(StandardAttribute.builder()\n                        .required(true)\n                        .mutable(false)\n                        .build())\n                .address(StandardAttribute.builder()\n                        .required(false)\n                        .mutable(true)\n                        .build())\n                .build())\n        .customAttributes(Map.of(\n                \"myappid\", StringAttribute.Builder.create().minLen(5).maxLen(15).mutable(false).build(),\n                \"callingcode\", NumberAttribute.Builder.create().min(1).max(3).mutable(true).build(),\n                \"isEmployee\", BooleanAttribute.Builder.create().mutable(true).build(),\n                \"joinedOn\", new DateTimeAttribute()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  standardAttributes: {\n    fullname: {\n      required: true,\n      mutable: false,\n    },\n    address: {\n      required: false,\n      mutable: true,\n    },\n  },\n  customAttributes: {\n    'myappid': new cognito.StringAttribute({ minLen: 5, maxLen: 15, mutable: false }),\n    'callingcode': new cognito.NumberAttribute({ min: 1, max: 3, mutable: true }),\n    'isEmployee': new cognito.BooleanAttribute({ mutable: true }),\n    'joinedOn': new cognito.DateTimeAttribute(),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.StandardAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.BooleanAttribute",
        "@aws-cdk/aws-cognito.CustomAttributeProps",
        "@aws-cdk/aws-cognito.DateTimeAttribute",
        "@aws-cdk/aws-cognito.ICustomAttribute",
        "@aws-cdk/aws-cognito.NumberAttribute",
        "@aws-cdk/aws-cognito.NumberAttributeProps",
        "@aws-cdk/aws-cognito.StandardAttribute",
        "@aws-cdk/aws-cognito.StandardAttributes",
        "@aws-cdk/aws-cognito.StringAttribute",
        "@aws-cdk/aws-cognito.StringAttributeProps",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  standardAttributes: {\n    fullname: {\n      required: true,\n      mutable: false,\n    },\n    address: {\n      required: false,\n      mutable: true,\n    },\n  },\n  customAttributes: {\n    'myappid': new cognito.StringAttribute({ minLen: 5, maxLen: 15, mutable: false }),\n    'callingcode': new cognito.NumberAttribute({ min: 1, max: 3, mutable: true }),\n    'isEmployee': new cognito.BooleanAttribute({ mutable: true }),\n    'joinedOn': new cognito.DateTimeAttribute(),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 5,
        "75": 25,
        "91": 3,
        "104": 1,
        "106": 4,
        "193": 8,
        "194": 5,
        "197": 5,
        "226": 1,
        "281": 19
      },
      "fqnsFingerprint": "c68147e1bcefec12a021aece4881899e8960f7d1bfcb6288bfd954b94687e375"
    },
    "dc2cb929e00274e1f42001f40a50488e27db43f76e1d4c956e4ae205c515f44a": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    standard_attributes=cognito.StandardAttributes(\n        fullname=cognito.StandardAttribute(\n            required=True,\n            mutable=False\n        ),\n        address=cognito.StandardAttribute(\n            required=False,\n            mutable=True\n        )\n    ),\n    custom_attributes={\n        \"myappid\": cognito.StringAttribute(min_len=5, max_len=15, mutable=False),\n        \"callingcode\": cognito.NumberAttribute(min=1, max=3, mutable=True),\n        \"is_employee\": cognito.BooleanAttribute(mutable=True),\n        \"joined_on\": cognito.DateTimeAttribute()\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    StandardAttributes = new StandardAttributes {\n        Fullname = new StandardAttribute {\n            Required = true,\n            Mutable = false\n        },\n        Address = new StandardAttribute {\n            Required = false,\n            Mutable = true\n        }\n    },\n    CustomAttributes = new Dictionary<string, ICustomAttribute> {\n        { \"myappid\", new StringAttribute(new StringAttributeProps { MinLen = 5, MaxLen = 15, Mutable = false }) },\n        { \"callingcode\", new NumberAttribute(new NumberAttributeProps { Min = 1, Max = 3, Mutable = true }) },\n        { \"isEmployee\", new BooleanAttribute(new CustomAttributeProps { Mutable = true }) },\n        { \"joinedOn\", new DateTimeAttribute() }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .standardAttributes(StandardAttributes.builder()\n                .fullname(StandardAttribute.builder()\n                        .required(true)\n                        .mutable(false)\n                        .build())\n                .address(StandardAttribute.builder()\n                        .required(false)\n                        .mutable(true)\n                        .build())\n                .build())\n        .customAttributes(Map.of(\n                \"myappid\", StringAttribute.Builder.create().minLen(5).maxLen(15).mutable(false).build(),\n                \"callingcode\", NumberAttribute.Builder.create().min(1).max(3).mutable(true).build(),\n                \"isEmployee\", BooleanAttribute.Builder.create().mutable(true).build(),\n                \"joinedOn\", new DateTimeAttribute()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  standardAttributes: {\n    fullname: {\n      required: true,\n      mutable: false,\n    },\n    address: {\n      required: false,\n      mutable: true,\n    },\n  },\n  customAttributes: {\n    'myappid': new cognito.StringAttribute({ minLen: 5, maxLen: 15, mutable: false }),\n    'callingcode': new cognito.NumberAttribute({ min: 1, max: 3, mutable: true }),\n    'isEmployee': new cognito.BooleanAttribute({ mutable: true }),\n    'joinedOn': new cognito.DateTimeAttribute(),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.StringAttribute"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.BooleanAttribute",
        "@aws-cdk/aws-cognito.CustomAttributeProps",
        "@aws-cdk/aws-cognito.DateTimeAttribute",
        "@aws-cdk/aws-cognito.ICustomAttribute",
        "@aws-cdk/aws-cognito.NumberAttribute",
        "@aws-cdk/aws-cognito.NumberAttributeProps",
        "@aws-cdk/aws-cognito.StandardAttribute",
        "@aws-cdk/aws-cognito.StandardAttributes",
        "@aws-cdk/aws-cognito.StringAttribute",
        "@aws-cdk/aws-cognito.StringAttributeProps",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  standardAttributes: {\n    fullname: {\n      required: true,\n      mutable: false,\n    },\n    address: {\n      required: false,\n      mutable: true,\n    },\n  },\n  customAttributes: {\n    'myappid': new cognito.StringAttribute({ minLen: 5, maxLen: 15, mutable: false }),\n    'callingcode': new cognito.NumberAttribute({ min: 1, max: 3, mutable: true }),\n    'isEmployee': new cognito.BooleanAttribute({ mutable: true }),\n    'joinedOn': new cognito.DateTimeAttribute(),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 5,
        "75": 25,
        "91": 3,
        "104": 1,
        "106": 4,
        "193": 8,
        "194": 5,
        "197": 5,
        "226": 1,
        "281": 19
      },
      "fqnsFingerprint": "c68147e1bcefec12a021aece4881899e8960f7d1bfcb6288bfd954b94687e375"
    },
    "e43c896cb5096c72058508f16e27da579e31166aa1bcd38547fcdcafbcd04042": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    standard_attributes=cognito.StandardAttributes(\n        fullname=cognito.StandardAttribute(\n            required=True,\n            mutable=False\n        ),\n        address=cognito.StandardAttribute(\n            required=False,\n            mutable=True\n        )\n    ),\n    custom_attributes={\n        \"myappid\": cognito.StringAttribute(min_len=5, max_len=15, mutable=False),\n        \"callingcode\": cognito.NumberAttribute(min=1, max=3, mutable=True),\n        \"is_employee\": cognito.BooleanAttribute(mutable=True),\n        \"joined_on\": cognito.DateTimeAttribute()\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    StandardAttributes = new StandardAttributes {\n        Fullname = new StandardAttribute {\n            Required = true,\n            Mutable = false\n        },\n        Address = new StandardAttribute {\n            Required = false,\n            Mutable = true\n        }\n    },\n    CustomAttributes = new Dictionary<string, ICustomAttribute> {\n        { \"myappid\", new StringAttribute(new StringAttributeProps { MinLen = 5, MaxLen = 15, Mutable = false }) },\n        { \"callingcode\", new NumberAttribute(new NumberAttributeProps { Min = 1, Max = 3, Mutable = true }) },\n        { \"isEmployee\", new BooleanAttribute(new CustomAttributeProps { Mutable = true }) },\n        { \"joinedOn\", new DateTimeAttribute() }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .standardAttributes(StandardAttributes.builder()\n                .fullname(StandardAttribute.builder()\n                        .required(true)\n                        .mutable(false)\n                        .build())\n                .address(StandardAttribute.builder()\n                        .required(false)\n                        .mutable(true)\n                        .build())\n                .build())\n        .customAttributes(Map.of(\n                \"myappid\", StringAttribute.Builder.create().minLen(5).maxLen(15).mutable(false).build(),\n                \"callingcode\", NumberAttribute.Builder.create().min(1).max(3).mutable(true).build(),\n                \"isEmployee\", BooleanAttribute.Builder.create().mutable(true).build(),\n                \"joinedOn\", new DateTimeAttribute()))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  standardAttributes: {\n    fullname: {\n      required: true,\n      mutable: false,\n    },\n    address: {\n      required: false,\n      mutable: true,\n    },\n  },\n  customAttributes: {\n    'myappid': new cognito.StringAttribute({ minLen: 5, maxLen: 15, mutable: false }),\n    'callingcode': new cognito.NumberAttribute({ min: 1, max: 3, mutable: true }),\n    'isEmployee': new cognito.BooleanAttribute({ mutable: true }),\n    'joinedOn': new cognito.DateTimeAttribute(),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.StringAttributeProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.BooleanAttribute",
        "@aws-cdk/aws-cognito.CustomAttributeProps",
        "@aws-cdk/aws-cognito.DateTimeAttribute",
        "@aws-cdk/aws-cognito.ICustomAttribute",
        "@aws-cdk/aws-cognito.NumberAttribute",
        "@aws-cdk/aws-cognito.NumberAttributeProps",
        "@aws-cdk/aws-cognito.StandardAttribute",
        "@aws-cdk/aws-cognito.StandardAttributes",
        "@aws-cdk/aws-cognito.StringAttribute",
        "@aws-cdk/aws-cognito.StringAttributeProps",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  standardAttributes: {\n    fullname: {\n      required: true,\n      mutable: false,\n    },\n    address: {\n      required: false,\n      mutable: true,\n    },\n  },\n  customAttributes: {\n    'myappid': new cognito.StringAttribute({ minLen: 5, maxLen: 15, mutable: false }),\n    'callingcode': new cognito.NumberAttribute({ min: 1, max: 3, mutable: true }),\n    'isEmployee': new cognito.BooleanAttribute({ mutable: true }),\n    'joinedOn': new cognito.DateTimeAttribute(),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 4,
        "10": 5,
        "75": 25,
        "91": 3,
        "104": 1,
        "106": 4,
        "193": 8,
        "194": 5,
        "197": 5,
        "226": 1,
        "281": 19
      },
      "fqnsFingerprint": "c68147e1bcefec12a021aece4881899e8960f7d1bfcb6288bfd954b94687e375"
    },
    "6c4e0bf27f0f7358989224183b8345161c33d3ad4c133855c7032eae15477754": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    user_invitation=cognito.UserInvitationConfig(\n        email_subject=\"Invite to join our awesome app!\",\n        email_body=\"Hello {username}, you have been invited to join our awesome app! Your temporary password is {####}\",\n        sms_message=\"Hello {username}, your temporary password for our awesome app is {####}\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    UserInvitation = new UserInvitationConfig {\n        EmailSubject = \"Invite to join our awesome app!\",\n        EmailBody = \"Hello {username}, you have been invited to join our awesome app! Your temporary password is {####}\",\n        SmsMessage = \"Hello {username}, your temporary password for our awesome app is {####}\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .userInvitation(UserInvitationConfig.builder()\n                .emailSubject(\"Invite to join our awesome app!\")\n                .emailBody(\"Hello {username}, you have been invited to join our awesome app! Your temporary password is {####}\")\n                .smsMessage(\"Hello {username}, your temporary password for our awesome app is {####}\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  userInvitation: {\n    emailSubject: 'Invite to join our awesome app!',\n    emailBody: 'Hello {username}, you have been invited to join our awesome app! Your temporary password is {####}',\n    smsMessage: 'Hello {username}, your temporary password for our awesome app is {####}'\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.UserInvitationConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserInvitationConfig",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  userInvitation: {\n    emailSubject: 'Invite to join our awesome app!',\n    emailBody: 'Hello {username}, you have been invited to join our awesome app! Your temporary password is {####}',\n    smsMessage: 'Hello {username}, your temporary password for our awesome app is {####}'\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 6,
        "104": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "492e7fdb1738131e035ca7e604dacb63a3f401131cf651b2763a24c72083ea7f"
    },
    "d75e79c34fb46e8df993bd2b7b5cb3047dc11a62a2ae868e42bdc90ebd7bdc61": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"Pool\")\npool.add_client(\"app-client\",\n    o_auth=cognito.OAuthSettings(\n        flows=cognito.OAuthFlows(\n            authorization_code_grant=True\n        ),\n        scopes=[cognito.OAuthScope.OPENID],\n        callback_urls=[\"https://my-app-domain.com/welcome\"],\n        logout_urls=[\"https://my-app-domain.com/signin\"]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\npool.AddClient(\"app-client\", new UserPoolClientOptions {\n    OAuth = new OAuthSettings {\n        Flows = new OAuthFlows {\n            AuthorizationCodeGrant = true\n        },\n        Scopes = new [] { OAuthScope.OPENID },\n        CallbackUrls = new [] { \"https://my-app-domain.com/welcome\" },\n        LogoutUrls = new [] { \"https://my-app-domain.com/signin\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\npool.addClient(\"app-client\", UserPoolClientOptions.builder()\n        .oAuth(OAuthSettings.builder()\n                .flows(OAuthFlows.builder()\n                        .authorizationCodeGrant(true)\n                        .build())\n                .scopes(List.of(OAuthScope.OPENID))\n                .callbackUrls(List.of(\"https://my-app-domain.com/welcome\"))\n                .logoutUrls(List.of(\"https://my-app-domain.com/signin\"))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'Pool');\npool.addClient('app-client', {\n  oAuth: {\n    flows: {\n      authorizationCodeGrant: true,\n    },\n    scopes: [ cognito.OAuthScope.OPENID ],\n    callbackUrls: [ 'https://my-app-domain.com/welcome' ],\n    logoutUrls: [ 'https://my-app-domain.com/signin' ],\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.UserPool"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.OAuthFlows",
        "@aws-cdk/aws-cognito.OAuthScope",
        "@aws-cdk/aws-cognito.OAuthScope#OPENID",
        "@aws-cdk/aws-cognito.OAuthSettings",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClientOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'Pool');\npool.addClient('app-client', {\n  oAuth: {\n    flows: {\n      authorizationCodeGrant: true,\n    },\n    scopes: [ cognito.OAuthScope.OPENID ],\n    callbackUrls: [ 'https://my-app-domain.com/welcome' ],\n    logoutUrls: [ 'https://my-app-domain.com/signin' ],\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 14,
        "104": 1,
        "106": 1,
        "192": 3,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "a23e8fe6ebe9b47d29ec72105693d6153dec063898f8acce687bda66334612ec"
    },
    "e33e3ce9deb8799ee92d8fe77007140f0a02201ecaa54bdb7a65d7ad42fadf9f": {
      "translations": {
        "python": {
          "source": "userpool = cognito.UserPool(self, \"UserPool\")\nclient = userpool.add_client(\"Client\",\n    # ...\n    o_auth=cognito.OAuthSettings(\n        flows=cognito.OAuthFlows(\n            implicit_code_grant=True\n        ),\n        callback_urls=[\"https://myapp.com/home\", \"https://myapp.com/users\"\n        ]\n    )\n)\ndomain = userpool.add_domain(\"Domain\")\nsign_in_url = domain.sign_in_url(client,\n    redirect_uri=\"https://myapp.com/home\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool userpool = new UserPool(this, \"UserPool\", new UserPoolProps { });\nUserPoolClient client = userpool.AddClient(\"Client\", new UserPoolClientOptions {\n    // ...\n    OAuth = new OAuthSettings {\n        Flows = new OAuthFlows {\n            ImplicitCodeGrant = true\n        },\n        CallbackUrls = new [] { \"https://myapp.com/home\", \"https://myapp.com/users\" }\n    }\n});\nUserPoolDomain domain = userpool.AddDomain(\"Domain\", new UserPoolDomainOptions { });\nstring signInUrl = domain.SignInUrl(client, new SignInUrlOptions {\n    RedirectUri = \"https://myapp.com/home\"\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool userpool = UserPool.Builder.create(this, \"UserPool\").build();\nUserPoolClient client = userpool.addClient(\"Client\", UserPoolClientOptions.builder()\n        // ...\n        .oAuth(OAuthSettings.builder()\n                .flows(OAuthFlows.builder()\n                        .implicitCodeGrant(true)\n                        .build())\n                .callbackUrls(List.of(\"https://myapp.com/home\", \"https://myapp.com/users\"))\n                .build())\n        .build());\nUserPoolDomain domain = userpool.addDomain(\"Domain\", UserPoolDomainOptions.builder().build());\nString signInUrl = domain.signInUrl(client, SignInUrlOptions.builder()\n        .redirectUri(\"https://myapp.com/home\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const userpool = new cognito.UserPool(this, 'UserPool', {\n  // ...\n});\nconst client = userpool.addClient('Client', {\n  // ...\n  oAuth: {\n    flows: {\n      implicitCodeGrant: true,\n    },\n    callbackUrls: [\n      'https://myapp.com/home',\n      'https://myapp.com/users',\n    ]\n  }\n})\nconst domain = userpool.addDomain('Domain', {\n  // ...\n});\nconst signInUrl = domain.signInUrl(client, {\n  redirectUri: 'https://myapp.com/home', // must be a URL configured under 'callbackUrls' with the client\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.UserPoolClient"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.OAuthFlows",
        "@aws-cdk/aws-cognito.OAuthSettings",
        "@aws-cdk/aws-cognito.SignInUrlOptions",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClient",
        "@aws-cdk/aws-cognito.UserPoolClientOptions",
        "@aws-cdk/aws-cognito.UserPoolDomain",
        "@aws-cdk/aws-cognito.UserPoolDomain#signInUrl",
        "@aws-cdk/aws-cognito.UserPoolDomainOptions",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst userpool = new cognito.UserPool(this, 'UserPool', {\n  // ...\n});\nconst client = userpool.addClient('Client', {\n  // ...\n  oAuth: {\n    flows: {\n      implicitCodeGrant: true,\n    },\n    callbackUrls: [\n      'https://myapp.com/home',\n      'https://myapp.com/users',\n    ]\n  }\n})\nconst domain = userpool.addDomain('Domain', {\n  // ...\n});\nconst signInUrl = domain.signInUrl(client, {\n  redirectUri: 'https://myapp.com/home', // must be a URL configured under 'callbackUrls' with the client\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 18,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 6,
        "194": 4,
        "196": 3,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 5
      },
      "fqnsFingerprint": "a28a2564e65c2cff60431cbe161f94cd13a43ac6b97268bd6af6eb4c68296dd2"
    },
    "c61820fa17bbfa17e7f7c2476b7b4600a23f13a7b6a524877fa2f4d3a47c5a34": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"Pool\")\npool.add_client(\"app-client\",\n    # ...\n    supported_identity_providers=[cognito.UserPoolClientIdentityProvider.AMAZON, cognito.UserPoolClientIdentityProvider.COGNITO\n    ]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\npool.AddClient(\"app-client\", new UserPoolClientOptions {\n    // ...\n    SupportedIdentityProviders = new [] { UserPoolClientIdentityProvider.AMAZON, UserPoolClientIdentityProvider.COGNITO }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\npool.addClient(\"app-client\", UserPoolClientOptions.builder()\n        // ...\n        .supportedIdentityProviders(List.of(UserPoolClientIdentityProvider.AMAZON, UserPoolClientIdentityProvider.COGNITO))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'Pool');\npool.addClient('app-client', {\n  // ...\n  supportedIdentityProviders: [\n    cognito.UserPoolClientIdentityProvider.AMAZON,\n    cognito.UserPoolClientIdentityProvider.COGNITO,\n  ]\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.UserPoolClientIdentityProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClientIdentityProvider",
        "@aws-cdk/aws-cognito.UserPoolClientIdentityProvider#AMAZON",
        "@aws-cdk/aws-cognito.UserPoolClientIdentityProvider#COGNITO",
        "@aws-cdk/aws-cognito.UserPoolClientOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'Pool');\npool.addClient('app-client', {\n  // ...\n  supportedIdentityProviders: [\n    cognito.UserPoolClientIdentityProvider.AMAZON,\n    cognito.UserPoolClientIdentityProvider.COGNITO,\n  ]\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 12,
        "104": 1,
        "192": 1,
        "193": 1,
        "194": 6,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "4442637905e39245c252cfe7cb0c40a2e4196baa79e164d704a0d9ae299e1cec"
    },
    "cb872c23fe1ddc8ee860bc8c2529bd5824d5ff89e0871a02afadd961f0752413": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"Pool\")\npool.add_client(\"app-client\",\n    o_auth=cognito.OAuthSettings(\n        flows=cognito.OAuthFlows(\n            authorization_code_grant=True\n        ),\n        scopes=[cognito.OAuthScope.OPENID],\n        callback_urls=[\"https://my-app-domain.com/welcome\"],\n        logout_urls=[\"https://my-app-domain.com/signin\"]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\npool.AddClient(\"app-client\", new UserPoolClientOptions {\n    OAuth = new OAuthSettings {\n        Flows = new OAuthFlows {\n            AuthorizationCodeGrant = true\n        },\n        Scopes = new [] { OAuthScope.OPENID },\n        CallbackUrls = new [] { \"https://my-app-domain.com/welcome\" },\n        LogoutUrls = new [] { \"https://my-app-domain.com/signin\" }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\npool.addClient(\"app-client\", UserPoolClientOptions.builder()\n        .oAuth(OAuthSettings.builder()\n                .flows(OAuthFlows.builder()\n                        .authorizationCodeGrant(true)\n                        .build())\n                .scopes(List.of(OAuthScope.OPENID))\n                .callbackUrls(List.of(\"https://my-app-domain.com/welcome\"))\n                .logoutUrls(List.of(\"https://my-app-domain.com/signin\"))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'Pool');\npool.addClient('app-client', {\n  oAuth: {\n    flows: {\n      authorizationCodeGrant: true,\n    },\n    scopes: [ cognito.OAuthScope.OPENID ],\n    callbackUrls: [ 'https://my-app-domain.com/welcome' ],\n    logoutUrls: [ 'https://my-app-domain.com/signin' ],\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.UserPoolClientOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.OAuthFlows",
        "@aws-cdk/aws-cognito.OAuthScope",
        "@aws-cdk/aws-cognito.OAuthScope#OPENID",
        "@aws-cdk/aws-cognito.OAuthSettings",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClientOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'Pool');\npool.addClient('app-client', {\n  oAuth: {\n    flows: {\n      authorizationCodeGrant: true,\n    },\n    scopes: [ cognito.OAuthScope.OPENID ],\n    callbackUrls: [ 'https://my-app-domain.com/welcome' ],\n    logoutUrls: [ 'https://my-app-domain.com/signin' ],\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 14,
        "104": 1,
        "106": 1,
        "192": 3,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6
      },
      "fqnsFingerprint": "a23e8fe6ebe9b47d29ec72105693d6153dec063898f8acce687bda66334612ec"
    },
    "9eb8224ddf4614ea635634880062d06a630c53615b81a85056f7deccaac4cd1c": {
      "translations": {
        "python": {
          "source": "imported_pool = cognito.UserPool.from_user_pool_id(self, \"imported-pool\", \"us-east-1_oiuR12Abd\")\ncognito.UserPoolClient(self, \"customer-app-client\",\n    user_pool=imported_pool\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IUserPool importedPool = UserPool.FromUserPoolId(this, \"imported-pool\", \"us-east-1_oiuR12Abd\");\nnew UserPoolClient(this, \"customer-app-client\", new UserPoolClientProps {\n    UserPool = importedPool\n});",
          "version": "1"
        },
        "java": {
          "source": "IUserPool importedPool = UserPool.fromUserPoolId(this, \"imported-pool\", \"us-east-1_oiuR12Abd\");\nUserPoolClient.Builder.create(this, \"customer-app-client\")\n        .userPool(importedPool)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const importedPool = cognito.UserPool.fromUserPoolId(this, 'imported-pool', 'us-east-1_oiuR12Abd');\nnew cognito.UserPoolClient(this, 'customer-app-client', {\n  userPool: importedPool\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.UserPoolClientProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.IUserPool",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPool#fromUserPoolId",
        "@aws-cdk/aws-cognito.UserPoolClient",
        "@aws-cdk/aws-cognito.UserPoolClientProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst importedPool = cognito.UserPool.fromUserPoolId(this, 'imported-pool', 'us-east-1_oiuR12Abd');\nnew cognito.UserPoolClient(this, 'customer-app-client', {\n  userPool: importedPool\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "104": 2,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "d48963119d64342c267d7ac3e8cd23a396b0ac4cf8f1d5a755564f5f94691d8d"
    },
    "14b3e216c67c96b9e1d5d25d50bea43ce9bb93ec389f273a2aa0e4c9f46a2a6e": {
      "translations": {
        "python": {
          "source": "userpool = cognito.UserPool(self, \"UserPool\")\nclient = userpool.add_client(\"Client\",\n    # ...\n    o_auth=cognito.OAuthSettings(\n        flows=cognito.OAuthFlows(\n            implicit_code_grant=True\n        ),\n        callback_urls=[\"https://myapp.com/home\", \"https://myapp.com/users\"\n        ]\n    )\n)\ndomain = userpool.add_domain(\"Domain\")\nsign_in_url = domain.sign_in_url(client,\n    redirect_uri=\"https://myapp.com/home\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool userpool = new UserPool(this, \"UserPool\", new UserPoolProps { });\nUserPoolClient client = userpool.AddClient(\"Client\", new UserPoolClientOptions {\n    // ...\n    OAuth = new OAuthSettings {\n        Flows = new OAuthFlows {\n            ImplicitCodeGrant = true\n        },\n        CallbackUrls = new [] { \"https://myapp.com/home\", \"https://myapp.com/users\" }\n    }\n});\nUserPoolDomain domain = userpool.AddDomain(\"Domain\", new UserPoolDomainOptions { });\nstring signInUrl = domain.SignInUrl(client, new SignInUrlOptions {\n    RedirectUri = \"https://myapp.com/home\"\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool userpool = UserPool.Builder.create(this, \"UserPool\").build();\nUserPoolClient client = userpool.addClient(\"Client\", UserPoolClientOptions.builder()\n        // ...\n        .oAuth(OAuthSettings.builder()\n                .flows(OAuthFlows.builder()\n                        .implicitCodeGrant(true)\n                        .build())\n                .callbackUrls(List.of(\"https://myapp.com/home\", \"https://myapp.com/users\"))\n                .build())\n        .build());\nUserPoolDomain domain = userpool.addDomain(\"Domain\", UserPoolDomainOptions.builder().build());\nString signInUrl = domain.signInUrl(client, SignInUrlOptions.builder()\n        .redirectUri(\"https://myapp.com/home\")\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const userpool = new cognito.UserPool(this, 'UserPool', {\n  // ...\n});\nconst client = userpool.addClient('Client', {\n  // ...\n  oAuth: {\n    flows: {\n      implicitCodeGrant: true,\n    },\n    callbackUrls: [\n      'https://myapp.com/home',\n      'https://myapp.com/users',\n    ]\n  }\n})\nconst domain = userpool.addDomain('Domain', {\n  // ...\n});\nconst signInUrl = domain.signInUrl(client, {\n  redirectUri: 'https://myapp.com/home', // must be a URL configured under 'callbackUrls' with the client\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.UserPoolDomain"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.OAuthFlows",
        "@aws-cdk/aws-cognito.OAuthSettings",
        "@aws-cdk/aws-cognito.SignInUrlOptions",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClient",
        "@aws-cdk/aws-cognito.UserPoolClientOptions",
        "@aws-cdk/aws-cognito.UserPoolDomain",
        "@aws-cdk/aws-cognito.UserPoolDomain#signInUrl",
        "@aws-cdk/aws-cognito.UserPoolDomainOptions",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst userpool = new cognito.UserPool(this, 'UserPool', {\n  // ...\n});\nconst client = userpool.addClient('Client', {\n  // ...\n  oAuth: {\n    flows: {\n      implicitCodeGrant: true,\n    },\n    callbackUrls: [\n      'https://myapp.com/home',\n      'https://myapp.com/users',\n    ]\n  }\n})\nconst domain = userpool.addDomain('Domain', {\n  // ...\n});\nconst signInUrl = domain.signInUrl(client, {\n  redirectUri: 'https://myapp.com/home', // must be a URL configured under 'callbackUrls' with the client\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 18,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 6,
        "194": 4,
        "196": 3,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 5
      },
      "fqnsFingerprint": "a28a2564e65c2cff60431cbe161f94cd13a43ac6b97268bd6af6eb4c68296dd2"
    },
    "e1f7537a6ba4ef5b38b33decfb6a92823dd70e2c9026d214b782aca6b77ca1f4": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"Pool\")\n\npool.add_domain(\"CognitoDomain\",\n    cognito_domain=cognito.CognitoDomainOptions(\n        domain_prefix=\"my-awesome-app\"\n    )\n)\n\ncertificate_arn = \"arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d\"\n\ndomain_cert = certificatemanager.Certificate.from_certificate_arn(self, \"domainCert\", certificate_arn)\npool.add_domain(\"CustomDomain\",\n    custom_domain=cognito.CustomDomainOptions(\n        domain_name=\"user.myapp.com\",\n        certificate=domain_cert\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\npool.AddDomain(\"CognitoDomain\", new UserPoolDomainOptions {\n    CognitoDomain = new CognitoDomainOptions {\n        DomainPrefix = \"my-awesome-app\"\n    }\n});\n\nstring certificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d\";\n\nICertificate domainCert = Certificate.FromCertificateArn(this, \"domainCert\", certificateArn);\npool.AddDomain(\"CustomDomain\", new UserPoolDomainOptions {\n    CustomDomain = new CustomDomainOptions {\n        DomainName = \"user.myapp.com\",\n        Certificate = domainCert\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\npool.addDomain(\"CognitoDomain\", UserPoolDomainOptions.builder()\n        .cognitoDomain(CognitoDomainOptions.builder()\n                .domainPrefix(\"my-awesome-app\")\n                .build())\n        .build());\n\nString certificateArn = \"arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d\";\n\nICertificate domainCert = Certificate.fromCertificateArn(this, \"domainCert\", certificateArn);\npool.addDomain(\"CustomDomain\", UserPoolDomainOptions.builder()\n        .customDomain(CustomDomainOptions.builder()\n                .domainName(\"user.myapp.com\")\n                .certificate(domainCert)\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'Pool');\n\npool.addDomain('CognitoDomain', {\n  cognitoDomain: {\n    domainPrefix: 'my-awesome-app',\n  },\n});\n\nconst certificateArn = 'arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d';\n\nconst domainCert = certificatemanager.Certificate.fromCertificateArn(this, 'domainCert', certificateArn);\npool.addDomain('CustomDomain', {\n  customDomain: {\n    domainName: 'user.myapp.com',\n    certificate: domainCert,\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.UserPoolDomainOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-certificatemanager.Certificate",
        "@aws-cdk/aws-certificatemanager.Certificate#fromCertificateArn",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-cognito.CognitoDomainOptions",
        "@aws-cdk/aws-cognito.CustomDomainOptions",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolDomainOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'Pool');\n\npool.addDomain('CognitoDomain', {\n  cognitoDomain: {\n    domainPrefix: 'my-awesome-app',\n  },\n});\n\nconst certificateArn = 'arn:aws:acm:us-east-1:123456789012:certificate/11-3336f1-44483d-adc7-9cd375c5169d';\n\nconst domainCert = certificatemanager.Certificate.fromCertificateArn(this, 'domainCert', certificateArn);\npool.addDomain('CustomDomain', {\n  customDomain: {\n    domainName: 'user.myapp.com',\n    certificate: domainCert,\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 19,
        "104": 2,
        "193": 4,
        "194": 5,
        "196": 3,
        "197": 1,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 5
      },
      "fqnsFingerprint": "08f518e6c611908d19222ec462d8450805480858d3ecd0c1e12cb87d5c22964d"
    },
    "38bd6ddd3164bf28d1be5b61998828ee35fe6069d033b790044035430596ab04": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_cognito as cognito\nimport aws_cdk.aws_ec2 as ec2\nimport aws_cdk.aws_elasticloadbalancingv2 as elbv2\nfrom aws_cdk.core import App, CfnOutput, Stack\nfrom constructs import Construct\nimport aws_cdk.aws_elasticloadbalancingv2_actions as actions\n\nStack): lb = elbv2.ApplicationLoadBalancer(self, \"LB\",\n    vpc=vpc,\n    internet_facing=True\n)\n\nuser_pool = cognito.UserPool(self, \"UserPool\")\nuser_pool_client = cognito.UserPoolClient(self, \"Client\",\n    user_pool=user_pool,\n\n    # Required minimal configuration for use with an ELB\n    generate_secret=True,\n    auth_flows=cognito.AuthFlow(\n        user_password=True\n    ),\n    o_auth=cognito.OAuthSettings(\n        flows=cognito.OAuthFlows(\n            authorization_code_grant=True\n        ),\n        scopes=[cognito.OAuthScope.EMAIL],\n        callback_urls=[f\"https://{lb.loadBalancerDnsName}/oauth2/idpresponse\"\n        ]\n    )\n)\ncfn_client = user_pool_client.node.default_child\ncfn_client.add_property_override(\"RefreshTokenValidity\", 1)\ncfn_client.add_property_override(\"SupportedIdentityProviders\", [\"COGNITO\"])\n\nuser_pool_domain = cognito.UserPoolDomain(self, \"Domain\",\n    user_pool=user_pool,\n    cognito_domain=cognito.CognitoDomainOptions(\n        domain_prefix=\"test-cdk-prefix\"\n    )\n)\n\nlb.add_listener(\"Listener\",\n    port=443,\n    certificates=[certificate],\n    default_action=actions.AuthenticateCognitoAction(\n        user_pool=user_pool,\n        user_pool_client=user_pool_client,\n        user_pool_domain=user_pool_domain,\n        next=elbv2.ListenerAction.fixed_response(200,\n            content_type=\"text/plain\",\n            message_body=\"Authenticated\"\n        )\n    )\n)\n\nCfnOutput(self, \"DNS\",\n    value=lb.load_balancer_dns_name\n)\n\napp = App()\nCognitoStack(app, \"integ-cognito\")\napp.synth()",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Cognito;\nusing Amazon.CDK.AWS.EC2;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2;\nusing Amazon.CDK;\nusing Constructs;\nusing Amazon.CDK.AWS.ElasticLoadBalancingV2.Actions;\n\nCognitoStack : Stack\n{ApplicationLoadBalancer lb = new ApplicationLoadBalancer(this, \"LB\", new ApplicationLoadBalancerProps {\n    Vpc = vpc,\n    InternetFacing = true\n});\n\nUserPool userPool = new UserPool(this, \"UserPool\");\nUserPoolClient userPoolClient = new UserPoolClient(this, \"Client\", new UserPoolClientProps {\n    UserPool = userPool,\n\n    // Required minimal configuration for use with an ELB\n    GenerateSecret = true,\n    AuthFlows = new AuthFlow {\n        UserPassword = true\n    },\n    OAuth = new OAuthSettings {\n        Flows = new OAuthFlows {\n            AuthorizationCodeGrant = true\n        },\n        Scopes = new [] { OAuthScope.EMAIL },\n        CallbackUrls = new [] { $\"https://{lb.loadBalancerDnsName}/oauth2/idpresponse\" }\n    }\n});\nCfnUserPoolClient cfnClient = (CfnUserPoolClient)userPoolClient.Node.DefaultChild;\ncfnClient.AddPropertyOverride(\"RefreshTokenValidity\", 1);\ncfnClient.AddPropertyOverride(\"SupportedIdentityProviders\", new [] { \"COGNITO\" });\n\nUserPoolDomain userPoolDomain = new UserPoolDomain(this, \"Domain\", new UserPoolDomainProps {\n    UserPool = userPool,\n    CognitoDomain = new CognitoDomainOptions {\n        DomainPrefix = \"test-cdk-prefix\"\n    }\n});\n\nlb.AddListener(\"Listener\", new BaseApplicationListenerProps {\n    Port = 443,\n    Certificates = new [] { certificate },\n    DefaultAction = new AuthenticateCognitoAction(new AuthenticateCognitoActionProps {\n        UserPool = userPool,\n        UserPoolClient = userPoolClient,\n        UserPoolDomain = userPoolDomain,\n        Next = ListenerAction.FixedResponse(200, new FixedResponseOptions {\n            ContentType = \"text/plain\",\n            MessageBody = \"Authenticated\"\n        })\n    })\n});\n\nnew CfnOutput(this, \"DNS\", new CfnOutputProps {\n    Value = lb.LoadBalancerDnsName\n});\n\nApp app = new App();\nnew CognitoStack(app, \"integ-cognito\");\napp.Synth();",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cognito.*;\nimport software.amazon.awscdk.services.ec2.*;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.*;\nimport software.amazon.awscdk.core.App;\nimport software.amazon.awscdk.core.CfnOutput;\nimport software.amazon.awscdk.core.Stack;\nimport constructs.Construct;\nimport software.amazon.awscdk.services.elasticloadbalancingv2.actions.*;\n\nCognitoStack extends Stack {CognitoStack(ApplicationLoadBalancer lb = ApplicationLoadBalancer.Builder.create(this, \"LB\")\n        .vpc(vpc)\n        .internetFacing(true)\n        .build();\n\nUserPool userPool = new UserPool(this, \"UserPool\");\nUserPoolClient userPoolClient = UserPoolClient.Builder.create(this, \"Client\")\n        .userPool(userPool)\n\n        // Required minimal configuration for use with an ELB\n        .generateSecret(true)\n        .authFlows(AuthFlow.builder()\n                .userPassword(true)\n                .build())\n        .oAuth(OAuthSettings.builder()\n                .flows(OAuthFlows.builder()\n                        .authorizationCodeGrant(true)\n                        .build())\n                .scopes(List.of(OAuthScope.EMAIL))\n                .callbackUrls(List.of(String.format(\"https://%s/oauth2/idpresponse\", lb.getLoadBalancerDnsName())))\n                .build())\n        .build();\nCfnUserPoolClient cfnClient = (CfnUserPoolClient)userPoolClient.getNode().getDefaultChild();\ncfnClient.addPropertyOverride(\"RefreshTokenValidity\", 1);\ncfnClient.addPropertyOverride(\"SupportedIdentityProviders\", List.of(\"COGNITO\"));\n\nUserPoolDomain userPoolDomain = UserPoolDomain.Builder.create(this, \"Domain\")\n        .userPool(userPool)\n        .cognitoDomain(CognitoDomainOptions.builder()\n                .domainPrefix(\"test-cdk-prefix\")\n                .build())\n        .build();\n\nlb.addListener(\"Listener\", BaseApplicationListenerProps.builder()\n        .port(443)\n        .certificates(List.of(certificate))\n        .defaultAction(AuthenticateCognitoAction.Builder.create()\n                .userPool(userPool)\n                .userPoolClient(userPoolClient)\n                .userPoolDomain(userPoolDomain)\n                .next(ListenerAction.fixedResponse(200, FixedResponseOptions.builder()\n                        .contentType(\"text/plain\")\n                        .messageBody(\"Authenticated\")\n                        .build()))\n                .build())\n        .build());\n\nCfnOutput.Builder.create(this, \"DNS\")\n        .value(lb.getLoadBalancerDnsName())\n        .build();\n\nApp app = new App();\nnew CognitoStack(app, \"integ-cognito\");\napp.synth();",
          "version": "1"
        },
        "$": {
          "source": "    const lb = new elbv2.ApplicationLoadBalancer(this, 'LB', {\n      vpc,\n      internetFacing: true,\n    });\n\n    const userPool = new cognito.UserPool(this, 'UserPool');\n    const userPoolClient = new cognito.UserPoolClient(this, 'Client', {\n      userPool,\n\n      // Required minimal configuration for use with an ELB\n      generateSecret: true,\n      authFlows: {\n        userPassword: true,\n      },\n      oAuth: {\n        flows: {\n          authorizationCodeGrant: true,\n        },\n        scopes: [cognito.OAuthScope.EMAIL],\n        callbackUrls: [\n          `https://${lb.loadBalancerDnsName}/oauth2/idpresponse`,\n        ],\n      },\n    });\n    const cfnClient = userPoolClient.node.defaultChild as cognito.CfnUserPoolClient;\n    cfnClient.addPropertyOverride('RefreshTokenValidity', 1);\n    cfnClient.addPropertyOverride('SupportedIdentityProviders', ['COGNITO']);\n\n    const userPoolDomain = new cognito.UserPoolDomain(this, 'Domain', {\n      userPool,\n      cognitoDomain: {\n        domainPrefix: 'test-cdk-prefix',\n      },\n    });\n\n    lb.addListener('Listener', {\n      port: 443,\n      certificates: [certificate],\n      defaultAction: new actions.AuthenticateCognitoAction({\n        userPool,\n        userPoolClient,\n        userPoolDomain,\n        next: elbv2.ListenerAction.fixedResponse(200, {\n          contentType: 'text/plain',\n          messageBody: 'Authenticated',\n        }),\n      }),\n    });\n\n    new CfnOutput(this, 'DNS', {\n      value: lb.loadBalancerDnsName,\n    });\n  }\n}\n\nconst app = new App();\nnew CognitoStack(app, 'integ-cognito');\napp.synth();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.UserPoolDomainProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.AuthFlow",
        "@aws-cdk/aws-cognito.CfnUserPoolClient",
        "@aws-cdk/aws-cognito.CognitoDomainOptions",
        "@aws-cdk/aws-cognito.IUserPool",
        "@aws-cdk/aws-cognito.IUserPoolClient",
        "@aws-cdk/aws-cognito.IUserPoolDomain",
        "@aws-cdk/aws-cognito.OAuthFlows",
        "@aws-cdk/aws-cognito.OAuthScope",
        "@aws-cdk/aws-cognito.OAuthScope#EMAIL",
        "@aws-cdk/aws-cognito.OAuthSettings",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClient",
        "@aws-cdk/aws-cognito.UserPoolClientProps",
        "@aws-cdk/aws-cognito.UserPoolDomain",
        "@aws-cdk/aws-cognito.UserPoolDomainProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-elasticloadbalancingv2-actions.AuthenticateCognitoAction",
        "@aws-cdk/aws-elasticloadbalancingv2-actions.AuthenticateCognitoActionProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseLoadBalancer#loadBalancerDnsName",
        "@aws-cdk/aws-elasticloadbalancingv2.FixedResponseOptions",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction",
        "@aws-cdk/aws-elasticloadbalancingv2.ListenerAction#fixedResponse",
        "@aws-cdk/core.App",
        "@aws-cdk/core.CfnOutput",
        "@aws-cdk/core.CfnOutputProps",
        "@aws-cdk/core.CfnResource#addPropertyOverride",
        "@aws-cdk/core.Construct#node",
        "@aws-cdk/core.Stage#synth"
      ],
      "fullSource": "import * as cognito from '@aws-cdk/aws-cognito';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport { App, CfnOutput, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as actions from '../lib';\n\nclass CognitoStack extends Stack {\n\n  /// !hide\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const vpc = new ec2.Vpc(this, 'Stack', {\n      maxAzs: 2,\n    });\n\n    const certificate: elbv2.IListenerCertificate = {\n      certificateArn: process.env.SELF_SIGNED_CERT_ARN ?? '',\n    };\n\n    /// !show\n    const lb = new elbv2.ApplicationLoadBalancer(this, 'LB', {\n      vpc,\n      internetFacing: true,\n    });\n\n    const userPool = new cognito.UserPool(this, 'UserPool');\n    const userPoolClient = new cognito.UserPoolClient(this, 'Client', {\n      userPool,\n\n      // Required minimal configuration for use with an ELB\n      generateSecret: true,\n      authFlows: {\n        userPassword: true,\n      },\n      oAuth: {\n        flows: {\n          authorizationCodeGrant: true,\n        },\n        scopes: [cognito.OAuthScope.EMAIL],\n        callbackUrls: [\n          `https://${lb.loadBalancerDnsName}/oauth2/idpresponse`,\n        ],\n      },\n    });\n    const cfnClient = userPoolClient.node.defaultChild as cognito.CfnUserPoolClient;\n    cfnClient.addPropertyOverride('RefreshTokenValidity', 1);\n    cfnClient.addPropertyOverride('SupportedIdentityProviders', ['COGNITO']);\n\n    const userPoolDomain = new cognito.UserPoolDomain(this, 'Domain', {\n      userPool,\n      cognitoDomain: {\n        domainPrefix: 'test-cdk-prefix',\n      },\n    });\n\n    lb.addListener('Listener', {\n      port: 443,\n      certificates: [certificate],\n      defaultAction: new actions.AuthenticateCognitoAction({\n        userPool,\n        userPoolClient,\n        userPoolDomain,\n        next: elbv2.ListenerAction.fixedResponse(200, {\n          contentType: 'text/plain',\n          messageBody: 'Authenticated',\n        }),\n      }),\n    });\n\n    new CfnOutput(this, 'DNS', {\n      value: lb.loadBalancerDnsName,\n    });\n  }\n}\n\nconst app = new App();\nnew CognitoStack(app, 'integ-cognito');\napp.synth();",
      "syntaxKindCounter": {
        "8": 3,
        "10": 19,
        "15": 1,
        "17": 1,
        "75": 78,
        "104": 5,
        "106": 4,
        "153": 1,
        "169": 1,
        "192": 4,
        "193": 11,
        "194": 17,
        "196": 5,
        "197": 8,
        "211": 1,
        "216": 1,
        "217": 1,
        "221": 1,
        "225": 6,
        "226": 6,
        "242": 6,
        "243": 6,
        "245": 1,
        "254": 6,
        "255": 6,
        "256": 4,
        "257": 2,
        "258": 4,
        "279": 1,
        "281": 18,
        "282": 6,
        "290": 1
      },
      "fqnsFingerprint": "9c5a56be5122fdebccc1a32d5315be4f4a44ce346645bc0fdd152bebf32dba30"
    },
    "9ab342c7448ac4775b90eb59295ae0bfced03d099bbba2aae17a1e1042796bb0": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    email=UserPoolEmail.with_sES(\n        from_email=\"noreply@myawesomeapp.com\",\n        from_name=\"Awesome App\",\n        reply_to=\"support@myawesomeapp.com\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    Email = UserPoolEmail.WithSES(new Struct {\n        FromEmail = \"noreply@myawesomeapp.com\",\n        FromName = \"Awesome App\",\n        ReplyTo = \"support@myawesomeapp.com\"\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        .email(UserPoolEmail.withSES(Map.of(\n                \"fromEmail\", \"noreply@myawesomeapp.com\",\n                \"fromName\", \"Awesome App\",\n                \"replyTo\", \"support@myawesomeapp.com\")))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  email: UserPoolEmail.withSES({\n    fromEmail: 'noreply@myawesomeapp.com',\n    fromName: 'Awesome App',\n    replyTo: 'support@myawesomeapp.com',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.UserPoolEmail"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolEmail",
        "@aws-cdk/aws-cognito.UserPoolProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  email: UserPoolEmail.withSES({\n    fromEmail: 'noreply@myawesomeapp.com',\n    fromName: 'Awesome App',\n    replyTo: 'support@myawesomeapp.com',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 8,
        "104": 1,
        "193": 2,
        "194": 2,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 4
      },
      "fqnsFingerprint": "0d8dd6456845c46bd24f4df754900f784142e887245b151030b393893f29f8f8"
    },
    "dc1b48392383106eed0910e2e6227991fe4b7cca475d271978c90544bcd4296f": {
      "translations": {
        "python": {
          "source": "provider = cognito.UserPoolIdentityProviderAmazon(self, \"Amazon\")\nclient = pool.add_client(\"app-client\", {\n    # ...\n    \"supported_identity_providers\": [cognito.UserPoolClientIdentityProvider.AMAZON\n    ]\n},\nclient.node.add_dependency(provider))",
          "version": "1"
        },
        "csharp": {
          "source": "UserPoolIdentityProviderAmazon provider = new UserPoolIdentityProviderAmazon(this, \"Amazon\", new UserPoolIdentityProviderAmazonProps { });\nvar client = pool.AddClient(\"app-client\", new Struct {\n    // ...\n    SupportedIdentityProviders = new [] { UserPoolClientIdentityProvider.AMAZON }\n}, client.Node.AddDependency(provider));",
          "version": "1"
        },
        "java": {
          "source": "UserPoolIdentityProviderAmazon provider = UserPoolIdentityProviderAmazon.Builder.create(this, \"Amazon\").build();\nObject client = pool.addClient(\"app-client\", Map.of(\n        // ...\n        \"supportedIdentityProviders\", List.of(UserPoolClientIdentityProvider.AMAZON)), client.node.addDependency(provider));",
          "version": "1"
        },
        "$": {
          "source": "const provider = new cognito.UserPoolIdentityProviderAmazon(this, 'Amazon', {\n  // ...\n});\nconst client = pool.addClient('app-client', {\n  // ...\n  supportedIdentityProviders: [\n    cognito.UserPoolClientIdentityProvider.AMAZON,\n  ],\n}\nclient.node.addDependency(provider);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.UserPoolIdentityProviderAmazon"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPoolClientIdentityProvider",
        "@aws-cdk/aws-cognito.UserPoolClientIdentityProvider#AMAZON",
        "@aws-cdk/aws-cognito.UserPoolIdentityProviderAmazon",
        "@aws-cdk/aws-cognito.UserPoolIdentityProviderAmazonProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = new cognito.UserPoolIdentityProviderAmazon(this, 'Amazon', {\n  // ...\n});\nconst client = pool.addClient('app-client', {\n  // ...\n  supportedIdentityProviders: [\n    cognito.UserPoolClientIdentityProvider.AMAZON,\n  ],\n}\nclient.node.addDependency(provider);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1
      },
      "fqnsFingerprint": "3f1a8bb163e365358fdd95291bff66df54fe9363ea5ce901bcf9c55eaeaef7cc"
    },
    "4ec727250f6e70b94aa70f294c345656252f6b8a29baea4c72cb1e4ba76a5223": {
      "translations": {
        "python": {
          "source": "provider = cognito.UserPoolIdentityProviderAmazon(self, \"Amazon\")\nclient = pool.add_client(\"app-client\", {\n    # ...\n    \"supported_identity_providers\": [cognito.UserPoolClientIdentityProvider.AMAZON\n    ]\n},\nclient.node.add_dependency(provider))",
          "version": "1"
        },
        "csharp": {
          "source": "UserPoolIdentityProviderAmazon provider = new UserPoolIdentityProviderAmazon(this, \"Amazon\", new UserPoolIdentityProviderAmazonProps { });\nvar client = pool.AddClient(\"app-client\", new Struct {\n    // ...\n    SupportedIdentityProviders = new [] { UserPoolClientIdentityProvider.AMAZON }\n}, client.Node.AddDependency(provider));",
          "version": "1"
        },
        "java": {
          "source": "UserPoolIdentityProviderAmazon provider = UserPoolIdentityProviderAmazon.Builder.create(this, \"Amazon\").build();\nObject client = pool.addClient(\"app-client\", Map.of(\n        // ...\n        \"supportedIdentityProviders\", List.of(UserPoolClientIdentityProvider.AMAZON)), client.node.addDependency(provider));",
          "version": "1"
        },
        "$": {
          "source": "const provider = new cognito.UserPoolIdentityProviderAmazon(this, 'Amazon', {\n  // ...\n});\nconst client = pool.addClient('app-client', {\n  // ...\n  supportedIdentityProviders: [\n    cognito.UserPoolClientIdentityProvider.AMAZON,\n  ],\n}\nclient.node.addDependency(provider);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.UserPoolIdentityProviderAmazonProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPoolClientIdentityProvider",
        "@aws-cdk/aws-cognito.UserPoolClientIdentityProvider#AMAZON",
        "@aws-cdk/aws-cognito.UserPoolIdentityProviderAmazon",
        "@aws-cdk/aws-cognito.UserPoolIdentityProviderAmazonProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst provider = new cognito.UserPoolIdentityProviderAmazon(this, 'Amazon', {\n  // ...\n});\nconst client = pool.addClient('app-client', {\n  // ...\n  supportedIdentityProviders: [\n    cognito.UserPoolClientIdentityProvider.AMAZON,\n  ],\n}\nclient.node.addDependency(provider);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 6,
        "196": 2,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 1
      },
      "fqnsFingerprint": "3f1a8bb163e365358fdd95291bff66df54fe9363ea5ce901bcf9c55eaeaef7cc"
    },
    "f26bd24c2640610ce2f4295ccb47c804cc0fb154fb7b7a19dac4da1032712c27": {
      "translations": {
        "python": {
          "source": "auth_challenge_fn = lambda_.Function(self, \"authChallengeFn\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset()\n)\n\nuserpool = cognito.UserPool(self, \"myuserpool\",\n    # ...\n    lambda_triggers=cognito.UserPoolTriggers(\n        create_auth_challenge=auth_challenge_fn\n    )\n)\n\nuserpool.add_trigger(cognito.UserPoolOperation.USER_MIGRATION, lambda_.Function(self, \"userMigrationFn\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset()\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Function authChallengeFn = new Function(this, \"authChallengeFn\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset()\n});\n\nUserPool userpool = new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    LambdaTriggers = new UserPoolTriggers {\n        CreateAuthChallenge = authChallengeFn\n    }\n});\n\nuserpool.AddTrigger(UserPoolOperation.USER_MIGRATION, new Function(this, \"userMigrationFn\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset()\n}));",
          "version": "1"
        },
        "java": {
          "source": "Function authChallengeFn = Function.Builder.create(this, \"authChallengeFn\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset())\n        .build();\n\nUserPool userpool = UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .lambdaTriggers(UserPoolTriggers.builder()\n                .createAuthChallenge(authChallengeFn)\n                .build())\n        .build();\n\nuserpool.addTrigger(UserPoolOperation.USER_MIGRATION, Function.Builder.create(this, \"userMigrationFn\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const authChallengeFn = new lambda.Function(this, 'authChallengeFn', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(/* path to lambda asset */),\n});\n\nconst userpool = new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  lambdaTriggers: {\n    createAuthChallenge: authChallengeFn,\n    // ...\n  }\n});\n\nuserpool.addTrigger(cognito.UserPoolOperation.USER_MIGRATION, new lambda.Function(this, 'userMigrationFn', {\n    runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(/* path to lambda asset */),\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.UserPoolOperation"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPool#addTrigger",
        "@aws-cdk/aws-cognito.UserPoolOperation",
        "@aws-cdk/aws-cognito.UserPoolOperation#USER_MIGRATION",
        "@aws-cdk/aws-cognito.UserPoolProps",
        "@aws-cdk/aws-cognito.UserPoolTriggers",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst authChallengeFn = new lambda.Function(this, 'authChallengeFn', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(/* path to lambda asset */),\n});\n\nconst userpool = new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  lambdaTriggers: {\n    createAuthChallenge: authChallengeFn,\n    // ...\n  }\n});\n\nuserpool.addTrigger(cognito.UserPoolOperation.USER_MIGRATION, new lambda.Function(this, 'userMigrationFn', {\n    runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(/* path to lambda asset */),\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 34,
        "104": 3,
        "193": 4,
        "194": 14,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "401a6cda1f7aff6108afc9560aa8a483773b0d12d9469b435765c70c71bdb767"
    },
    "3fe2f1fb713b499748a6c86f7ab19348ebbaab59a4705d8bf86c7dd823b99351": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    self_sign_up_enabled=True,\n    user_verification=cognito.UserVerificationConfig(\n        email_subject=\"Verify your email for our awesome app!\",\n        email_body=\"Thanks for signing up to our awesome app! Your verification code is {####}\",\n        email_style=cognito.VerificationEmailStyle.CODE,\n        sms_message=\"Thanks for signing up to our awesome app! Your verification code is {####}\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    SelfSignUpEnabled = true,\n    UserVerification = new UserVerificationConfig {\n        EmailSubject = \"Verify your email for our awesome app!\",\n        EmailBody = \"Thanks for signing up to our awesome app! Your verification code is {####}\",\n        EmailStyle = VerificationEmailStyle.CODE,\n        SmsMessage = \"Thanks for signing up to our awesome app! Your verification code is {####}\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .selfSignUpEnabled(true)\n        .userVerification(UserVerificationConfig.builder()\n                .emailSubject(\"Verify your email for our awesome app!\")\n                .emailBody(\"Thanks for signing up to our awesome app! Your verification code is {####}\")\n                .emailStyle(VerificationEmailStyle.CODE)\n                .smsMessage(\"Thanks for signing up to our awesome app! Your verification code is {####}\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  selfSignUpEnabled: true,\n  userVerification: {\n    emailSubject: 'Verify your email for our awesome app!',\n    emailBody: 'Thanks for signing up to our awesome app! Your verification code is {####}',\n    emailStyle: cognito.VerificationEmailStyle.CODE,\n    smsMessage: 'Thanks for signing up to our awesome app! Your verification code is {####}',\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.UserPoolProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps",
        "@aws-cdk/aws-cognito.UserVerificationConfig",
        "@aws-cdk/aws-cognito.VerificationEmailStyle",
        "@aws-cdk/aws-cognito.VerificationEmailStyle#CODE"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  selfSignUpEnabled: true,\n  userVerification: {\n    emailSubject: 'Verify your email for our awesome app!',\n    emailBody: 'Thanks for signing up to our awesome app! Your verification code is {####}',\n    emailStyle: cognito.VerificationEmailStyle.CODE,\n    smsMessage: 'Thanks for signing up to our awesome app! Your verification code is {####}',\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "104": 1,
        "106": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "c71586e0f47e6bd74152e867df9c49a132498519fab3930a847ced8131561ae6"
    },
    "c4c328eb1ec77a7024171fd86da3bf3ea57db99a713bc6c4fc0846dca40ba2ee": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"Pool\")\n\nread_only_scope = ResourceServerScope(scope_name=\"read\", scope_description=\"Read-only access\")\nfull_access_scope = ResourceServerScope(scope_name=\"*\", scope_description=\"Full access\")\n\nuser_server = pool.add_resource_server(\"ResourceServer\",\n    identifier=\"users\",\n    scopes=[read_only_scope, full_access_scope]\n)\n\nread_only_client = pool.add_client(\"read-only-client\",\n    # ...\n    o_auth=cognito.OAuthSettings(\n        # ...\n        scopes=[OAuthScope.resource_server(user_server, read_only_scope)]\n    )\n)\n\nfull_access_client = pool.add_client(\"full-access-client\",\n    # ...\n    o_auth=cognito.OAuthSettings(\n        # ...\n        scopes=[OAuthScope.resource_server(user_server, full_access_scope)]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\nvar readOnlyScope = new ResourceServerScope(new Struct { ScopeName = \"read\", ScopeDescription = \"Read-only access\" });\nvar fullAccessScope = new ResourceServerScope(new Struct { ScopeName = \"*\", ScopeDescription = \"Full access\" });\n\nUserPoolResourceServer userServer = pool.AddResourceServer(\"ResourceServer\", new UserPoolResourceServerOptions {\n    Identifier = \"users\",\n    Scopes = new [] { readOnlyScope, fullAccessScope }\n});\n\nUserPoolClient readOnlyClient = pool.AddClient(\"read-only-client\", new UserPoolClientOptions {\n    // ...\n    OAuth = new OAuthSettings {\n        // ...\n        Scopes = new [] { OAuthScope.ResourceServer(userServer, readOnlyScope) }\n    }\n});\n\nUserPoolClient fullAccessClient = pool.AddClient(\"full-access-client\", new UserPoolClientOptions {\n    // ...\n    OAuth = new OAuthSettings {\n        // ...\n        Scopes = new [] { OAuthScope.ResourceServer(userServer, fullAccessScope) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\nObject readOnlyScope = ResourceServerScope.Builder.create().scopeName(\"read\").scopeDescription(\"Read-only access\").build();\nObject fullAccessScope = ResourceServerScope.Builder.create().scopeName(\"*\").scopeDescription(\"Full access\").build();\n\nUserPoolResourceServer userServer = pool.addResourceServer(\"ResourceServer\", UserPoolResourceServerOptions.builder()\n        .identifier(\"users\")\n        .scopes(List.of(readOnlyScope, fullAccessScope))\n        .build());\n\nUserPoolClient readOnlyClient = pool.addClient(\"read-only-client\", UserPoolClientOptions.builder()\n        // ...\n        .oAuth(OAuthSettings.builder()\n                // ...\n                .scopes(List.of(OAuthScope.resourceServer(userServer, readOnlyScope)))\n                .build())\n        .build());\n\nUserPoolClient fullAccessClient = pool.addClient(\"full-access-client\", UserPoolClientOptions.builder()\n        // ...\n        .oAuth(OAuthSettings.builder()\n                // ...\n                .scopes(List.of(OAuthScope.resourceServer(userServer, fullAccessScope)))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'Pool');\n\nconst readOnlyScope = new ResourceServerScope({ scopeName: 'read', scopeDescription: 'Read-only access' });\nconst fullAccessScope = new ResourceServerScope({ scopeName: '*', scopeDescription: 'Full access' });\n\nconst userServer = pool.addResourceServer('ResourceServer', {\n  identifier: 'users',\n  scopes: [ readOnlyScope, fullAccessScope ],\n});\n\nconst readOnlyClient = pool.addClient('read-only-client', {\n  // ...\n  oAuth: {\n    // ...\n    scopes: [ OAuthScope.resourceServer(userServer, readOnlyScope) ],\n  },\n});\n\nconst fullAccessClient = pool.addClient('full-access-client', {\n  // ...\n  oAuth: {\n    // ...\n    scopes: [ OAuthScope.resourceServer(userServer, fullAccessScope) ],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.UserPoolResourceServer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.OAuthSettings",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClient",
        "@aws-cdk/aws-cognito.UserPoolClientOptions",
        "@aws-cdk/aws-cognito.UserPoolResourceServer",
        "@aws-cdk/aws-cognito.UserPoolResourceServerOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'Pool');\n\nconst readOnlyScope = new ResourceServerScope({ scopeName: 'read', scopeDescription: 'Read-only access' });\nconst fullAccessScope = new ResourceServerScope({ scopeName: '*', scopeDescription: 'Full access' });\n\nconst userServer = pool.addResourceServer('ResourceServer', {\n  identifier: 'users',\n  scopes: [ readOnlyScope, fullAccessScope ],\n});\n\nconst readOnlyClient = pool.addClient('read-only-client', {\n  // ...\n  oAuth: {\n    // ...\n    scopes: [ OAuthScope.resourceServer(userServer, readOnlyScope) ],\n  },\n});\n\nconst fullAccessClient = pool.addClient('full-access-client', {\n  // ...\n  oAuth: {\n    // ...\n    scopes: [ OAuthScope.resourceServer(userServer, fullAccessScope) ],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 36,
        "104": 1,
        "192": 3,
        "193": 7,
        "194": 6,
        "196": 5,
        "197": 3,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 10
      },
      "fqnsFingerprint": "ea4eb9f671ed2aa123740c93223fe9da05e4694a0acd4dbfe0d3ebd5876c63d9"
    },
    "a40e0b2d06299492c691c953e2139fb60ec60a6fed536643e6aec590cc803295": {
      "translations": {
        "python": {
          "source": "pool = cognito.UserPool(self, \"Pool\")\n\nread_only_scope = ResourceServerScope(scope_name=\"read\", scope_description=\"Read-only access\")\nfull_access_scope = ResourceServerScope(scope_name=\"*\", scope_description=\"Full access\")\n\nuser_server = pool.add_resource_server(\"ResourceServer\",\n    identifier=\"users\",\n    scopes=[read_only_scope, full_access_scope]\n)\n\nread_only_client = pool.add_client(\"read-only-client\",\n    # ...\n    o_auth=cognito.OAuthSettings(\n        # ...\n        scopes=[OAuthScope.resource_server(user_server, read_only_scope)]\n    )\n)\n\nfull_access_client = pool.add_client(\"full-access-client\",\n    # ...\n    o_auth=cognito.OAuthSettings(\n        # ...\n        scopes=[OAuthScope.resource_server(user_server, full_access_scope)]\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\nvar readOnlyScope = new ResourceServerScope(new Struct { ScopeName = \"read\", ScopeDescription = \"Read-only access\" });\nvar fullAccessScope = new ResourceServerScope(new Struct { ScopeName = \"*\", ScopeDescription = \"Full access\" });\n\nUserPoolResourceServer userServer = pool.AddResourceServer(\"ResourceServer\", new UserPoolResourceServerOptions {\n    Identifier = \"users\",\n    Scopes = new [] { readOnlyScope, fullAccessScope }\n});\n\nUserPoolClient readOnlyClient = pool.AddClient(\"read-only-client\", new UserPoolClientOptions {\n    // ...\n    OAuth = new OAuthSettings {\n        // ...\n        Scopes = new [] { OAuthScope.ResourceServer(userServer, readOnlyScope) }\n    }\n});\n\nUserPoolClient fullAccessClient = pool.AddClient(\"full-access-client\", new UserPoolClientOptions {\n    // ...\n    OAuth = new OAuthSettings {\n        // ...\n        Scopes = new [] { OAuthScope.ResourceServer(userServer, fullAccessScope) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool pool = new UserPool(this, \"Pool\");\n\nObject readOnlyScope = ResourceServerScope.Builder.create().scopeName(\"read\").scopeDescription(\"Read-only access\").build();\nObject fullAccessScope = ResourceServerScope.Builder.create().scopeName(\"*\").scopeDescription(\"Full access\").build();\n\nUserPoolResourceServer userServer = pool.addResourceServer(\"ResourceServer\", UserPoolResourceServerOptions.builder()\n        .identifier(\"users\")\n        .scopes(List.of(readOnlyScope, fullAccessScope))\n        .build());\n\nUserPoolClient readOnlyClient = pool.addClient(\"read-only-client\", UserPoolClientOptions.builder()\n        // ...\n        .oAuth(OAuthSettings.builder()\n                // ...\n                .scopes(List.of(OAuthScope.resourceServer(userServer, readOnlyScope)))\n                .build())\n        .build());\n\nUserPoolClient fullAccessClient = pool.addClient(\"full-access-client\", UserPoolClientOptions.builder()\n        // ...\n        .oAuth(OAuthSettings.builder()\n                // ...\n                .scopes(List.of(OAuthScope.resourceServer(userServer, fullAccessScope)))\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const pool = new cognito.UserPool(this, 'Pool');\n\nconst readOnlyScope = new ResourceServerScope({ scopeName: 'read', scopeDescription: 'Read-only access' });\nconst fullAccessScope = new ResourceServerScope({ scopeName: '*', scopeDescription: 'Full access' });\n\nconst userServer = pool.addResourceServer('ResourceServer', {\n  identifier: 'users',\n  scopes: [ readOnlyScope, fullAccessScope ],\n});\n\nconst readOnlyClient = pool.addClient('read-only-client', {\n  // ...\n  oAuth: {\n    // ...\n    scopes: [ OAuthScope.resourceServer(userServer, readOnlyScope) ],\n  },\n});\n\nconst fullAccessClient = pool.addClient('full-access-client', {\n  // ...\n  oAuth: {\n    // ...\n    scopes: [ OAuthScope.resourceServer(userServer, fullAccessScope) ],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.UserPoolResourceServerOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.OAuthSettings",
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolClient",
        "@aws-cdk/aws-cognito.UserPoolClientOptions",
        "@aws-cdk/aws-cognito.UserPoolResourceServer",
        "@aws-cdk/aws-cognito.UserPoolResourceServerOptions"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst pool = new cognito.UserPool(this, 'Pool');\n\nconst readOnlyScope = new ResourceServerScope({ scopeName: 'read', scopeDescription: 'Read-only access' });\nconst fullAccessScope = new ResourceServerScope({ scopeName: '*', scopeDescription: 'Full access' });\n\nconst userServer = pool.addResourceServer('ResourceServer', {\n  identifier: 'users',\n  scopes: [ readOnlyScope, fullAccessScope ],\n});\n\nconst readOnlyClient = pool.addClient('read-only-client', {\n  // ...\n  oAuth: {\n    // ...\n    scopes: [ OAuthScope.resourceServer(userServer, readOnlyScope) ],\n  },\n});\n\nconst fullAccessClient = pool.addClient('full-access-client', {\n  // ...\n  oAuth: {\n    // ...\n    scopes: [ OAuthScope.resourceServer(userServer, fullAccessScope) ],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 36,
        "104": 1,
        "192": 3,
        "193": 7,
        "194": 6,
        "196": 5,
        "197": 3,
        "225": 6,
        "242": 6,
        "243": 6,
        "281": 10
      },
      "fqnsFingerprint": "ea4eb9f671ed2aa123740c93223fe9da05e4694a0acd4dbfe0d3ebd5876c63d9"
    },
    "89200727cba4eb4e5d046bc9b9da01418251dfd4a0f964c7f6c442a30f63e350": {
      "translations": {
        "python": {
          "source": "auth_challenge_fn = lambda_.Function(self, \"authChallengeFn\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset()\n)\n\nuserpool = cognito.UserPool(self, \"myuserpool\",\n    # ...\n    lambda_triggers=cognito.UserPoolTriggers(\n        create_auth_challenge=auth_challenge_fn\n    )\n)\n\nuserpool.add_trigger(cognito.UserPoolOperation.USER_MIGRATION, lambda_.Function(self, \"userMigrationFn\",\n    runtime=lambda_.Runtime.NODEJS_12_X,\n    handler=\"index.handler\",\n    code=lambda_.Code.from_asset()\n))",
          "version": "1"
        },
        "csharp": {
          "source": "Function authChallengeFn = new Function(this, \"authChallengeFn\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset()\n});\n\nUserPool userpool = new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    LambdaTriggers = new UserPoolTriggers {\n        CreateAuthChallenge = authChallengeFn\n    }\n});\n\nuserpool.AddTrigger(UserPoolOperation.USER_MIGRATION, new Function(this, \"userMigrationFn\", new FunctionProps {\n    Runtime = Runtime.NODEJS_12_X,\n    Handler = \"index.handler\",\n    Code = Code.FromAsset()\n}));",
          "version": "1"
        },
        "java": {
          "source": "Function authChallengeFn = Function.Builder.create(this, \"authChallengeFn\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset())\n        .build();\n\nUserPool userpool = UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .lambdaTriggers(UserPoolTriggers.builder()\n                .createAuthChallenge(authChallengeFn)\n                .build())\n        .build();\n\nuserpool.addTrigger(UserPoolOperation.USER_MIGRATION, Function.Builder.create(this, \"userMigrationFn\")\n        .runtime(Runtime.NODEJS_12_X)\n        .handler(\"index.handler\")\n        .code(Code.fromAsset())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const authChallengeFn = new lambda.Function(this, 'authChallengeFn', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(/* path to lambda asset */),\n});\n\nconst userpool = new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  lambdaTriggers: {\n    createAuthChallenge: authChallengeFn,\n    // ...\n  }\n});\n\nuserpool.addTrigger(cognito.UserPoolOperation.USER_MIGRATION, new lambda.Function(this, 'userMigrationFn', {\n    runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(/* path to lambda asset */),\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.UserPoolTriggers"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPool#addTrigger",
        "@aws-cdk/aws-cognito.UserPoolOperation",
        "@aws-cdk/aws-cognito.UserPoolOperation#USER_MIGRATION",
        "@aws-cdk/aws-cognito.UserPoolProps",
        "@aws-cdk/aws-cognito.UserPoolTriggers",
        "@aws-cdk/aws-lambda.Code",
        "@aws-cdk/aws-lambda.Code#fromAsset",
        "@aws-cdk/aws-lambda.Function",
        "@aws-cdk/aws-lambda.FunctionProps",
        "@aws-cdk/aws-lambda.IFunction",
        "@aws-cdk/aws-lambda.Runtime",
        "@aws-cdk/aws-lambda.Runtime#NODEJS_12_X"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst authChallengeFn = new lambda.Function(this, 'authChallengeFn', {\n  runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(/* path to lambda asset */),\n});\n\nconst userpool = new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  lambdaTriggers: {\n    createAuthChallenge: authChallengeFn,\n    // ...\n  }\n});\n\nuserpool.addTrigger(cognito.UserPoolOperation.USER_MIGRATION, new lambda.Function(this, 'userMigrationFn', {\n    runtime: lambda.Runtime.NODEJS_12_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset(/* path to lambda asset */),\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 34,
        "104": 3,
        "193": 4,
        "194": 14,
        "196": 3,
        "197": 3,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 8
      },
      "fqnsFingerprint": "401a6cda1f7aff6108afc9560aa8a483773b0d12d9469b435765c70c71bdb767"
    },
    "bb7a47be2b4e9f00d1bbfd5f832bb35ea2303f867f09b9269d786596972417dc": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    self_sign_up_enabled=True,\n    user_verification=cognito.UserVerificationConfig(\n        email_subject=\"Verify your email for our awesome app!\",\n        email_body=\"Thanks for signing up to our awesome app! Your verification code is {####}\",\n        email_style=cognito.VerificationEmailStyle.CODE,\n        sms_message=\"Thanks for signing up to our awesome app! Your verification code is {####}\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    SelfSignUpEnabled = true,\n    UserVerification = new UserVerificationConfig {\n        EmailSubject = \"Verify your email for our awesome app!\",\n        EmailBody = \"Thanks for signing up to our awesome app! Your verification code is {####}\",\n        EmailStyle = VerificationEmailStyle.CODE,\n        SmsMessage = \"Thanks for signing up to our awesome app! Your verification code is {####}\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .selfSignUpEnabled(true)\n        .userVerification(UserVerificationConfig.builder()\n                .emailSubject(\"Verify your email for our awesome app!\")\n                .emailBody(\"Thanks for signing up to our awesome app! Your verification code is {####}\")\n                .emailStyle(VerificationEmailStyle.CODE)\n                .smsMessage(\"Thanks for signing up to our awesome app! Your verification code is {####}\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  selfSignUpEnabled: true,\n  userVerification: {\n    emailSubject: 'Verify your email for our awesome app!',\n    emailBody: 'Thanks for signing up to our awesome app! Your verification code is {####}',\n    emailStyle: cognito.VerificationEmailStyle.CODE,\n    smsMessage: 'Thanks for signing up to our awesome app! Your verification code is {####}',\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.UserVerificationConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps",
        "@aws-cdk/aws-cognito.UserVerificationConfig",
        "@aws-cdk/aws-cognito.VerificationEmailStyle",
        "@aws-cdk/aws-cognito.VerificationEmailStyle#CODE"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  selfSignUpEnabled: true,\n  userVerification: {\n    emailSubject: 'Verify your email for our awesome app!',\n    emailBody: 'Thanks for signing up to our awesome app! Your verification code is {####}',\n    emailStyle: cognito.VerificationEmailStyle.CODE,\n    smsMessage: 'Thanks for signing up to our awesome app! Your verification code is {####}',\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "104": 1,
        "106": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "c71586e0f47e6bd74152e867df9c49a132498519fab3930a847ced8131561ae6"
    },
    "311c48a30602d0e6ea2313fdc1fb9b4b34a02b91455566f63e46154060b8de86": {
      "translations": {
        "python": {
          "source": "cognito.UserPool(self, \"myuserpool\",\n    # ...\n    self_sign_up_enabled=True,\n    user_verification=cognito.UserVerificationConfig(\n        email_subject=\"Verify your email for our awesome app!\",\n        email_body=\"Thanks for signing up to our awesome app! Your verification code is {####}\",\n        email_style=cognito.VerificationEmailStyle.CODE,\n        sms_message=\"Thanks for signing up to our awesome app! Your verification code is {####}\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new UserPool(this, \"myuserpool\", new UserPoolProps {\n    // ...\n    SelfSignUpEnabled = true,\n    UserVerification = new UserVerificationConfig {\n        EmailSubject = \"Verify your email for our awesome app!\",\n        EmailBody = \"Thanks for signing up to our awesome app! Your verification code is {####}\",\n        EmailStyle = VerificationEmailStyle.CODE,\n        SmsMessage = \"Thanks for signing up to our awesome app! Your verification code is {####}\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool.Builder.create(this, \"myuserpool\")\n        // ...\n        .selfSignUpEnabled(true)\n        .userVerification(UserVerificationConfig.builder()\n                .emailSubject(\"Verify your email for our awesome app!\")\n                .emailBody(\"Thanks for signing up to our awesome app! Your verification code is {####}\")\n                .emailStyle(VerificationEmailStyle.CODE)\n                .smsMessage(\"Thanks for signing up to our awesome app! Your verification code is {####}\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new cognito.UserPool(this, 'myuserpool', {\n  // ...\n  selfSignUpEnabled: true,\n  userVerification: {\n    emailSubject: 'Verify your email for our awesome app!',\n    emailBody: 'Thanks for signing up to our awesome app! Your verification code is {####}',\n    emailStyle: cognito.VerificationEmailStyle.CODE,\n    smsMessage: 'Thanks for signing up to our awesome app! Your verification code is {####}',\n  }\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito.VerificationEmailStyle"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito.UserPool",
        "@aws-cdk/aws-cognito.UserPoolProps",
        "@aws-cdk/aws-cognito.UserVerificationConfig",
        "@aws-cdk/aws-cognito.VerificationEmailStyle",
        "@aws-cdk/aws-cognito.VerificationEmailStyle#CODE"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Duration, Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as certificatemanager from '@aws-cdk/aws-certificatemanager';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew cognito.UserPool(this, 'myuserpool', {\n  // ...\n  selfSignUpEnabled: true,\n  userVerification: {\n    emailSubject: 'Verify your email for our awesome app!',\n    emailBody: 'Thanks for signing up to our awesome app! Your verification code is {####}',\n    emailStyle: cognito.VerificationEmailStyle.CODE,\n    smsMessage: 'Thanks for signing up to our awesome app! Your verification code is {####}',\n  }\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "104": 1,
        "106": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "226": 1,
        "281": 6
      },
      "fqnsFingerprint": "c71586e0f47e6bd74152e867df9c49a132498519fab3930a847ced8131561ae6"
    }
  }
}
