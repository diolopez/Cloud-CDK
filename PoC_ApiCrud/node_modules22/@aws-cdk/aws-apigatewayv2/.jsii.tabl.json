{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "0ad6f01893b99c948e1453b444a85aef4e8bb55780b7457bde1fc6272096da26": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpUrlIntegration, HttpLambdaIntegration\n\n# books_default_fn is of type Function\n\n\nget_books_integration = HttpUrlIntegration(\"GetBooksIntegration\", \"https://get-books-proxy.myproxy.internal\")\nbooks_default_integration = HttpLambdaIntegration(\"BooksIntegration\", books_default_fn)\n\nhttp_api = apigwv2.HttpApi(self, \"HttpApi\")\n\nhttp_api.add_routes(\n    path=\"/books\",\n    methods=[apigwv2.HttpMethod.GET],\n    integration=get_books_integration\n)\nhttp_api.add_routes(\n    path=\"/books\",\n    methods=[apigwv2.HttpMethod.ANY],\n    integration=books_default_integration\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nFunction booksDefaultFn;\n\n\nHttpUrlIntegration getBooksIntegration = new HttpUrlIntegration(\"GetBooksIntegration\", \"https://get-books-proxy.myproxy.internal\");\nHttpLambdaIntegration booksDefaultIntegration = new HttpLambdaIntegration(\"BooksIntegration\", booksDefaultFn);\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\");\n\nhttpApi.AddRoutes(new AddRoutesOptions {\n    Path = \"/books\",\n    Methods = new [] { HttpMethod.GET },\n    Integration = getBooksIntegration\n});\nhttpApi.AddRoutes(new AddRoutesOptions {\n    Path = \"/books\",\n    Methods = new [] { HttpMethod.ANY },\n    Integration = booksDefaultIntegration\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpUrlIntegration;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpLambdaIntegration;\n\nFunction booksDefaultFn;\n\n\nHttpUrlIntegration getBooksIntegration = new HttpUrlIntegration(\"GetBooksIntegration\", \"https://get-books-proxy.myproxy.internal\");\nHttpLambdaIntegration booksDefaultIntegration = new HttpLambdaIntegration(\"BooksIntegration\", booksDefaultFn);\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\");\n\nhttpApi.addRoutes(AddRoutesOptions.builder()\n        .path(\"/books\")\n        .methods(List.of(HttpMethod.GET))\n        .integration(getBooksIntegration)\n        .build());\nhttpApi.addRoutes(AddRoutesOptions.builder()\n        .path(\"/books\")\n        .methods(List.of(HttpMethod.ANY))\n        .integration(booksDefaultIntegration)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import { HttpUrlIntegration, HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst getBooksIntegration = new HttpUrlIntegration('GetBooksIntegration' 'https://get-books-proxy.myproxy.internal');\n\ndeclare const booksDefaultFn: lambda.Function;\nconst booksDefaultIntegration = new HttpLambdaIntegration('BooksIntegration', booksDefaultFn);\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi');\n\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.GET ],\n  integration: getBooksIntegration,\n});\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.ANY ],\n  integration: booksDefaultIntegration,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2"
        },
        "field": {
          "field": "markdown",
          "line": 78
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpUrlIntegration",
        "@aws-cdk/aws-apigatewayv2.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2.HttpMethod",
        "@aws-cdk/aws-apigatewayv2.HttpMethod#ANY",
        "@aws-cdk/aws-apigatewayv2.HttpMethod#GET",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpUrlIntegration, HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const booksDefaultFn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBooksIntegration = new HttpUrlIntegration('GetBooksIntegration' 'https://get-books-proxy.myproxy.internal');\nconst booksDefaultIntegration = new HttpLambdaIntegration('BooksIntegration', booksDefaultFn);\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi');\n\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.GET ],\n  integration: getBooksIntegration,\n});\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.ANY ],\n  integration: booksDefaultIntegration,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 31,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "6ff8ee6259d4246ff9a9f092309dca848284539123bbea51e17badc21a86db05"
    },
    "38a6bc2c44a615e5a882fe9fae24ada8c22db0842790e80d9ddf16d7560e2b18": {
      "translations": {
        "python": {
          "source": "http_api = apigwv2.HttpApi(self, \"HttpApi\",\n    disable_execute_api_endpoint=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "HttpApi httpApi = new HttpApi(this, \"HttpApi\", new HttpApiProps {\n    DisableExecuteApiEndpoint = true\n});",
          "version": "1"
        },
        "java": {
          "source": "HttpApi httpApi = HttpApi.Builder.create(this, \"HttpApi\")\n        .disableExecuteApiEndpoint(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const httpApi = new apigwv2.HttpApi(this, 'HttpApi', {\n  disableExecuteApiEndpoint: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2"
        },
        "field": {
          "field": "markdown",
          "line": 102
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi', {\n  disableExecuteApiEndpoint: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "104": 1,
        "106": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "1e8dba8d6ff43884fa1741ea0d8a63e05b4f809eb1582d8c040657bb04111c39"
    },
    "e39d836632e5aaf0668b45444e7f900c11d8fd0aad97c86f3aa17651a27d6550": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpUrlIntegration\n\n\napigwv2.HttpApi(self, \"HttpProxyApi\",\n    default_integration=HttpUrlIntegration(\"DefaultIntegration\", \"https://example.com\")\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n\nnew HttpApi(this, \"HttpProxyApi\", new HttpApiProps {\n    DefaultIntegration = new HttpUrlIntegration(\"DefaultIntegration\", \"https://example.com\")\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpUrlIntegration;\n\n\nHttpApi.Builder.create(this, \"HttpProxyApi\")\n        .defaultIntegration(new HttpUrlIntegration(\"DefaultIntegration\", \"https://example.com\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nnew apigwv2.HttpApi(this, 'HttpProxyApi', {\n  defaultIntegration: new HttpUrlIntegration('DefaultIntegration', 'https://example.com'),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2"
        },
        "field": {
          "field": "markdown",
          "line": 111
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpUrlIntegration",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigwv2.HttpApi(this, 'HttpProxyApi', {\n  defaultIntegration: new HttpUrlIntegration('DefaultIntegration', 'https://example.com'),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 5,
        "104": 1,
        "193": 1,
        "194": 1,
        "197": 2,
        "226": 1,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "0fcf6fc55cf7b450ce8afdf4634082fea6a7fb269618998d33113728ad3cf99a"
    },
    "dd99266791af6274a58a47c5bcbbb1600a461b46da1180f9c8879885815d094a": {
      "translations": {
        "python": {
          "source": "apigwv2.HttpApi(self, \"HttpProxyApi\",\n    cors_preflight=apigwv2.CorsPreflightOptions(\n        allow_headers=[\"Authorization\"],\n        allow_methods=[apigwv2.CorsHttpMethod.GET, apigwv2.CorsHttpMethod.HEAD, apigwv2.CorsHttpMethod.OPTIONS, apigwv2.CorsHttpMethod.POST\n        ],\n        allow_origins=[\"*\"],\n        max_age=Duration.days(10)\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new HttpApi(this, \"HttpProxyApi\", new HttpApiProps {\n    CorsPreflight = new CorsPreflightOptions {\n        AllowHeaders = new [] { \"Authorization\" },\n        AllowMethods = new [] { CorsHttpMethod.GET, CorsHttpMethod.HEAD, CorsHttpMethod.OPTIONS, CorsHttpMethod.POST },\n        AllowOrigins = new [] { \"*\" },\n        MaxAge = Duration.Days(10)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "HttpApi.Builder.create(this, \"HttpProxyApi\")\n        .corsPreflight(CorsPreflightOptions.builder()\n                .allowHeaders(List.of(\"Authorization\"))\n                .allowMethods(List.of(CorsHttpMethod.GET, CorsHttpMethod.HEAD, CorsHttpMethod.OPTIONS, CorsHttpMethod.POST))\n                .allowOrigins(List.of(\"*\"))\n                .maxAge(Duration.days(10))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new apigwv2.HttpApi(this, 'HttpProxyApi', {\n  corsPreflight: {\n    allowHeaders: ['Authorization'],\n    allowMethods: [\n      apigwv2.CorsHttpMethod.GET,\n      apigwv2.CorsHttpMethod.HEAD,\n      apigwv2.CorsHttpMethod.OPTIONS,\n      apigwv2.CorsHttpMethod.POST,\n    ],\n    allowOrigins: ['*'],\n    maxAge: Duration.days(10),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2"
        },
        "field": {
          "field": "markdown",
          "line": 132
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.CorsHttpMethod",
        "@aws-cdk/aws-apigatewayv2.CorsHttpMethod#GET",
        "@aws-cdk/aws-apigatewayv2.CorsHttpMethod#HEAD",
        "@aws-cdk/aws-apigatewayv2.CorsHttpMethod#OPTIONS",
        "@aws-cdk/aws-apigatewayv2.CorsHttpMethod#POST",
        "@aws-cdk/aws-apigatewayv2.CorsPreflightOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew apigwv2.HttpApi(this, 'HttpProxyApi', {\n  corsPreflight: {\n    allowHeaders: ['Authorization'],\n    allowMethods: [\n      apigwv2.CorsHttpMethod.GET,\n      apigwv2.CorsHttpMethod.HEAD,\n      apigwv2.CorsHttpMethod.OPTIONS,\n      apigwv2.CorsHttpMethod.POST,\n    ],\n    allowOrigins: ['*'],\n    maxAge: Duration.days(10),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 21,
        "104": 1,
        "192": 3,
        "193": 2,
        "194": 10,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "b4c7d06b960c4791f1f5f87ed92ead3cc8e5d2c7a4d38d68003687492730984c"
    },
    "b2b64fd276ee2b0de101b63059aa64ccac50adf03374e3ce857a5c28cdb30ea1": {
      "translations": {
        "python": {
          "source": "# api is of type HttpApi\n\n\napigwv2.HttpStage(self, \"Stage\",\n    http_api=api,\n    stage_name=\"beta\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "HttpApi api;\n\n\nnew HttpStage(this, \"Stage\", new HttpStageProps {\n    HttpApi = api,\n    StageName = \"beta\"\n});",
          "version": "1"
        },
        "java": {
          "source": "HttpApi api;\n\n\nHttpStage.Builder.create(this, \"Stage\")\n        .httpApi(api)\n        .stageName(\"beta\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigwv2.HttpApi;\n\nnew apigwv2.HttpStage(this, 'Stage', {\n  httpApi: api,\n  stageName: 'beta',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2"
        },
        "field": {
          "field": "markdown",
          "line": 157
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.HttpStage",
        "@aws-cdk/aws-apigatewayv2.HttpStageProps",
        "@aws-cdk/aws-apigatewayv2.IHttpApi"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigwv2.HttpApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigwv2.HttpStage(this, 'Stage', {\n  httpApi: api,\n  stageName: 'beta',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "6e2325b335e7f247f20e3d2dcf72408dd033caccb9f56d3d43ccc5847c835deb"
    },
    "9e834cd8637165b05fef8f412ef154f2b0f7db60bd4f6ed7060f5444220122c3": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_certificatemanager as acm\nfrom aws_cdk.aws_apigatewayv2_integrations import HttpLambdaIntegration\n\n# handler is of type Function\n\n\ncert_arn = \"arn:aws:acm:us-east-1:111111111111:certificate\"\ndomain_name = \"example.com\"\n\ndn = apigwv2.DomainName(self, \"DN\",\n    domain_name=domain_name,\n    certificate=acm.Certificate.from_certificate_arn(self, \"cert\", cert_arn)\n)\napi = apigwv2.HttpApi(self, \"HttpProxyProdApi\",\n    default_integration=HttpLambdaIntegration(\"DefaultIntegration\", handler),\n    # https://${dn.domainName}/foo goes to prodApi $default stage\n    default_domain_mapping=apigwv2.DomainMappingOptions(\n        domain_name=dn,\n        mapping_key=\"foo\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nFunction handler;\n\n\nstring certArn = \"arn:aws:acm:us-east-1:111111111111:certificate\";\nstring domainName = \"example.com\";\n\nDomainName dn = new DomainName(this, \"DN\", new DomainNameProps {\n    DomainName = domainName,\n    Certificate = Certificate.FromCertificateArn(this, \"cert\", certArn)\n});\nHttpApi api = new HttpApi(this, \"HttpProxyProdApi\", new HttpApiProps {\n    DefaultIntegration = new HttpLambdaIntegration(\"DefaultIntegration\", handler),\n    // https://${dn.domainName}/foo goes to prodApi $default stage\n    DefaultDomainMapping = new DomainMappingOptions {\n        DomainName = dn,\n        MappingKey = \"foo\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpLambdaIntegration;\n\nFunction handler;\n\n\nString certArn = \"arn:aws:acm:us-east-1:111111111111:certificate\";\nString domainName = \"example.com\";\n\nDomainName dn = DomainName.Builder.create(this, \"DN\")\n        .domainName(domainName)\n        .certificate(Certificate.fromCertificateArn(this, \"cert\", certArn))\n        .build();\nHttpApi api = HttpApi.Builder.create(this, \"HttpProxyProdApi\")\n        .defaultIntegration(new HttpLambdaIntegration(\"DefaultIntegration\", handler))\n        // https://${dn.domainName}/foo goes to prodApi $default stage\n        .defaultDomainMapping(DomainMappingOptions.builder()\n                .domainName(dn)\n                .mappingKey(\"foo\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as acm from '@aws-cdk/aws-certificatemanager';\nimport { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst certArn = 'arn:aws:acm:us-east-1:111111111111:certificate';\nconst domainName = 'example.com';\n\nconst dn = new apigwv2.DomainName(this, 'DN', {\n  domainName,\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', certArn),\n});\n\ndeclare const handler: lambda.Function;\nconst api = new apigwv2.HttpApi(this, 'HttpProxyProdApi', {\n  defaultIntegration: new HttpLambdaIntegration('DefaultIntegration', handler),\n  // https://${dn.domainName}/foo goes to prodApi $default stage\n  defaultDomainMapping: {\n    domainName: dn,\n    mappingKey: 'foo',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2"
        },
        "field": {
          "field": "markdown",
          "line": 178
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2.DomainMappingOptions",
        "@aws-cdk/aws-apigatewayv2.DomainName",
        "@aws-cdk/aws-apigatewayv2.DomainNameProps",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IDomainName",
        "@aws-cdk/aws-certificatemanager.Certificate",
        "@aws-cdk/aws-certificatemanager.Certificate#fromCertificateArn",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst certArn = 'arn:aws:acm:us-east-1:111111111111:certificate';\nconst domainName = 'example.com';\n\nconst dn = new apigwv2.DomainName(this, 'DN', {\n  domainName,\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', certArn),\n});\nconst api = new apigwv2.HttpApi(this, 'HttpProxyProdApi', {\n  defaultIntegration: new HttpLambdaIntegration('DefaultIntegration', handler),\n  // https://${dn.domainName}/foo goes to prodApi $default stage\n  defaultDomainMapping: {\n    domainName: dn,\n    mappingKey: 'foo',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 26,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "093f9e577d2f45b0529be75a3fb8290fc9b95a009977f98f94bd52a569b2ee68"
    },
    "653eb43ee87ee28533dc9272401f864191db9ab64431e616fef77fc03431cb4f": {
      "translations": {
        "python": {
          "source": "# api is of type HttpApi\n# dn is of type DomainName\n\n\napi.add_stage(\"beta\",\n    stage_name=\"beta\",\n    auto_deploy=True,\n    # https://${dn.domainName}/bar goes to the beta stage\n    domain_mapping=apigwv2.DomainMappingOptions(\n        domain_name=dn,\n        mapping_key=\"bar\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "HttpApi api;\nDomainName dn;\n\n\napi.AddStage(\"beta\", new HttpStageOptions {\n    StageName = \"beta\",\n    AutoDeploy = true,\n    // https://${dn.domainName}/bar goes to the beta stage\n    DomainMapping = new DomainMappingOptions {\n        DomainName = dn,\n        MappingKey = \"bar\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "HttpApi api;\nDomainName dn;\n\n\napi.addStage(\"beta\", HttpStageOptions.builder()\n        .stageName(\"beta\")\n        .autoDeploy(true)\n        // https://${dn.domainName}/bar goes to the beta stage\n        .domainMapping(DomainMappingOptions.builder()\n                .domainName(dn)\n                .mappingKey(\"bar\")\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigwv2.HttpApi;\ndeclare const dn: apigwv2.DomainName;\n\napi.addStage('beta', {\n  stageName: 'beta',\n  autoDeploy: true,\n  // https://${dn.domainName}/bar goes to the beta stage\n  domainMapping: {\n    domainName: dn,\n    mappingKey: 'bar',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2"
        },
        "field": {
          "field": "markdown",
          "line": 207
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.DomainMappingOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addStage",
        "@aws-cdk/aws-apigatewayv2.HttpStageOptions",
        "@aws-cdk/aws-apigatewayv2.IDomainName"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigwv2.HttpApi;\ndeclare const dn: apigwv2.DomainName;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\napi.addStage('beta', {\n  stageName: 'beta',\n  autoDeploy: true,\n  // https://${dn.domainName}/bar goes to the beta stage\n  domainMapping: {\n    domainName: dn,\n    mappingKey: 'bar',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 14,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "914369adea98cfde5709465970777f9a073c11a5c486ae5d76cfed7054de91ac"
    },
    "bb0f8556cba073f7e8bd894e04cb752f04fe5d34b9ed33df48f13cc8f56a84c4": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpLambdaIntegration\n\n# handler is of type Function\n# dn is of type DomainName\n\n\napi_demo = apigwv2.HttpApi(self, \"DemoApi\",\n    default_integration=HttpLambdaIntegration(\"DefaultIntegration\", handler),\n    # https://${dn.domainName}/demo goes to apiDemo $default stage\n    default_domain_mapping=apigwv2.DomainMappingOptions(\n        domain_name=dn,\n        mapping_key=\"demo\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nFunction handler;\nDomainName dn;\n\n\nHttpApi apiDemo = new HttpApi(this, \"DemoApi\", new HttpApiProps {\n    DefaultIntegration = new HttpLambdaIntegration(\"DefaultIntegration\", handler),\n    // https://${dn.domainName}/demo goes to apiDemo $default stage\n    DefaultDomainMapping = new DomainMappingOptions {\n        DomainName = dn,\n        MappingKey = \"demo\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpLambdaIntegration;\n\nFunction handler;\nDomainName dn;\n\n\nHttpApi apiDemo = HttpApi.Builder.create(this, \"DemoApi\")\n        .defaultIntegration(new HttpLambdaIntegration(\"DefaultIntegration\", handler))\n        // https://${dn.domainName}/demo goes to apiDemo $default stage\n        .defaultDomainMapping(DomainMappingOptions.builder()\n                .domainName(dn)\n                .mappingKey(\"demo\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const handler: lambda.Function;\ndeclare const dn: apigwv2.DomainName;\n\nconst apiDemo = new apigwv2.HttpApi(this, 'DemoApi', {\n  defaultIntegration: new HttpLambdaIntegration('DefaultIntegration', handler),\n  // https://${dn.domainName}/demo goes to apiDemo $default stage\n  defaultDomainMapping: {\n    domainName: dn,\n    mappingKey: 'demo',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2"
        },
        "field": {
          "field": "markdown",
          "line": 224
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2.DomainMappingOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IDomainName",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const handler: lambda.Function;\ndeclare const dn: apigwv2.DomainName;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst apiDemo = new apigwv2.HttpApi(this, 'DemoApi', {\n  defaultIntegration: new HttpLambdaIntegration('DefaultIntegration', handler),\n  // https://${dn.domainName}/demo goes to apiDemo $default stage\n  defaultDomainMapping: {\n    domainName: dn,\n    mappingKey: 'demo',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 1,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "d8b1287690543b52ebb8fae62d3dad01ef8ecfee3653fcdd8ac61012a38038d8"
    },
    "36292acb9f037deb18b89f48f2f7e0c08653ee78b3cd9fcb63f676d681b5d56f": {
      "translations": {
        "python": {
          "source": "# api_demo is of type HttpApi\n\ndemo_domain_url = api_demo.default_stage.domain_url",
          "version": "1"
        },
        "csharp": {
          "source": "HttpApi apiDemo;\n\nstring? demoDomainUrl = apiDemo.DefaultStage.DomainUrl;",
          "version": "1"
        },
        "java": {
          "source": "HttpApi apiDemo;\n\nString demoDomainUrl = apiDemo.getDefaultStage().getDomainUrl();",
          "version": "1"
        },
        "$": {
          "source": "declare const apiDemo: apigwv2.HttpApi;\nconst demoDomainUrl = apiDemo.defaultStage?.domainUrl; // returns \"https://example.com/demo\"",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2"
        },
        "field": {
          "field": "markdown",
          "line": 252
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.HttpApi#defaultStage",
        "@aws-cdk/aws-apigatewayv2.IHttpStage#domainUrl"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const apiDemo: apigwv2.HttpApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst demoDomainUrl = apiDemo.defaultStage?.domainUrl;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "28": 1,
        "75": 7,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "0cd0b97ba15842223c1aeaf3df430d281061359185a3420e6f7d9772be4951b8"
    },
    "2d726d4ec05abf497d311649066920ae86485df7aa655475357cbc8e9eea79a4": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_s3 as s3\n\ncert_arn = \"arn:aws:acm:us-east-1:111111111111:certificate\"\ndomain_name = \"example.com\"\nbucket = s3.Bucket.from_bucket_name(stack, \"TrustStoreBucket\", ...)\n\nDomainName(stack, \"DomainName\",\n    domain_name=domain_name,\n    certificate=Certificate.from_certificate_arn(stack, \"cert\", cert_arn),\n    mtls={\n        \"bucket\": bucket,\n        \"key\": \"someca.pem\",\n        \"version\": \"version\"\n    }\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.S3;\n\nstring certArn = \"arn:aws:acm:us-east-1:111111111111:certificate\";\nstring domainName = \"example.com\";\nvar bucket = new Bucket.FromBucketName(stack, \"TrustStoreBucket\", ...);\n\nnew DomainName(stack, \"DomainName\", new Struct {\n    DomainName = domainName,\n    Certificate = Certificate.FromCertificateArn(stack, \"cert\", certArn),\n    Mtls = new Struct {\n        Bucket = bucket,\n        Key = \"someca.pem\",\n        Version = \"version\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.s3.*;\n\nString certArn = \"arn:aws:acm:us-east-1:111111111111:certificate\";\nString domainName = \"example.com\";\nObject bucket = new fromBucketName(stack, \"TrustStoreBucket\", ...);\n\nDomainName.Builder.create(stack, \"DomainName\")\n        .domainName(domainName)\n        .certificate(Certificate.fromCertificateArn(stack, \"cert\", certArn))\n        .mtls(Map.of(\n                \"bucket\", bucket,\n                \"key\", \"someca.pem\",\n                \"version\", \"version\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as s3 from '@aws-cdk/aws-s3';\nconst certArn = 'arn:aws:acm:us-east-1:111111111111:certificate';\nconst domainName = 'example.com';\nconst bucket = new s3.Bucket.fromBucketName(stack, 'TrustStoreBucket', ...);\n\nnew DomainName(stack, 'DomainName', {\n  domainName,\n  certificate: Certificate.fromCertificateArn(stack, 'cert', certArn),\n  mtls: {\n    bucket,\n    key: 'someca.pem',\n    version: 'version',\n  },\n})",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2"
        },
        "field": {
          "field": "markdown",
          "line": 261
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-s3.Bucket",
        "@aws-cdk/aws-s3.Bucket#fromBucketName"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as s3 from '@aws-cdk/aws-s3';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst certArn = 'arn:aws:acm:us-east-1:111111111111:certificate';\nconst domainName = 'example.com';\nconst bucket = new s3.Bucket.fromBucketName(stack, 'TrustStoreBucket', ...);\n\nnew DomainName(stack, 'DomainName', {\n  domainName,\n  certificate: Certificate.fromCertificateArn(stack, 'cert', certArn),\n  mtls: {\n    bucket,\n    key: 'someca.pem',\n    version: 'version',\n  },\n})\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 8,
        "75": 21,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 2,
        "213": 1,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "282": 2,
        "290": 1
      },
      "fqnsFingerprint": "52d66bf1541360c744fbc50dd175ff78504e26d861f3bcb111510959eca1050b"
    },
    "6083aba49f50fc76f76911508bbc052b422875f76965ceb00232187595912d36": {
      "translations": {
        "python": {
          "source": "api = apigwv2.HttpApi(self, \"my-api\")\nclient_error_metric = api.metric_client_error()",
          "version": "1"
        },
        "csharp": {
          "source": "HttpApi api = new HttpApi(this, \"my-api\");\nMetric clientErrorMetric = api.MetricClientError();",
          "version": "1"
        },
        "java": {
          "source": "HttpApi api = new HttpApi(this, \"my-api\");\nMetric clientErrorMetric = api.metricClientError();",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigwv2.HttpApi(this, 'my-api');\nconst clientErrorMetric = api.metricClientError();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2"
        },
        "field": {
          "field": "markdown",
          "line": 294
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-cloudwatch.Metric"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigwv2.HttpApi(this, 'my-api');\nconst clientErrorMetric = api.metricClientError();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 6,
        "104": 1,
        "194": 2,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "97fc2d1b7562163dd31de42a7c0b5144b8ec2f6135f96b8035b37e4aba58c191"
    },
    "78f2fbb50cfd29babe861392a20825448e9a6663597f68e04cc5db7c4893d831": {
      "translations": {
        "python": {
          "source": "api = apigwv2.HttpApi(self, \"my-api\")\nstage = apigwv2.HttpStage(self, \"Stage\",\n    http_api=api\n)\nclient_error_metric = stage.metric_client_error()",
          "version": "1"
        },
        "csharp": {
          "source": "HttpApi api = new HttpApi(this, \"my-api\");\nHttpStage stage = new HttpStage(this, \"Stage\", new HttpStageProps {\n    HttpApi = api\n});\nMetric clientErrorMetric = stage.MetricClientError();",
          "version": "1"
        },
        "java": {
          "source": "HttpApi api = new HttpApi(this, \"my-api\");\nHttpStage stage = HttpStage.Builder.create(this, \"Stage\")\n        .httpApi(api)\n        .build();\nMetric clientErrorMetric = stage.metricClientError();",
          "version": "1"
        },
        "$": {
          "source": "const api = new apigwv2.HttpApi(this, 'my-api');\nconst stage = new apigwv2.HttpStage(this, 'Stage', {\n  httpApi: api,\n});\nconst clientErrorMetric = stage.metricClientError();",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2"
        },
        "field": {
          "field": "markdown",
          "line": 302
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpStage",
        "@aws-cdk/aws-apigatewayv2.HttpStageProps",
        "@aws-cdk/aws-apigatewayv2.IHttpApi",
        "@aws-cdk/aws-cloudwatch.Metric"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst api = new apigwv2.HttpApi(this, 'my-api');\nconst stage = new apigwv2.HttpStage(this, 'Stage', {\n  httpApi: api,\n});\nconst clientErrorMetric = stage.metricClientError();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 11,
        "104": 2,
        "193": 1,
        "194": 3,
        "196": 1,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "281": 1
      },
      "fqnsFingerprint": "44856c7f51c18ec279fff3277566faf992e9ee301cff8b4619d68884911061b7"
    },
    "8b1f1a5bf03b771cdfb29d13ab46cf111917ca41eb5db56cc5519e6b29f371c5": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nvpc_link = apigwv2.VpcLink(self, \"VpcLink\", vpc=vpc)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nVpcLink vpcLink = new VpcLink(this, \"VpcLink\", new VpcLinkProps { Vpc = vpc });",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nVpcLink vpcLink = VpcLink.Builder.create(this, \"VpcLink\").vpc(vpc).build();",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst vpcLink = new apigwv2.VpcLink(this, 'VpcLink', { vpc });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2"
        },
        "field": {
          "field": "markdown",
          "line": 316
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.VpcLink",
        "@aws-cdk/aws-apigatewayv2.VpcLinkProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst vpcLink = new apigwv2.VpcLink(this, 'VpcLink', { vpc });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "104": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "4c778f5f8f82d7a2eb2c39c781f86739523ab669d4e6aa0b48d64e442bbe364b"
    },
    "f96a10bf87de14c0082e5afcdd1a0580db9dbd84abcacae16642946744f037bd": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\n\n# vpc is of type Vpc\n\nawesome_link = apigwv2.VpcLink.from_vpc_link_attributes(self, \"awesome-vpc-link\",\n    vpc_link_id=\"us-east-1_oiuR12Abd\",\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\n\nVpc vpc;\n\nIVpcLink awesomeLink = VpcLink.FromVpcLinkAttributes(this, \"awesome-vpc-link\", new VpcLinkAttributes {\n    VpcLinkId = \"us-east-1_oiuR12Abd\",\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\n\nVpc vpc;\n\nIVpcLink awesomeLink = VpcLink.fromVpcLinkAttributes(this, \"awesome-vpc-link\", VpcLinkAttributes.builder()\n        .vpcLinkId(\"us-east-1_oiuR12Abd\")\n        .vpc(vpc)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const vpc: ec2.Vpc;\nconst awesomeLink = apigwv2.VpcLink.fromVpcLinkAttributes(this, 'awesome-vpc-link', {\n  vpcLinkId: 'us-east-1_oiuR12Abd',\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2"
        },
        "field": {
          "field": "markdown",
          "line": 325
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.IVpcLink",
        "@aws-cdk/aws-apigatewayv2.VpcLink",
        "@aws-cdk/aws-apigatewayv2.VpcLink#fromVpcLinkAttributes",
        "@aws-cdk/aws-apigatewayv2.VpcLinkAttributes",
        "@aws-cdk/aws-ec2.IVpc"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst awesomeLink = apigwv2.VpcLink.fromVpcLinkAttributes(this, 'awesome-vpc-link', {\n  vpcLinkId: 'us-east-1_oiuR12Abd',\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a7c8a56d56779edbf3f86c010914d30f090d3a93bcc3a1016a6d0d38c78cfa32"
    },
    "3b7eecb845ed1654917e7b86e48ab66053a2b980c5b71d6ae879c809354986b3": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import WebSocketLambdaIntegration\n\n# connect_handler is of type Function\n# disconnect_handler is of type Function\n# default_handler is of type Function\n\n\nweb_socket_api = apigwv2.WebSocketApi(self, \"mywsapi\",\n    connect_route_options=apigwv2.WebSocketRouteOptions(integration=WebSocketLambdaIntegration(\"ConnectIntegration\", connect_handler)),\n    disconnect_route_options=apigwv2.WebSocketRouteOptions(integration=WebSocketLambdaIntegration(\"DisconnectIntegration\", disconnect_handler)),\n    default_route_options=apigwv2.WebSocketRouteOptions(integration=WebSocketLambdaIntegration(\"DefaultIntegration\", default_handler))\n)\n\napigwv2.WebSocketStage(self, \"mystage\",\n    web_socket_api=web_socket_api,\n    stage_name=\"dev\",\n    auto_deploy=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nFunction connectHandler;\nFunction disconnectHandler;\nFunction defaultHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\", new WebSocketApiProps {\n    ConnectRouteOptions = new WebSocketRouteOptions { Integration = new WebSocketLambdaIntegration(\"ConnectIntegration\", connectHandler) },\n    DisconnectRouteOptions = new WebSocketRouteOptions { Integration = new WebSocketLambdaIntegration(\"DisconnectIntegration\", disconnectHandler) },\n    DefaultRouteOptions = new WebSocketRouteOptions { Integration = new WebSocketLambdaIntegration(\"DefaultIntegration\", defaultHandler) }\n});\n\nnew WebSocketStage(this, \"mystage\", new WebSocketStageProps {\n    WebSocketApi = webSocketApi,\n    StageName = \"dev\",\n    AutoDeploy = true\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.WebSocketLambdaIntegration;\n\nFunction connectHandler;\nFunction disconnectHandler;\nFunction defaultHandler;\n\n\nWebSocketApi webSocketApi = WebSocketApi.Builder.create(this, \"mywsapi\")\n        .connectRouteOptions(WebSocketRouteOptions.builder().integration(new WebSocketLambdaIntegration(\"ConnectIntegration\", connectHandler)).build())\n        .disconnectRouteOptions(WebSocketRouteOptions.builder().integration(new WebSocketLambdaIntegration(\"DisconnectIntegration\", disconnectHandler)).build())\n        .defaultRouteOptions(WebSocketRouteOptions.builder().integration(new WebSocketLambdaIntegration(\"DefaultIntegration\", defaultHandler)).build())\n        .build();\n\nWebSocketStage.Builder.create(this, \"mystage\")\n        .webSocketApi(webSocketApi)\n        .stageName(\"dev\")\n        .autoDeploy(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const connectHandler: lambda.Function;\ndeclare const disconnectHandler: lambda.Function;\ndeclare const defaultHandler: lambda.Function;\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi', {\n  connectRouteOptions: { integration: new WebSocketLambdaIntegration('ConnectIntegration', connectHandler) },\n  disconnectRouteOptions: { integration: new WebSocketLambdaIntegration('DisconnectIntegration',disconnectHandler) },\n  defaultRouteOptions: { integration: new WebSocketLambdaIntegration('DefaultIntegration', defaultHandler) },\n});\n\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2"
        },
        "field": {
          "field": "markdown",
          "line": 361
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.WebSocketLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2.WebSocketApiProps",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteOptions",
        "@aws-cdk/aws-apigatewayv2.WebSocketStage",
        "@aws-cdk/aws-apigatewayv2.WebSocketStageProps",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const connectHandler: lambda.Function;\ndeclare const disconnectHandler: lambda.Function;\ndeclare const defaultHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi', {\n  connectRouteOptions: { integration: new WebSocketLambdaIntegration('ConnectIntegration', connectHandler) },\n  disconnectRouteOptions: { integration: new WebSocketLambdaIntegration('DisconnectIntegration',disconnectHandler) },\n  defaultRouteOptions: { integration: new WebSocketLambdaIntegration('DefaultIntegration', defaultHandler) },\n});\n\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 30,
        "104": 2,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 5,
        "194": 2,
        "197": 5,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 8,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "12c0978f68ba004764ab9a0edd65a07c8cab1960e3b01bf6a133b41864521018"
    },
    "c31f0b60e30084ea44d022f31ddf76f2dacab9b187e83ed0a39ae4aafc27ebf0": {
      "translations": {
        "python": {
          "source": "# web_socket_stage is of type WebSocketStage\n\n\nweb_socket_uRL = web_socket_stage.url\n# wss://${this.api.apiId}.execute-api.${s.region}.${s.urlSuffix}/${urlPath}\ncallback_uRL = web_socket_stage.callback_url",
          "version": "1"
        },
        "csharp": {
          "source": "WebSocketStage webSocketStage;\n\n\nstring webSocketURL = webSocketStage.Url;\n// wss://${this.api.apiId}.execute-api.${s.region}.${s.urlSuffix}/${urlPath}\nstring callbackURL = webSocketStage.CallbackUrl;",
          "version": "1"
        },
        "java": {
          "source": "WebSocketStage webSocketStage;\n\n\nString webSocketURL = webSocketStage.getUrl();\n// wss://${this.api.apiId}.execute-api.${s.region}.${s.urlSuffix}/${urlPath}\nString callbackURL = webSocketStage.getCallbackUrl();",
          "version": "1"
        },
        "$": {
          "source": "declare const webSocketStage: apigwv2.WebSocketStage;\n\nconst webSocketURL = webSocketStage.url;\n// wss://${this.api.apiId}.execute-api.${s.region}.${s.urlSuffix}/${urlPath}\nconst callbackURL = webSocketStage.callbackUrl;\n// https://${this.api.apiId}.execute-api.${s.region}.${s.urlSuffix}/${urlPath}",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2"
        },
        "field": {
          "field": "markdown",
          "line": 383
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const webSocketStage: apigwv2.WebSocketStage;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst webSocketURL = webSocketStage.url;\n// wss://${this.api.apiId}.execute-api.${s.region}.${s.urlSuffix}/${urlPath}\nconst callbackURL = webSocketStage.callbackUrl;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 9,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "325c63f2a25eb71d9812a4e6f40fa76a5d3701fcef9897da1366ea3f3ac4fefd": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import WebSocketLambdaIntegration\n\n# message_handler is of type Function\n\nweb_socket_api = apigwv2.WebSocketApi(self, \"mywsapi\")\nweb_socket_api.add_route(\"sendmessage\",\n    integration=WebSocketLambdaIntegration(\"SendMessageIntegration\", message_handler)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nFunction messageHandler;\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nwebSocketApi.AddRoute(\"sendmessage\", new WebSocketRouteOptions {\n    Integration = new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.WebSocketLambdaIntegration;\n\nFunction messageHandler;\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nwebSocketApi.addRoute(\"sendmessage\", WebSocketRouteOptions.builder()\n        .integration(new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const messageHandler: lambda.Function;\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2"
        },
        "field": {
          "field": "markdown",
          "line": 394
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.WebSocketLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2.WebSocketApi#addRoute",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteOptions",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const messageHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 1,
        "290": 1
      },
      "fqnsFingerprint": "e6be1584e048bf79013343463723d3a3d05022c1b4ad4668b1eb2412e6eb29d0"
    },
    "074cf589c1b8a3dbf476ef769d641cfcde85a3e62b6b6bc8f8dd00e3672131f2": {
      "translations": {
        "python": {
          "source": "lambda_ = lambda_.Function(self, \"lambda\")\n\nweb_socket_api = WebSocketApi(stack, \"mywsapi\")\nstage = WebSocketStage(stack, \"mystage\",\n    web_socket_api=web_socket_api,\n    stage_name=\"dev\"\n)\n# per stage permission\nstage.grant_manage_connections(lambda_)\n# for all the stages permission\nweb_socket_api.grant_manage_connections(lambda_)",
          "version": "1"
        },
        "csharp": {
          "source": "var lambda = new Function(this, \"lambda\", new Struct { });\n\nvar webSocketApi = new WebSocketApi(stack, \"mywsapi\");\nvar stage = new WebSocketStage(stack, \"mystage\", new Struct {\n    WebSocketApi = webSocketApi,\n    StageName = \"dev\"\n});\n// per stage permission\nstage.GrantManageConnections(lambda);\n// for all the stages permission\nwebSocketApi.GrantManageConnections(lambda);",
          "version": "1"
        },
        "java": {
          "source": "Object lambda = Function.Builder.create(this, \"lambda\").build();\n\nObject webSocketApi = new WebSocketApi(stack, \"mywsapi\");\nObject stage = WebSocketStage.Builder.create(stack, \"mystage\")\n        .webSocketApi(webSocketApi)\n        .stageName(\"dev\")\n        .build();\n// per stage permission\nstage.grantManageConnections(lambda);\n// for all the stages permission\nwebSocketApi.grantManageConnections(lambda);",
          "version": "1"
        },
        "$": {
          "source": "const lambda = new lambda.Function(this, 'lambda', { /* ... */ });\n\nconst webSocketApi = new WebSocketApi(stack, 'mywsapi');\nconst stage = new WebSocketStage(stack, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n});\n// per stage permission\nstage.grantManageConnections(lambda);\n// for all the stages permission\nwebSocketApi.grantManageConnections(lambda);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-apigatewayv2"
        },
        "field": {
          "field": "markdown",
          "line": 409
        }
      },
      "didCompile": false,
      "fqnsReferenced": [],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst lambda = new lambda.Function(this, 'lambda', { /* ... */ });\n\nconst webSocketApi = new WebSocketApi(stack, 'mywsapi');\nconst stage = new WebSocketStage(stack, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n});\n// per stage permission\nstage.grantManageConnections(lambda);\n// for all the stages permission\nwebSocketApi.grantManageConnections(lambda);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 1,
        "193": 2,
        "194": 3,
        "196": 2,
        "197": 3,
        "225": 3,
        "226": 2,
        "242": 3,
        "243": 3,
        "281": 1,
        "282": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "c571519eef2c510ab4b2638862f83f36fe2470751856586f0d3eab080da99952": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers import HttpLambdaAuthorizer, HttpLambdaResponseType\nfrom aws_cdk.aws_apigatewayv2_integrations import HttpUrlIntegration\n\n# This function handles your auth logic\n# auth_handler is of type Function\n\n\nauthorizer = HttpLambdaAuthorizer(\"BooksAuthorizer\", auth_handler,\n    response_types=[HttpLambdaResponseType.SIMPLE]\n)\n\napi = apigwv2.HttpApi(self, \"HttpApi\")\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    authorizer=authorizer\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Authorizers;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n// This function handles your auth logic\nFunction authHandler;\n\n\nHttpLambdaAuthorizer authorizer = new HttpLambdaAuthorizer(\"BooksAuthorizer\", authHandler, new HttpLambdaAuthorizerProps {\n    ResponseTypes = new [] { HttpLambdaResponseType.SIMPLE }\n});\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Authorizer = authorizer\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.HttpLambdaAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.authorizers.HttpLambdaResponseType;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpUrlIntegration;\n\n// This function handles your auth logic\nFunction authHandler;\n\n\nHttpLambdaAuthorizer authorizer = HttpLambdaAuthorizer.Builder.create(\"BooksAuthorizer\", authHandler)\n        .responseTypes(List.of(HttpLambdaResponseType.SIMPLE))\n        .build();\n\nHttpApi api = new HttpApi(this, \"HttpApi\");\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .authorizer(authorizer)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import { HttpLambdaAuthorizer, HttpLambdaResponseType } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n\nconst authorizer = new HttpLambdaAuthorizer('BooksAuthorizer', authHandler, {\n  responseTypes: [HttpLambdaResponseType.SIMPLE], // Define if returns simple and/or iam response\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.AddRoutesOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpLambdaResponseType#SIMPLE",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpUrlIntegration",
        "@aws-cdk/aws-apigatewayv2.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpLambdaAuthorizer, HttpLambdaResponseType } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\n// This function handles your auth logic\ndeclare const authHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst authorizer = new HttpLambdaAuthorizer('BooksAuthorizer', authHandler, {\n  responseTypes: [HttpLambdaResponseType.SIMPLE], // Define if returns simple and/or iam response\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi');\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  authorizer,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 3,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "fd69fe24e2047d8c16d082aa73cc2aa4a55a45649bc657cbc758beb637f7e6df"
    },
    "9fdaefc09b1e09a6b501fc7e8045fd38e2d94356ebe04f9989df51096149e0a8": {
      "translations": {
        "python": {
          "source": "apigwv2.HttpApi(self, \"HttpProxyApi\",\n    cors_preflight=apigwv2.CorsPreflightOptions(\n        allow_headers=[\"Authorization\"],\n        allow_methods=[apigwv2.CorsHttpMethod.GET, apigwv2.CorsHttpMethod.HEAD, apigwv2.CorsHttpMethod.OPTIONS, apigwv2.CorsHttpMethod.POST\n        ],\n        allow_origins=[\"*\"],\n        max_age=Duration.days(10)\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new HttpApi(this, \"HttpProxyApi\", new HttpApiProps {\n    CorsPreflight = new CorsPreflightOptions {\n        AllowHeaders = new [] { \"Authorization\" },\n        AllowMethods = new [] { CorsHttpMethod.GET, CorsHttpMethod.HEAD, CorsHttpMethod.OPTIONS, CorsHttpMethod.POST },\n        AllowOrigins = new [] { \"*\" },\n        MaxAge = Duration.Days(10)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "HttpApi.Builder.create(this, \"HttpProxyApi\")\n        .corsPreflight(CorsPreflightOptions.builder()\n                .allowHeaders(List.of(\"Authorization\"))\n                .allowMethods(List.of(CorsHttpMethod.GET, CorsHttpMethod.HEAD, CorsHttpMethod.OPTIONS, CorsHttpMethod.POST))\n                .allowOrigins(List.of(\"*\"))\n                .maxAge(Duration.days(10))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new apigwv2.HttpApi(this, 'HttpProxyApi', {\n  corsPreflight: {\n    allowHeaders: ['Authorization'],\n    allowMethods: [\n      apigwv2.CorsHttpMethod.GET,\n      apigwv2.CorsHttpMethod.HEAD,\n      apigwv2.CorsHttpMethod.OPTIONS,\n      apigwv2.CorsHttpMethod.POST,\n    ],\n    allowOrigins: ['*'],\n    maxAge: Duration.days(10),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.CorsHttpMethod"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.CorsHttpMethod",
        "@aws-cdk/aws-apigatewayv2.CorsHttpMethod#GET",
        "@aws-cdk/aws-apigatewayv2.CorsHttpMethod#HEAD",
        "@aws-cdk/aws-apigatewayv2.CorsHttpMethod#OPTIONS",
        "@aws-cdk/aws-apigatewayv2.CorsHttpMethod#POST",
        "@aws-cdk/aws-apigatewayv2.CorsPreflightOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew apigwv2.HttpApi(this, 'HttpProxyApi', {\n  corsPreflight: {\n    allowHeaders: ['Authorization'],\n    allowMethods: [\n      apigwv2.CorsHttpMethod.GET,\n      apigwv2.CorsHttpMethod.HEAD,\n      apigwv2.CorsHttpMethod.OPTIONS,\n      apigwv2.CorsHttpMethod.POST,\n    ],\n    allowOrigins: ['*'],\n    maxAge: Duration.days(10),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 21,
        "104": 1,
        "192": 3,
        "193": 2,
        "194": 10,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "b4c7d06b960c4791f1f5f87ed92ead3cc8e5d2c7a4d38d68003687492730984c"
    },
    "5921b3145fddbed0ef1078ad0601b19619e3c75b8ff50eb91da3c3d133eda3c5": {
      "translations": {
        "python": {
          "source": "apigwv2.HttpApi(self, \"HttpProxyApi\",\n    cors_preflight=apigwv2.CorsPreflightOptions(\n        allow_headers=[\"Authorization\"],\n        allow_methods=[apigwv2.CorsHttpMethod.GET, apigwv2.CorsHttpMethod.HEAD, apigwv2.CorsHttpMethod.OPTIONS, apigwv2.CorsHttpMethod.POST\n        ],\n        allow_origins=[\"*\"],\n        max_age=Duration.days(10)\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "new HttpApi(this, \"HttpProxyApi\", new HttpApiProps {\n    CorsPreflight = new CorsPreflightOptions {\n        AllowHeaders = new [] { \"Authorization\" },\n        AllowMethods = new [] { CorsHttpMethod.GET, CorsHttpMethod.HEAD, CorsHttpMethod.OPTIONS, CorsHttpMethod.POST },\n        AllowOrigins = new [] { \"*\" },\n        MaxAge = Duration.Days(10)\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "HttpApi.Builder.create(this, \"HttpProxyApi\")\n        .corsPreflight(CorsPreflightOptions.builder()\n                .allowHeaders(List.of(\"Authorization\"))\n                .allowMethods(List.of(CorsHttpMethod.GET, CorsHttpMethod.HEAD, CorsHttpMethod.OPTIONS, CorsHttpMethod.POST))\n                .allowOrigins(List.of(\"*\"))\n                .maxAge(Duration.days(10))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "new apigwv2.HttpApi(this, 'HttpProxyApi', {\n  corsPreflight: {\n    allowHeaders: ['Authorization'],\n    allowMethods: [\n      apigwv2.CorsHttpMethod.GET,\n      apigwv2.CorsHttpMethod.HEAD,\n      apigwv2.CorsHttpMethod.OPTIONS,\n      apigwv2.CorsHttpMethod.POST,\n    ],\n    allowOrigins: ['*'],\n    maxAge: Duration.days(10),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.CorsPreflightOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.CorsHttpMethod",
        "@aws-cdk/aws-apigatewayv2.CorsHttpMethod#GET",
        "@aws-cdk/aws-apigatewayv2.CorsHttpMethod#HEAD",
        "@aws-cdk/aws-apigatewayv2.CorsHttpMethod#OPTIONS",
        "@aws-cdk/aws-apigatewayv2.CorsHttpMethod#POST",
        "@aws-cdk/aws-apigatewayv2.CorsPreflightOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#days"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nnew apigwv2.HttpApi(this, 'HttpProxyApi', {\n  corsPreflight: {\n    allowHeaders: ['Authorization'],\n    allowMethods: [\n      apigwv2.CorsHttpMethod.GET,\n      apigwv2.CorsHttpMethod.HEAD,\n      apigwv2.CorsHttpMethod.OPTIONS,\n      apigwv2.CorsHttpMethod.POST,\n    ],\n    allowOrigins: ['*'],\n    maxAge: Duration.days(10),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 3,
        "75": 21,
        "104": 1,
        "192": 3,
        "193": 2,
        "194": 10,
        "196": 1,
        "197": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "b4c7d06b960c4791f1f5f87ed92ead3cc8e5d2c7a4d38d68003687492730984c"
    },
    "ea4d8fd08bdb825d3e1041f28a4716dcf1753a1ef7f6bb87dafa638809602bfd": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpLambdaIntegration\n\n# handler is of type Function\n# dn is of type DomainName\n\n\napi_demo = apigwv2.HttpApi(self, \"DemoApi\",\n    default_integration=HttpLambdaIntegration(\"DefaultIntegration\", handler),\n    # https://${dn.domainName}/demo goes to apiDemo $default stage\n    default_domain_mapping=apigwv2.DomainMappingOptions(\n        domain_name=dn,\n        mapping_key=\"demo\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nFunction handler;\nDomainName dn;\n\n\nHttpApi apiDemo = new HttpApi(this, \"DemoApi\", new HttpApiProps {\n    DefaultIntegration = new HttpLambdaIntegration(\"DefaultIntegration\", handler),\n    // https://${dn.domainName}/demo goes to apiDemo $default stage\n    DefaultDomainMapping = new DomainMappingOptions {\n        DomainName = dn,\n        MappingKey = \"demo\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpLambdaIntegration;\n\nFunction handler;\nDomainName dn;\n\n\nHttpApi apiDemo = HttpApi.Builder.create(this, \"DemoApi\")\n        .defaultIntegration(new HttpLambdaIntegration(\"DefaultIntegration\", handler))\n        // https://${dn.domainName}/demo goes to apiDemo $default stage\n        .defaultDomainMapping(DomainMappingOptions.builder()\n                .domainName(dn)\n                .mappingKey(\"demo\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const handler: lambda.Function;\ndeclare const dn: apigwv2.DomainName;\n\nconst apiDemo = new apigwv2.HttpApi(this, 'DemoApi', {\n  defaultIntegration: new HttpLambdaIntegration('DefaultIntegration', handler),\n  // https://${dn.domainName}/demo goes to apiDemo $default stage\n  defaultDomainMapping: {\n    domainName: dn,\n    mappingKey: 'demo',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.DomainMappingOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2.DomainMappingOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IDomainName",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const handler: lambda.Function;\ndeclare const dn: apigwv2.DomainName;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst apiDemo = new apigwv2.HttpApi(this, 'DemoApi', {\n  defaultIntegration: new HttpLambdaIntegration('DefaultIntegration', handler),\n  // https://${dn.domainName}/demo goes to apiDemo $default stage\n  defaultDomainMapping: {\n    domainName: dn,\n    mappingKey: 'demo',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 17,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 1,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "d8b1287690543b52ebb8fae62d3dad01ef8ecfee3653fcdd8ac61012a38038d8"
    },
    "fb2c9c8a8287287fcf57bbe656a747f060614e405d974c67b0bd19a8a881c835": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_certificatemanager as acm\nfrom aws_cdk.aws_apigatewayv2_integrations import HttpLambdaIntegration\n\n# handler is of type Function\n\n\ncert_arn = \"arn:aws:acm:us-east-1:111111111111:certificate\"\ndomain_name = \"example.com\"\n\ndn = apigwv2.DomainName(self, \"DN\",\n    domain_name=domain_name,\n    certificate=acm.Certificate.from_certificate_arn(self, \"cert\", cert_arn)\n)\napi = apigwv2.HttpApi(self, \"HttpProxyProdApi\",\n    default_integration=HttpLambdaIntegration(\"DefaultIntegration\", handler),\n    # https://${dn.domainName}/foo goes to prodApi $default stage\n    default_domain_mapping=apigwv2.DomainMappingOptions(\n        domain_name=dn,\n        mapping_key=\"foo\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nFunction handler;\n\n\nstring certArn = \"arn:aws:acm:us-east-1:111111111111:certificate\";\nstring domainName = \"example.com\";\n\nDomainName dn = new DomainName(this, \"DN\", new DomainNameProps {\n    DomainName = domainName,\n    Certificate = Certificate.FromCertificateArn(this, \"cert\", certArn)\n});\nHttpApi api = new HttpApi(this, \"HttpProxyProdApi\", new HttpApiProps {\n    DefaultIntegration = new HttpLambdaIntegration(\"DefaultIntegration\", handler),\n    // https://${dn.domainName}/foo goes to prodApi $default stage\n    DefaultDomainMapping = new DomainMappingOptions {\n        DomainName = dn,\n        MappingKey = \"foo\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpLambdaIntegration;\n\nFunction handler;\n\n\nString certArn = \"arn:aws:acm:us-east-1:111111111111:certificate\";\nString domainName = \"example.com\";\n\nDomainName dn = DomainName.Builder.create(this, \"DN\")\n        .domainName(domainName)\n        .certificate(Certificate.fromCertificateArn(this, \"cert\", certArn))\n        .build();\nHttpApi api = HttpApi.Builder.create(this, \"HttpProxyProdApi\")\n        .defaultIntegration(new HttpLambdaIntegration(\"DefaultIntegration\", handler))\n        // https://${dn.domainName}/foo goes to prodApi $default stage\n        .defaultDomainMapping(DomainMappingOptions.builder()\n                .domainName(dn)\n                .mappingKey(\"foo\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as acm from '@aws-cdk/aws-certificatemanager';\nimport { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst certArn = 'arn:aws:acm:us-east-1:111111111111:certificate';\nconst domainName = 'example.com';\n\nconst dn = new apigwv2.DomainName(this, 'DN', {\n  domainName,\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', certArn),\n});\n\ndeclare const handler: lambda.Function;\nconst api = new apigwv2.HttpApi(this, 'HttpProxyProdApi', {\n  defaultIntegration: new HttpLambdaIntegration('DefaultIntegration', handler),\n  // https://${dn.domainName}/foo goes to prodApi $default stage\n  defaultDomainMapping: {\n    domainName: dn,\n    mappingKey: 'foo',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.DomainName"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2.DomainMappingOptions",
        "@aws-cdk/aws-apigatewayv2.DomainName",
        "@aws-cdk/aws-apigatewayv2.DomainNameProps",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IDomainName",
        "@aws-cdk/aws-certificatemanager.Certificate",
        "@aws-cdk/aws-certificatemanager.Certificate#fromCertificateArn",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst certArn = 'arn:aws:acm:us-east-1:111111111111:certificate';\nconst domainName = 'example.com';\n\nconst dn = new apigwv2.DomainName(this, 'DN', {\n  domainName,\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', certArn),\n});\nconst api = new apigwv2.HttpApi(this, 'HttpProxyProdApi', {\n  defaultIntegration: new HttpLambdaIntegration('DefaultIntegration', handler),\n  // https://${dn.domainName}/foo goes to prodApi $default stage\n  defaultDomainMapping: {\n    domainName: dn,\n    mappingKey: 'foo',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 26,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "093f9e577d2f45b0529be75a3fb8290fc9b95a009977f98f94bd52a569b2ee68"
    },
    "f447c6396247e83c25d5b06ad004f7488cf102c7e4c2d568bae117a20ac1d171": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_certificatemanager as acm\nfrom aws_cdk.aws_apigatewayv2_integrations import HttpLambdaIntegration\n\n# handler is of type Function\n\n\ncert_arn = \"arn:aws:acm:us-east-1:111111111111:certificate\"\ndomain_name = \"example.com\"\n\ndn = apigwv2.DomainName(self, \"DN\",\n    domain_name=domain_name,\n    certificate=acm.Certificate.from_certificate_arn(self, \"cert\", cert_arn)\n)\napi = apigwv2.HttpApi(self, \"HttpProxyProdApi\",\n    default_integration=HttpLambdaIntegration(\"DefaultIntegration\", handler),\n    # https://${dn.domainName}/foo goes to prodApi $default stage\n    default_domain_mapping=apigwv2.DomainMappingOptions(\n        domain_name=dn,\n        mapping_key=\"foo\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.CertificateManager;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nFunction handler;\n\n\nstring certArn = \"arn:aws:acm:us-east-1:111111111111:certificate\";\nstring domainName = \"example.com\";\n\nDomainName dn = new DomainName(this, \"DN\", new DomainNameProps {\n    DomainName = domainName,\n    Certificate = Certificate.FromCertificateArn(this, \"cert\", certArn)\n});\nHttpApi api = new HttpApi(this, \"HttpProxyProdApi\", new HttpApiProps {\n    DefaultIntegration = new HttpLambdaIntegration(\"DefaultIntegration\", handler),\n    // https://${dn.domainName}/foo goes to prodApi $default stage\n    DefaultDomainMapping = new DomainMappingOptions {\n        DomainName = dn,\n        MappingKey = \"foo\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.certificatemanager.*;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpLambdaIntegration;\n\nFunction handler;\n\n\nString certArn = \"arn:aws:acm:us-east-1:111111111111:certificate\";\nString domainName = \"example.com\";\n\nDomainName dn = DomainName.Builder.create(this, \"DN\")\n        .domainName(domainName)\n        .certificate(Certificate.fromCertificateArn(this, \"cert\", certArn))\n        .build();\nHttpApi api = HttpApi.Builder.create(this, \"HttpProxyProdApi\")\n        .defaultIntegration(new HttpLambdaIntegration(\"DefaultIntegration\", handler))\n        // https://${dn.domainName}/foo goes to prodApi $default stage\n        .defaultDomainMapping(DomainMappingOptions.builder()\n                .domainName(dn)\n                .mappingKey(\"foo\")\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as acm from '@aws-cdk/aws-certificatemanager';\nimport { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst certArn = 'arn:aws:acm:us-east-1:111111111111:certificate';\nconst domainName = 'example.com';\n\nconst dn = new apigwv2.DomainName(this, 'DN', {\n  domainName,\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', certArn),\n});\n\ndeclare const handler: lambda.Function;\nconst api = new apigwv2.HttpApi(this, 'HttpProxyProdApi', {\n  defaultIntegration: new HttpLambdaIntegration('DefaultIntegration', handler),\n  // https://${dn.domainName}/foo goes to prodApi $default stage\n  defaultDomainMapping: {\n    domainName: dn,\n    mappingKey: 'foo',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.DomainNameProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2.DomainMappingOptions",
        "@aws-cdk/aws-apigatewayv2.DomainName",
        "@aws-cdk/aws-apigatewayv2.DomainNameProps",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IDomainName",
        "@aws-cdk/aws-certificatemanager.Certificate",
        "@aws-cdk/aws-certificatemanager.Certificate#fromCertificateArn",
        "@aws-cdk/aws-certificatemanager.ICertificate",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as acm from '@aws-cdk/aws-certificatemanager';\nimport { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const handler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst certArn = 'arn:aws:acm:us-east-1:111111111111:certificate';\nconst domainName = 'example.com';\n\nconst dn = new apigwv2.DomainName(this, 'DN', {\n  domainName,\n  certificate: acm.Certificate.fromCertificateArn(this, 'cert', certArn),\n});\nconst api = new apigwv2.HttpApi(this, 'HttpProxyProdApi', {\n  defaultIntegration: new HttpLambdaIntegration('DefaultIntegration', handler),\n  // https://${dn.domainName}/foo goes to prodApi $default stage\n  defaultDomainMapping: {\n    domainName: dn,\n    mappingKey: 'foo',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 9,
        "75": 26,
        "104": 3,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 3,
        "194": 4,
        "196": 1,
        "197": 3,
        "225": 5,
        "242": 5,
        "243": 5,
        "254": 2,
        "255": 2,
        "256": 1,
        "257": 1,
        "258": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "093f9e577d2f45b0529be75a3fb8290fc9b95a009977f98f94bd52a569b2ee68"
    },
    "7b435ef959740eafb720fe73155b4a3698219c939d2210ba28498fdcafd913a1": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpLambdaIntegration\n\n# books_default_fn is of type Function\n\nbooks_integration = HttpLambdaIntegration(\"BooksIntegration\", books_default_fn)\n\nhttp_api = apigwv2.HttpApi(self, \"HttpApi\")\n\nhttp_api.add_routes(\n    path=\"/books\",\n    methods=[apigwv2.HttpMethod.GET],\n    integration=books_integration\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nFunction booksDefaultFn;\n\nHttpLambdaIntegration booksIntegration = new HttpLambdaIntegration(\"BooksIntegration\", booksDefaultFn);\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\");\n\nhttpApi.AddRoutes(new AddRoutesOptions {\n    Path = \"/books\",\n    Methods = new [] { HttpMethod.GET },\n    Integration = booksIntegration\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpLambdaIntegration;\n\nFunction booksDefaultFn;\n\nHttpLambdaIntegration booksIntegration = new HttpLambdaIntegration(\"BooksIntegration\", booksDefaultFn);\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\");\n\nhttpApi.addRoutes(AddRoutesOptions.builder()\n        .path(\"/books\")\n        .methods(List.of(HttpMethod.GET))\n        .integration(booksIntegration)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const booksDefaultFn: lambda.Function;\nconst booksIntegration = new HttpLambdaIntegration('BooksIntegration', booksDefaultFn);\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi');\n\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.GET ],\n  integration: booksIntegration,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.HttpApi"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2.HttpMethod",
        "@aws-cdk/aws-apigatewayv2.HttpMethod#GET",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const booksDefaultFn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst booksIntegration = new HttpLambdaIntegration('BooksIntegration', booksDefaultFn);\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi');\n\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.GET ],\n  integration: booksIntegration,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 19,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 1,
        "194": 4,
        "196": 1,
        "197": 2,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "439a55bb1456d290f74c9da9518c496ad3f5207328f9aab072d599b0788efd2e"
    },
    "25981b5a69c1c7b977d06c6f13a63037d137c7dcc8927924f41619719d17f925": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpAlbIntegration\n\n# lb is of type ApplicationLoadBalancer\n\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpAlbIntegration(\"DefaultIntegration\", listener,\n        parameter_mapping=apigwv2.ParameterMapping().custom(\"myKey\", \"myValue\")\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.AddListener(\"listener\", new BaseApplicationListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddApplicationTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpAlbIntegration(\"DefaultIntegration\", listener, new HttpAlbIntegrationProps {\n        ParameterMapping = new ParameterMapping().Custom(\"myKey\", \"myValue\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpAlbIntegration;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.addListener(\"listener\", BaseApplicationListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddApplicationTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(HttpAlbIntegration.Builder.create(\"DefaultIntegration\", listener)\n                .parameterMapping(new ParameterMapping().custom(\"myKey\", \"myValue\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping().custom('myKey', 'myValue'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.HttpApiProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegrationProps",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping#custom",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationListener"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping().custom('myKey', 'myValue'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 5,
        "196": 3,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "f5caa4bd8a55b8380440a13117ec5761b476fd946cf19d37e80ffafb7fbc5a0c"
    },
    "e217a946c7a78f56f903c8594971dc9e6dcc31ab4c5e5da67920f73fb9fc34b0": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpUrlIntegration, HttpLambdaIntegration\n\n# books_default_fn is of type Function\n\n\nget_books_integration = HttpUrlIntegration(\"GetBooksIntegration\", \"https://get-books-proxy.myproxy.internal\")\nbooks_default_integration = HttpLambdaIntegration(\"BooksIntegration\", books_default_fn)\n\nhttp_api = apigwv2.HttpApi(self, \"HttpApi\")\n\nhttp_api.add_routes(\n    path=\"/books\",\n    methods=[apigwv2.HttpMethod.GET],\n    integration=get_books_integration\n)\nhttp_api.add_routes(\n    path=\"/books\",\n    methods=[apigwv2.HttpMethod.ANY],\n    integration=books_default_integration\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nFunction booksDefaultFn;\n\n\nHttpUrlIntegration getBooksIntegration = new HttpUrlIntegration(\"GetBooksIntegration\", \"https://get-books-proxy.myproxy.internal\");\nHttpLambdaIntegration booksDefaultIntegration = new HttpLambdaIntegration(\"BooksIntegration\", booksDefaultFn);\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\");\n\nhttpApi.AddRoutes(new AddRoutesOptions {\n    Path = \"/books\",\n    Methods = new [] { HttpMethod.GET },\n    Integration = getBooksIntegration\n});\nhttpApi.AddRoutes(new AddRoutesOptions {\n    Path = \"/books\",\n    Methods = new [] { HttpMethod.ANY },\n    Integration = booksDefaultIntegration\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpUrlIntegration;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpLambdaIntegration;\n\nFunction booksDefaultFn;\n\n\nHttpUrlIntegration getBooksIntegration = new HttpUrlIntegration(\"GetBooksIntegration\", \"https://get-books-proxy.myproxy.internal\");\nHttpLambdaIntegration booksDefaultIntegration = new HttpLambdaIntegration(\"BooksIntegration\", booksDefaultFn);\n\nHttpApi httpApi = new HttpApi(this, \"HttpApi\");\n\nhttpApi.addRoutes(AddRoutesOptions.builder()\n        .path(\"/books\")\n        .methods(List.of(HttpMethod.GET))\n        .integration(getBooksIntegration)\n        .build());\nhttpApi.addRoutes(AddRoutesOptions.builder()\n        .path(\"/books\")\n        .methods(List.of(HttpMethod.ANY))\n        .integration(booksDefaultIntegration)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import { HttpUrlIntegration, HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst getBooksIntegration = new HttpUrlIntegration('GetBooksIntegration' 'https://get-books-proxy.myproxy.internal');\n\ndeclare const booksDefaultFn: lambda.Function;\nconst booksDefaultIntegration = new HttpLambdaIntegration('BooksIntegration', booksDefaultFn);\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi');\n\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.GET ],\n  integration: getBooksIntegration,\n});\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.ANY ],\n  integration: booksDefaultIntegration,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.HttpMethod"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": false,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpUrlIntegration",
        "@aws-cdk/aws-apigatewayv2.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2.HttpMethod",
        "@aws-cdk/aws-apigatewayv2.HttpMethod#ANY",
        "@aws-cdk/aws-apigatewayv2.HttpMethod#GET",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpUrlIntegration, HttpLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const booksDefaultFn: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst getBooksIntegration = new HttpUrlIntegration('GetBooksIntegration' 'https://get-books-proxy.myproxy.internal');\nconst booksDefaultIntegration = new HttpLambdaIntegration('BooksIntegration', booksDefaultFn);\n\nconst httpApi = new apigwv2.HttpApi(this, 'HttpApi');\n\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.GET ],\n  integration: getBooksIntegration,\n});\nhttpApi.addRoutes({\n  path: '/books',\n  methods: [ apigwv2.HttpMethod.ANY ],\n  integration: booksDefaultIntegration,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 31,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 2,
        "194": 7,
        "196": 2,
        "197": 3,
        "225": 4,
        "226": 2,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 2,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "6ff8ee6259d4246ff9a9f092309dca848284539123bbea51e17badc21a86db05"
    },
    "84d34dfa21fe6871c4eb0e7e16009df2365c509e9ff036c4ed06c8df5183952f": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_authorizers import HttpJwtAuthorizer\nfrom aws_cdk.aws_apigatewayv2_integrations import HttpUrlIntegration\n\n\nissuer = \"https://test.us.auth0.com\"\nauthorizer = HttpJwtAuthorizer(\"DefaultAuthorizer\", issuer,\n    jwt_audience=[\"3131231\"]\n)\n\napi = apigwv2.HttpApi(self, \"HttpApi\",\n    default_authorizer=authorizer,\n    default_authorization_scopes=[\"read:books\"]\n)\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    methods=[apigwv2.HttpMethod.GET]\n)\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIdIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books/{id}\",\n    methods=[apigwv2.HttpMethod.GET]\n)\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/books\",\n    methods=[apigwv2.HttpMethod.POST],\n    authorization_scopes=[\"write:books\"]\n)\n\napi.add_routes(\n    integration=HttpUrlIntegration(\"LoginIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    path=\"/login\",\n    methods=[apigwv2.HttpMethod.POST],\n    authorizer=apigwv2.HttpNoneAuthorizer()\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Authorizers;\nusing Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\n\nstring issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = new HttpJwtAuthorizer(\"DefaultAuthorizer\", issuer, new HttpJwtAuthorizerProps {\n    JwtAudience = new [] { \"3131231\" }\n});\n\nHttpApi api = new HttpApi(this, \"HttpApi\", new HttpApiProps {\n    DefaultAuthorizer = authorizer,\n    DefaultAuthorizationScopes = new [] { \"read:books\" }\n});\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Methods = new [] { HttpMethod.GET }\n});\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIdIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books/{id}\",\n    Methods = new [] { HttpMethod.GET }\n});\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/books\",\n    Methods = new [] { HttpMethod.POST },\n    AuthorizationScopes = new [] { \"write:books\" }\n});\n\napi.AddRoutes(new AddRoutesOptions {\n    Integration = new HttpUrlIntegration(\"LoginIntegration\", \"https://get-books-proxy.myproxy.internal\"),\n    Path = \"/login\",\n    Methods = new [] { HttpMethod.POST },\n    Authorizer = new HttpNoneAuthorizer()\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.authorizers.HttpJwtAuthorizer;\nimport software.amazon.awscdk.services.apigatewayv2.integrations.HttpUrlIntegration;\n\n\nString issuer = \"https://test.us.auth0.com\";\nHttpJwtAuthorizer authorizer = HttpJwtAuthorizer.Builder.create(\"DefaultAuthorizer\", issuer)\n        .jwtAudience(List.of(\"3131231\"))\n        .build();\n\nHttpApi api = HttpApi.Builder.create(this, \"HttpApi\")\n        .defaultAuthorizer(authorizer)\n        .defaultAuthorizationScopes(List.of(\"read:books\"))\n        .build();\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .methods(List.of(HttpMethod.GET))\n        .build());\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIdIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books/{id}\")\n        .methods(List.of(HttpMethod.GET))\n        .build());\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"BooksIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/books\")\n        .methods(List.of(HttpMethod.POST))\n        .authorizationScopes(List.of(\"write:books\"))\n        .build());\n\napi.addRoutes(AddRoutesOptions.builder()\n        .integration(new HttpUrlIntegration(\"LoginIntegration\", \"https://get-books-proxy.myproxy.internal\"))\n        .path(\"/login\")\n        .methods(List.of(HttpMethod.POST))\n        .authorizer(new HttpNoneAuthorizer())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('DefaultAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n  defaultAuthorizationScopes: ['read:books'],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  methods: [apigwv2.HttpMethod.GET],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIdIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books/{id}',\n  methods: [apigwv2.HttpMethod.GET],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  methods: [apigwv2.HttpMethod.POST],\n  authorizationScopes: ['write:books']\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('LoginIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/login',\n  methods: [apigwv2.HttpMethod.POST],\n  authorizer: new apigwv2.HttpNoneAuthorizer(),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.HttpNoneAuthorizer"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpJwtAuthorizer",
        "@aws-cdk/aws-apigatewayv2-authorizers.HttpJwtAuthorizerProps",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpUrlIntegration",
        "@aws-cdk/aws-apigatewayv2.AddRoutesOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addRoutes",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpMethod",
        "@aws-cdk/aws-apigatewayv2.HttpMethod#GET",
        "@aws-cdk/aws-apigatewayv2.HttpMethod#POST",
        "@aws-cdk/aws-apigatewayv2.HttpNoneAuthorizer",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.IHttpRouteAuthorizer"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpJwtAuthorizer } from '@aws-cdk/aws-apigatewayv2-authorizers';\nimport { HttpUrlIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst issuer = 'https://test.us.auth0.com';\nconst authorizer = new HttpJwtAuthorizer('DefaultAuthorizer', issuer, {\n  jwtAudience: ['3131231'],\n});\n\nconst api = new apigwv2.HttpApi(this, 'HttpApi', {\n  defaultAuthorizer: authorizer,\n  defaultAuthorizationScopes: ['read:books'],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  methods: [apigwv2.HttpMethod.GET],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIdIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books/{id}',\n  methods: [apigwv2.HttpMethod.GET],\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('BooksIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/books',\n  methods: [apigwv2.HttpMethod.POST],\n  authorizationScopes: ['write:books']\n});\n\napi.addRoutes({\n  integration: new HttpUrlIntegration('LoginIntegration', 'https://get-books-proxy.myproxy.internal'),\n  path: '/login',\n  methods: [apigwv2.HttpMethod.POST],\n  authorizer: new apigwv2.HttpNoneAuthorizer(),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 20,
        "75": 53,
        "104": 1,
        "192": 7,
        "193": 6,
        "194": 14,
        "196": 4,
        "197": 7,
        "225": 3,
        "226": 4,
        "242": 3,
        "243": 3,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "281": 17,
        "290": 1
      },
      "fqnsFingerprint": "23f5438e43f83c7d608b30aa505742c0659d192b673ac3c0aa826724e0084348"
    },
    "46e206b7c3db947eaa44f75021eb23f68478b3dc368ce1b2e90726d1175c7831": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpAlbIntegration\n\n# lb is of type ApplicationLoadBalancer\n\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpAlbIntegration(\"DefaultIntegration\", listener,\n        parameter_mapping=apigwv2.ParameterMapping().custom(\"myKey\", \"myValue\")\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.AddListener(\"listener\", new BaseApplicationListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddApplicationTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpAlbIntegration(\"DefaultIntegration\", listener, new HttpAlbIntegrationProps {\n        ParameterMapping = new ParameterMapping().Custom(\"myKey\", \"myValue\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpAlbIntegration;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.addListener(\"listener\", BaseApplicationListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddApplicationTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(HttpAlbIntegration.Builder.create(\"DefaultIntegration\", listener)\n                .parameterMapping(new ParameterMapping().custom(\"myKey\", \"myValue\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping().custom('myKey', 'myValue'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegrationProps",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping#custom",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationListener"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping().custom('myKey', 'myValue'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 7,
        "75": 21,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 5,
        "196": 3,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "f5caa4bd8a55b8380440a13117ec5761b476fd946cf19d37e80ffafb7fbc5a0c"
    },
    "9f62c2cc083466c6f14c862fc501ae4ed9b6c0019e25b3bd3bd9fbf9d5162096": {
      "translations": {
        "python": {
          "source": "# api is of type HttpApi\n\n\napigwv2.HttpStage(self, \"Stage\",\n    http_api=api,\n    stage_name=\"beta\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "HttpApi api;\n\n\nnew HttpStage(this, \"Stage\", new HttpStageProps {\n    HttpApi = api,\n    StageName = \"beta\"\n});",
          "version": "1"
        },
        "java": {
          "source": "HttpApi api;\n\n\nHttpStage.Builder.create(this, \"Stage\")\n        .httpApi(api)\n        .stageName(\"beta\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigwv2.HttpApi;\n\nnew apigwv2.HttpStage(this, 'Stage', {\n  httpApi: api,\n  stageName: 'beta',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.HttpStage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.HttpStage",
        "@aws-cdk/aws-apigatewayv2.HttpStageProps",
        "@aws-cdk/aws-apigatewayv2.IHttpApi"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigwv2.HttpApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigwv2.HttpStage(this, 'Stage', {\n  httpApi: api,\n  stageName: 'beta',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "6e2325b335e7f247f20e3d2dcf72408dd033caccb9f56d3d43ccc5847c835deb"
    },
    "ad1bf3c7051fe3b61d1a2625ebcec9ff306fa508a75e8955b67a4fb3b346a733": {
      "translations": {
        "python": {
          "source": "# api is of type HttpApi\n# dn is of type DomainName\n\n\napi.add_stage(\"beta\",\n    stage_name=\"beta\",\n    auto_deploy=True,\n    # https://${dn.domainName}/bar goes to the beta stage\n    domain_mapping=apigwv2.DomainMappingOptions(\n        domain_name=dn,\n        mapping_key=\"bar\"\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "HttpApi api;\nDomainName dn;\n\n\napi.AddStage(\"beta\", new HttpStageOptions {\n    StageName = \"beta\",\n    AutoDeploy = true,\n    // https://${dn.domainName}/bar goes to the beta stage\n    DomainMapping = new DomainMappingOptions {\n        DomainName = dn,\n        MappingKey = \"bar\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "HttpApi api;\nDomainName dn;\n\n\napi.addStage(\"beta\", HttpStageOptions.builder()\n        .stageName(\"beta\")\n        .autoDeploy(true)\n        // https://${dn.domainName}/bar goes to the beta stage\n        .domainMapping(DomainMappingOptions.builder()\n                .domainName(dn)\n                .mappingKey(\"bar\")\n                .build())\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigwv2.HttpApi;\ndeclare const dn: apigwv2.DomainName;\n\napi.addStage('beta', {\n  stageName: 'beta',\n  autoDeploy: true,\n  // https://${dn.domainName}/bar goes to the beta stage\n  domainMapping: {\n    domainName: dn,\n    mappingKey: 'bar',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.HttpStageOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.DomainMappingOptions",
        "@aws-cdk/aws-apigatewayv2.HttpApi#addStage",
        "@aws-cdk/aws-apigatewayv2.HttpStageOptions",
        "@aws-cdk/aws-apigatewayv2.IDomainName"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigwv2.HttpApi;\ndeclare const dn: apigwv2.DomainName;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\napi.addStage('beta', {\n  stageName: 'beta',\n  autoDeploy: true,\n  // https://${dn.domainName}/bar goes to the beta stage\n  domainMapping: {\n    domainName: dn,\n    mappingKey: 'bar',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 14,
        "106": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "193": 2,
        "194": 1,
        "196": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 5,
        "290": 1
      },
      "fqnsFingerprint": "914369adea98cfde5709465970777f9a073c11a5c486ae5d76cfed7054de91ac"
    },
    "dc90ca2984a2e9f34f0ce6a7f0bb87a8f2c96ce426fce2a274121eb6e5fe4163": {
      "translations": {
        "python": {
          "source": "# api is of type HttpApi\n\n\napigwv2.HttpStage(self, \"Stage\",\n    http_api=api,\n    stage_name=\"beta\"\n)",
          "version": "1"
        },
        "csharp": {
          "source": "HttpApi api;\n\n\nnew HttpStage(this, \"Stage\", new HttpStageProps {\n    HttpApi = api,\n    StageName = \"beta\"\n});",
          "version": "1"
        },
        "java": {
          "source": "HttpApi api;\n\n\nHttpStage.Builder.create(this, \"Stage\")\n        .httpApi(api)\n        .stageName(\"beta\")\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "declare const api: apigwv2.HttpApi;\n\nnew apigwv2.HttpStage(this, 'Stage', {\n  httpApi: api,\n  stageName: 'beta',\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.HttpStageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.HttpStage",
        "@aws-cdk/aws-apigatewayv2.HttpStageProps",
        "@aws-cdk/aws-apigatewayv2.IHttpApi"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const api: apigwv2.HttpApi;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew apigwv2.HttpStage(this, 'Stage', {\n  httpApi: api,\n  stageName: 'beta',\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 1,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "6e2325b335e7f247f20e3d2dcf72408dd033caccb9f56d3d43ccc5847c835deb"
    },
    "896ebe6200cf308cce75995f423a37db7b815e9b2a21e87068b7701171da0044": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpAlbIntegration\n\n# lb is of type ApplicationLoadBalancer\n\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpAlbIntegration(\"DefaultIntegration\", listener,\n        parameter_mapping=apigwv2.ParameterMapping().append_header(\"header2\", apigwv2.MappingValue.request_header(\"header1\")).remove_header(\"header1\")\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.AddListener(\"listener\", new BaseApplicationListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddApplicationTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpAlbIntegration(\"DefaultIntegration\", listener, new HttpAlbIntegrationProps {\n        ParameterMapping = new ParameterMapping().AppendHeader(\"header2\", MappingValue.RequestHeader(\"header1\")).RemoveHeader(\"header1\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpAlbIntegration;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.addListener(\"listener\", BaseApplicationListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddApplicationTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(HttpAlbIntegration.Builder.create(\"DefaultIntegration\", listener)\n                .parameterMapping(new ParameterMapping().appendHeader(\"header2\", MappingValue.requestHeader(\"header1\")).removeHeader(\"header1\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping()\n      .appendHeader('header2', apigwv2.MappingValue.requestHeader('header1'))\n      .removeHeader('header1'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.MappingValue"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegrationProps",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.MappingValue",
        "@aws-cdk/aws-apigatewayv2.MappingValue#requestHeader",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping#appendHeader",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping#removeHeader",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationListener"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping()\n      .appendHeader('header2', apigwv2.MappingValue.requestHeader('header1'))\n      .removeHeader('header1'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 8,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 8,
        "196": 5,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "d1b04930e9a72caadf6e297c0b132d960e79a0beb1f5777a44ce96d08146c7be"
    },
    "f8e8544f6d910682ba1f6613906dea6c247779be7341516b157eada93f7a0111": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import HttpAlbIntegration\n\n# lb is of type ApplicationLoadBalancer\n\nlistener = lb.add_listener(\"listener\", port=80)\nlistener.add_targets(\"target\",\n    port=80\n)\n\nhttp_endpoint = apigwv2.HttpApi(self, \"HttpProxyPrivateApi\",\n    default_integration=HttpAlbIntegration(\"DefaultIntegration\", listener,\n        parameter_mapping=apigwv2.ParameterMapping().append_header(\"header2\", apigwv2.MappingValue.request_header(\"header1\")).remove_header(\"header1\")\n    )\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.AddListener(\"listener\", new BaseApplicationListenerProps { Port = 80 });\nlistener.AddTargets(\"target\", new AddApplicationTargetsProps {\n    Port = 80\n});\n\nHttpApi httpEndpoint = new HttpApi(this, \"HttpProxyPrivateApi\", new HttpApiProps {\n    DefaultIntegration = new HttpAlbIntegration(\"DefaultIntegration\", listener, new HttpAlbIntegrationProps {\n        ParameterMapping = new ParameterMapping().AppendHeader(\"header2\", MappingValue.RequestHeader(\"header1\")).RemoveHeader(\"header1\")\n    })\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.HttpAlbIntegration;\n\nApplicationLoadBalancer lb;\n\nApplicationListener listener = lb.addListener(\"listener\", BaseApplicationListenerProps.builder().port(80).build());\nlistener.addTargets(\"target\", AddApplicationTargetsProps.builder()\n        .port(80)\n        .build());\n\nHttpApi httpEndpoint = HttpApi.Builder.create(this, \"HttpProxyPrivateApi\")\n        .defaultIntegration(HttpAlbIntegration.Builder.create(\"DefaultIntegration\", listener)\n                .parameterMapping(new ParameterMapping().appendHeader(\"header2\", MappingValue.requestHeader(\"header1\")).removeHeader(\"header1\"))\n                .build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping()\n      .appendHeader('header2', apigwv2.MappingValue.requestHeader('header1'))\n      .removeHeader('header1'),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.ParameterMapping"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegration",
        "@aws-cdk/aws-apigatewayv2-integrations.HttpAlbIntegrationProps",
        "@aws-cdk/aws-apigatewayv2.HttpApi",
        "@aws-cdk/aws-apigatewayv2.HttpApiProps",
        "@aws-cdk/aws-apigatewayv2.HttpRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.MappingValue",
        "@aws-cdk/aws-apigatewayv2.MappingValue#requestHeader",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping#appendHeader",
        "@aws-cdk/aws-apigatewayv2.ParameterMapping#removeHeader",
        "@aws-cdk/aws-elasticloadbalancingv2.AddApplicationTargetsProps",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationListener#addTargets",
        "@aws-cdk/aws-elasticloadbalancingv2.ApplicationLoadBalancer#addListener",
        "@aws-cdk/aws-elasticloadbalancingv2.BaseApplicationListenerProps",
        "@aws-cdk/aws-elasticloadbalancingv2.IApplicationListener"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { HttpAlbIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const lb: elbv2.ApplicationLoadBalancer;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst listener = lb.addListener('listener', { port: 80 });\nlistener.addTargets('target', {\n  port: 80,\n});\n\nconst httpEndpoint = new apigwv2.HttpApi(this, 'HttpProxyPrivateApi', {\n  defaultIntegration: new HttpAlbIntegration('DefaultIntegration', listener, {\n    parameterMapping: new apigwv2.ParameterMapping()\n      .appendHeader('header2', apigwv2.MappingValue.requestHeader('header1'))\n      .removeHeader('header1'),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 2,
        "10": 8,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 4,
        "194": 8,
        "196": 5,
        "197": 3,
        "225": 3,
        "226": 1,
        "242": 3,
        "243": 3,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "d1b04930e9a72caadf6e297c0b132d960e79a0beb1f5777a44ce96d08146c7be"
    },
    "d5c654cd9d50fa2c67caec904a3758294dfa85e899db90dd1310d72ecc57d69b": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nvpc_link = apigwv2.VpcLink(self, \"VpcLink\", vpc=vpc)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nVpcLink vpcLink = new VpcLink(this, \"VpcLink\", new VpcLinkProps { Vpc = vpc });",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nVpcLink vpcLink = VpcLink.Builder.create(this, \"VpcLink\").vpc(vpc).build();",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst vpcLink = new apigwv2.VpcLink(this, 'VpcLink', { vpc });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.VpcLink"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.VpcLink",
        "@aws-cdk/aws-apigatewayv2.VpcLinkProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst vpcLink = new apigwv2.VpcLink(this, 'VpcLink', { vpc });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "104": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "4c778f5f8f82d7a2eb2c39c781f86739523ab669d4e6aa0b48d64e442bbe364b"
    },
    "ddc38ba84c4c6b1456928121d14c5eb3a36bff999068d51862d318cbf63fc224": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\n\n# vpc is of type Vpc\n\nawesome_link = apigwv2.VpcLink.from_vpc_link_attributes(self, \"awesome-vpc-link\",\n    vpc_link_id=\"us-east-1_oiuR12Abd\",\n    vpc=vpc\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\n\nVpc vpc;\n\nIVpcLink awesomeLink = VpcLink.FromVpcLinkAttributes(this, \"awesome-vpc-link\", new VpcLinkAttributes {\n    VpcLinkId = \"us-east-1_oiuR12Abd\",\n    Vpc = vpc\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\n\nVpc vpc;\n\nIVpcLink awesomeLink = VpcLink.fromVpcLinkAttributes(this, \"awesome-vpc-link\", VpcLinkAttributes.builder()\n        .vpcLinkId(\"us-east-1_oiuR12Abd\")\n        .vpc(vpc)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const vpc: ec2.Vpc;\nconst awesomeLink = apigwv2.VpcLink.fromVpcLinkAttributes(this, 'awesome-vpc-link', {\n  vpcLinkId: 'us-east-1_oiuR12Abd',\n  vpc,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.VpcLinkAttributes"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.IVpcLink",
        "@aws-cdk/aws-apigatewayv2.VpcLink",
        "@aws-cdk/aws-apigatewayv2.VpcLink#fromVpcLinkAttributes",
        "@aws-cdk/aws-apigatewayv2.VpcLinkAttributes",
        "@aws-cdk/aws-ec2.IVpc"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\n\ndeclare const vpc: ec2.Vpc;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst awesomeLink = apigwv2.VpcLink.fromVpcLinkAttributes(this, 'awesome-vpc-link', {\n  vpcLinkId: 'us-east-1_oiuR12Abd',\n  vpc,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "a7c8a56d56779edbf3f86c010914d30f090d3a93bcc3a1016a6d0d38c78cfa32"
    },
    "9c13dbdb7e8ad23f863766a107b02528d3f30c88781d070add9308ea1e806afa": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_ec2 as ec2\n\n\nvpc = ec2.Vpc(self, \"VPC\")\nvpc_link = apigwv2.VpcLink(self, \"VpcLink\", vpc=vpc)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.EC2;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nVpcLink vpcLink = new VpcLink(this, \"VpcLink\", new VpcLinkProps { Vpc = vpc });",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.ec2.*;\n\n\nVpc vpc = new Vpc(this, \"VPC\");\nVpcLink vpcLink = VpcLink.Builder.create(this, \"VpcLink\").vpc(vpc).build();",
          "version": "1"
        },
        "$": {
          "source": "import * as ec2 from '@aws-cdk/aws-ec2';\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst vpcLink = new apigwv2.VpcLink(this, 'VpcLink', { vpc });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.VpcLinkProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2.VpcLink",
        "@aws-cdk/aws-apigatewayv2.VpcLinkProps",
        "@aws-cdk/aws-ec2.IVpc",
        "@aws-cdk/aws-ec2.Vpc"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as ec2 from '@aws-cdk/aws-ec2';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst vpc = new ec2.Vpc(this, 'VPC');\nconst vpcLink = new apigwv2.VpcLink(this, 'VpcLink', { vpc });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "104": 2,
        "193": 1,
        "194": 2,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "4c778f5f8f82d7a2eb2c39c781f86739523ab669d4e6aa0b48d64e442bbe364b"
    },
    "ee097c22ca7abbb72177d2d92c94598e08467a6efbd1318df2d6fe782fa983ab": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import WebSocketLambdaIntegration\n\n# message_handler is of type Function\n\n\nweb_socket_api = apigwv2.WebSocketApi(self, \"mywsapi\")\napigwv2.WebSocketStage(self, \"mystage\",\n    web_socket_api=web_socket_api,\n    stage_name=\"dev\",\n    auto_deploy=True\n)\nweb_socket_api.add_route(\"sendmessage\",\n    integration=WebSocketLambdaIntegration(\"SendMessageIntegration\", message_handler)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nFunction messageHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nnew WebSocketStage(this, \"mystage\", new WebSocketStageProps {\n    WebSocketApi = webSocketApi,\n    StageName = \"dev\",\n    AutoDeploy = true\n});\nwebSocketApi.AddRoute(\"sendmessage\", new WebSocketRouteOptions {\n    Integration = new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.WebSocketLambdaIntegration;\n\nFunction messageHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nWebSocketStage.Builder.create(this, \"mystage\")\n        .webSocketApi(webSocketApi)\n        .stageName(\"dev\")\n        .autoDeploy(true)\n        .build();\nwebSocketApi.addRoute(\"sendmessage\", WebSocketRouteOptions.builder()\n        .integration(new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\n\ndeclare const messageHandler: lambda.Function;\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.WebSocketApi"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.WebSocketLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2.WebSocketApi#addRoute",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteOptions",
        "@aws-cdk/aws-apigatewayv2.WebSocketStage",
        "@aws-cdk/aws-apigatewayv2.WebSocketStageProps",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const messageHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 17,
        "104": 2,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "cafe320ee6fe89408c03d147c1b1ffc180349894c18cd4edabb61436040c5664"
    },
    "4738496514b80c7e8ce172595f03a121b829de69176096c4bbe2729aab9ce754": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import WebSocketLambdaIntegration\n\n# connect_handler is of type Function\n# disconnect_handler is of type Function\n# default_handler is of type Function\n\n\nweb_socket_api = apigwv2.WebSocketApi(self, \"mywsapi\",\n    connect_route_options=apigwv2.WebSocketRouteOptions(integration=WebSocketLambdaIntegration(\"ConnectIntegration\", connect_handler)),\n    disconnect_route_options=apigwv2.WebSocketRouteOptions(integration=WebSocketLambdaIntegration(\"DisconnectIntegration\", disconnect_handler)),\n    default_route_options=apigwv2.WebSocketRouteOptions(integration=WebSocketLambdaIntegration(\"DefaultIntegration\", default_handler))\n)\n\napigwv2.WebSocketStage(self, \"mystage\",\n    web_socket_api=web_socket_api,\n    stage_name=\"dev\",\n    auto_deploy=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nFunction connectHandler;\nFunction disconnectHandler;\nFunction defaultHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\", new WebSocketApiProps {\n    ConnectRouteOptions = new WebSocketRouteOptions { Integration = new WebSocketLambdaIntegration(\"ConnectIntegration\", connectHandler) },\n    DisconnectRouteOptions = new WebSocketRouteOptions { Integration = new WebSocketLambdaIntegration(\"DisconnectIntegration\", disconnectHandler) },\n    DefaultRouteOptions = new WebSocketRouteOptions { Integration = new WebSocketLambdaIntegration(\"DefaultIntegration\", defaultHandler) }\n});\n\nnew WebSocketStage(this, \"mystage\", new WebSocketStageProps {\n    WebSocketApi = webSocketApi,\n    StageName = \"dev\",\n    AutoDeploy = true\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.WebSocketLambdaIntegration;\n\nFunction connectHandler;\nFunction disconnectHandler;\nFunction defaultHandler;\n\n\nWebSocketApi webSocketApi = WebSocketApi.Builder.create(this, \"mywsapi\")\n        .connectRouteOptions(WebSocketRouteOptions.builder().integration(new WebSocketLambdaIntegration(\"ConnectIntegration\", connectHandler)).build())\n        .disconnectRouteOptions(WebSocketRouteOptions.builder().integration(new WebSocketLambdaIntegration(\"DisconnectIntegration\", disconnectHandler)).build())\n        .defaultRouteOptions(WebSocketRouteOptions.builder().integration(new WebSocketLambdaIntegration(\"DefaultIntegration\", defaultHandler)).build())\n        .build();\n\nWebSocketStage.Builder.create(this, \"mystage\")\n        .webSocketApi(webSocketApi)\n        .stageName(\"dev\")\n        .autoDeploy(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const connectHandler: lambda.Function;\ndeclare const disconnectHandler: lambda.Function;\ndeclare const defaultHandler: lambda.Function;\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi', {\n  connectRouteOptions: { integration: new WebSocketLambdaIntegration('ConnectIntegration', connectHandler) },\n  disconnectRouteOptions: { integration: new WebSocketLambdaIntegration('DisconnectIntegration',disconnectHandler) },\n  defaultRouteOptions: { integration: new WebSocketLambdaIntegration('DefaultIntegration', defaultHandler) },\n});\n\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.WebSocketApiProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.WebSocketLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2.WebSocketApiProps",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteOptions",
        "@aws-cdk/aws-apigatewayv2.WebSocketStage",
        "@aws-cdk/aws-apigatewayv2.WebSocketStageProps",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const connectHandler: lambda.Function;\ndeclare const disconnectHandler: lambda.Function;\ndeclare const defaultHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi', {\n  connectRouteOptions: { integration: new WebSocketLambdaIntegration('ConnectIntegration', connectHandler) },\n  disconnectRouteOptions: { integration: new WebSocketLambdaIntegration('DisconnectIntegration',disconnectHandler) },\n  defaultRouteOptions: { integration: new WebSocketLambdaIntegration('DefaultIntegration', defaultHandler) },\n});\n\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 30,
        "104": 2,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 5,
        "194": 2,
        "197": 5,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 8,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "12c0978f68ba004764ab9a0edd65a07c8cab1960e3b01bf6a133b41864521018"
    },
    "423abeb5e88c48c0b565b87f3050ea7c2020f94c04a65c6ca8683bb3db492299": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import WebSocketLambdaIntegration\n\n# message_handler is of type Function\n\n\nweb_socket_api = apigwv2.WebSocketApi(self, \"mywsapi\")\napigwv2.WebSocketStage(self, \"mystage\",\n    web_socket_api=web_socket_api,\n    stage_name=\"dev\",\n    auto_deploy=True\n)\nweb_socket_api.add_route(\"sendmessage\",\n    integration=WebSocketLambdaIntegration(\"SendMessageIntegration\", message_handler)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nFunction messageHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nnew WebSocketStage(this, \"mystage\", new WebSocketStageProps {\n    WebSocketApi = webSocketApi,\n    StageName = \"dev\",\n    AutoDeploy = true\n});\nwebSocketApi.AddRoute(\"sendmessage\", new WebSocketRouteOptions {\n    Integration = new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.WebSocketLambdaIntegration;\n\nFunction messageHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nWebSocketStage.Builder.create(this, \"mystage\")\n        .webSocketApi(webSocketApi)\n        .stageName(\"dev\")\n        .autoDeploy(true)\n        .build();\nwebSocketApi.addRoute(\"sendmessage\", WebSocketRouteOptions.builder()\n        .integration(new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\n\ndeclare const messageHandler: lambda.Function;\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.WebSocketRouteIntegration"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.WebSocketLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2.WebSocketApi#addRoute",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteOptions",
        "@aws-cdk/aws-apigatewayv2.WebSocketStage",
        "@aws-cdk/aws-apigatewayv2.WebSocketStageProps",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const messageHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 17,
        "104": 2,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "cafe320ee6fe89408c03d147c1b1ffc180349894c18cd4edabb61436040c5664"
    },
    "d9bfcb7a828d550ae04518dac97c653cc5f07678bcbb79a1c7e88cc765852d81": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import WebSocketLambdaIntegration\n\n# message_handler is of type Function\n\n\nweb_socket_api = apigwv2.WebSocketApi(self, \"mywsapi\")\napigwv2.WebSocketStage(self, \"mystage\",\n    web_socket_api=web_socket_api,\n    stage_name=\"dev\",\n    auto_deploy=True\n)\nweb_socket_api.add_route(\"sendmessage\",\n    integration=WebSocketLambdaIntegration(\"SendMessageIntegration\", message_handler)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nFunction messageHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nnew WebSocketStage(this, \"mystage\", new WebSocketStageProps {\n    WebSocketApi = webSocketApi,\n    StageName = \"dev\",\n    AutoDeploy = true\n});\nwebSocketApi.AddRoute(\"sendmessage\", new WebSocketRouteOptions {\n    Integration = new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler)\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.WebSocketLambdaIntegration;\n\nFunction messageHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\");\nWebSocketStage.Builder.create(this, \"mystage\")\n        .webSocketApi(webSocketApi)\n        .stageName(\"dev\")\n        .autoDeploy(true)\n        .build();\nwebSocketApi.addRoute(\"sendmessage\", WebSocketRouteOptions.builder()\n        .integration(new WebSocketLambdaIntegration(\"SendMessageIntegration\", messageHandler))\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\n\ndeclare const messageHandler: lambda.Function;\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.WebSocketRouteOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.WebSocketLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2.WebSocketApi#addRoute",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteOptions",
        "@aws-cdk/aws-apigatewayv2.WebSocketStage",
        "@aws-cdk/aws-apigatewayv2.WebSocketStageProps",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const messageHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as ec2 from '@aws-cdk/aws-ec2';\nimport * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi');\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\nwebSocketApi.addRoute('sendmessage', {\n  integration: new WebSocketLambdaIntegration('SendMessageIntegration', messageHandler),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 17,
        "104": 2,
        "106": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "193": 2,
        "194": 3,
        "196": 1,
        "197": 3,
        "225": 2,
        "226": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "cafe320ee6fe89408c03d147c1b1ffc180349894c18cd4edabb61436040c5664"
    },
    "7d6b7e3b00503a86e81625d250a8ff167e6cd9d571aa7ccac899c95963d8e7cb": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import WebSocketLambdaIntegration\n\n# connect_handler is of type Function\n# disconnect_handler is of type Function\n# default_handler is of type Function\n\n\nweb_socket_api = apigwv2.WebSocketApi(self, \"mywsapi\",\n    connect_route_options=apigwv2.WebSocketRouteOptions(integration=WebSocketLambdaIntegration(\"ConnectIntegration\", connect_handler)),\n    disconnect_route_options=apigwv2.WebSocketRouteOptions(integration=WebSocketLambdaIntegration(\"DisconnectIntegration\", disconnect_handler)),\n    default_route_options=apigwv2.WebSocketRouteOptions(integration=WebSocketLambdaIntegration(\"DefaultIntegration\", default_handler))\n)\n\napigwv2.WebSocketStage(self, \"mystage\",\n    web_socket_api=web_socket_api,\n    stage_name=\"dev\",\n    auto_deploy=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nFunction connectHandler;\nFunction disconnectHandler;\nFunction defaultHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\", new WebSocketApiProps {\n    ConnectRouteOptions = new WebSocketRouteOptions { Integration = new WebSocketLambdaIntegration(\"ConnectIntegration\", connectHandler) },\n    DisconnectRouteOptions = new WebSocketRouteOptions { Integration = new WebSocketLambdaIntegration(\"DisconnectIntegration\", disconnectHandler) },\n    DefaultRouteOptions = new WebSocketRouteOptions { Integration = new WebSocketLambdaIntegration(\"DefaultIntegration\", defaultHandler) }\n});\n\nnew WebSocketStage(this, \"mystage\", new WebSocketStageProps {\n    WebSocketApi = webSocketApi,\n    StageName = \"dev\",\n    AutoDeploy = true\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.WebSocketLambdaIntegration;\n\nFunction connectHandler;\nFunction disconnectHandler;\nFunction defaultHandler;\n\n\nWebSocketApi webSocketApi = WebSocketApi.Builder.create(this, \"mywsapi\")\n        .connectRouteOptions(WebSocketRouteOptions.builder().integration(new WebSocketLambdaIntegration(\"ConnectIntegration\", connectHandler)).build())\n        .disconnectRouteOptions(WebSocketRouteOptions.builder().integration(new WebSocketLambdaIntegration(\"DisconnectIntegration\", disconnectHandler)).build())\n        .defaultRouteOptions(WebSocketRouteOptions.builder().integration(new WebSocketLambdaIntegration(\"DefaultIntegration\", defaultHandler)).build())\n        .build();\n\nWebSocketStage.Builder.create(this, \"mystage\")\n        .webSocketApi(webSocketApi)\n        .stageName(\"dev\")\n        .autoDeploy(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const connectHandler: lambda.Function;\ndeclare const disconnectHandler: lambda.Function;\ndeclare const defaultHandler: lambda.Function;\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi', {\n  connectRouteOptions: { integration: new WebSocketLambdaIntegration('ConnectIntegration', connectHandler) },\n  disconnectRouteOptions: { integration: new WebSocketLambdaIntegration('DisconnectIntegration',disconnectHandler) },\n  defaultRouteOptions: { integration: new WebSocketLambdaIntegration('DefaultIntegration', defaultHandler) },\n});\n\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.WebSocketStage"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.WebSocketLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2.WebSocketApiProps",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteOptions",
        "@aws-cdk/aws-apigatewayv2.WebSocketStage",
        "@aws-cdk/aws-apigatewayv2.WebSocketStageProps",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const connectHandler: lambda.Function;\ndeclare const disconnectHandler: lambda.Function;\ndeclare const defaultHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi', {\n  connectRouteOptions: { integration: new WebSocketLambdaIntegration('ConnectIntegration', connectHandler) },\n  disconnectRouteOptions: { integration: new WebSocketLambdaIntegration('DisconnectIntegration',disconnectHandler) },\n  defaultRouteOptions: { integration: new WebSocketLambdaIntegration('DefaultIntegration', defaultHandler) },\n});\n\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 30,
        "104": 2,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 5,
        "194": 2,
        "197": 5,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 8,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "12c0978f68ba004764ab9a0edd65a07c8cab1960e3b01bf6a133b41864521018"
    },
    "a54495cdb69ded15cf3efeec48c9c7ff67e03109fc88a9d93d06a78bd500f2ec": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_apigatewayv2_integrations import WebSocketLambdaIntegration\n\n# connect_handler is of type Function\n# disconnect_handler is of type Function\n# default_handler is of type Function\n\n\nweb_socket_api = apigwv2.WebSocketApi(self, \"mywsapi\",\n    connect_route_options=apigwv2.WebSocketRouteOptions(integration=WebSocketLambdaIntegration(\"ConnectIntegration\", connect_handler)),\n    disconnect_route_options=apigwv2.WebSocketRouteOptions(integration=WebSocketLambdaIntegration(\"DisconnectIntegration\", disconnect_handler)),\n    default_route_options=apigwv2.WebSocketRouteOptions(integration=WebSocketLambdaIntegration(\"DefaultIntegration\", default_handler))\n)\n\napigwv2.WebSocketStage(self, \"mystage\",\n    web_socket_api=web_socket_api,\n    stage_name=\"dev\",\n    auto_deploy=True\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.APIGatewayv2.Integrations;\n\nFunction connectHandler;\nFunction disconnectHandler;\nFunction defaultHandler;\n\n\nWebSocketApi webSocketApi = new WebSocketApi(this, \"mywsapi\", new WebSocketApiProps {\n    ConnectRouteOptions = new WebSocketRouteOptions { Integration = new WebSocketLambdaIntegration(\"ConnectIntegration\", connectHandler) },\n    DisconnectRouteOptions = new WebSocketRouteOptions { Integration = new WebSocketLambdaIntegration(\"DisconnectIntegration\", disconnectHandler) },\n    DefaultRouteOptions = new WebSocketRouteOptions { Integration = new WebSocketLambdaIntegration(\"DefaultIntegration\", defaultHandler) }\n});\n\nnew WebSocketStage(this, \"mystage\", new WebSocketStageProps {\n    WebSocketApi = webSocketApi,\n    StageName = \"dev\",\n    AutoDeploy = true\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.apigatewayv2.integrations.WebSocketLambdaIntegration;\n\nFunction connectHandler;\nFunction disconnectHandler;\nFunction defaultHandler;\n\n\nWebSocketApi webSocketApi = WebSocketApi.Builder.create(this, \"mywsapi\")\n        .connectRouteOptions(WebSocketRouteOptions.builder().integration(new WebSocketLambdaIntegration(\"ConnectIntegration\", connectHandler)).build())\n        .disconnectRouteOptions(WebSocketRouteOptions.builder().integration(new WebSocketLambdaIntegration(\"DisconnectIntegration\", disconnectHandler)).build())\n        .defaultRouteOptions(WebSocketRouteOptions.builder().integration(new WebSocketLambdaIntegration(\"DefaultIntegration\", defaultHandler)).build())\n        .build();\n\nWebSocketStage.Builder.create(this, \"mystage\")\n        .webSocketApi(webSocketApi)\n        .stageName(\"dev\")\n        .autoDeploy(true)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const connectHandler: lambda.Function;\ndeclare const disconnectHandler: lambda.Function;\ndeclare const defaultHandler: lambda.Function;\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi', {\n  connectRouteOptions: { integration: new WebSocketLambdaIntegration('ConnectIntegration', connectHandler) },\n  disconnectRouteOptions: { integration: new WebSocketLambdaIntegration('DisconnectIntegration',disconnectHandler) },\n  defaultRouteOptions: { integration: new WebSocketLambdaIntegration('DefaultIntegration', defaultHandler) },\n});\n\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-apigatewayv2.WebSocketStageProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-apigatewayv2-integrations.WebSocketLambdaIntegration",
        "@aws-cdk/aws-apigatewayv2.IWebSocketApi",
        "@aws-cdk/aws-apigatewayv2.WebSocketApi",
        "@aws-cdk/aws-apigatewayv2.WebSocketApiProps",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteIntegration",
        "@aws-cdk/aws-apigatewayv2.WebSocketRouteOptions",
        "@aws-cdk/aws-apigatewayv2.WebSocketStage",
        "@aws-cdk/aws-apigatewayv2.WebSocketStageProps",
        "@aws-cdk/aws-lambda.IFunction"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { WebSocketLambdaIntegration } from '@aws-cdk/aws-apigatewayv2-integrations';\n\ndeclare const connectHandler: lambda.Function;\ndeclare const disconnectHandler: lambda.Function;\ndeclare const defaultHandler: lambda.Function;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport * as apigwv2 from '@aws-cdk/aws-apigatewayv2';\nimport * as lambda from '@aws-cdk/aws-lambda';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst webSocketApi = new apigwv2.WebSocketApi(this, 'mywsapi', {\n  connectRouteOptions: { integration: new WebSocketLambdaIntegration('ConnectIntegration', connectHandler) },\n  disconnectRouteOptions: { integration: new WebSocketLambdaIntegration('DisconnectIntegration',disconnectHandler) },\n  defaultRouteOptions: { integration: new WebSocketLambdaIntegration('DefaultIntegration', defaultHandler) },\n});\n\nnew apigwv2.WebSocketStage(this, 'mystage', {\n  webSocketApi,\n  stageName: 'dev',\n  autoDeploy: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 7,
        "75": 30,
        "104": 2,
        "106": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "193": 5,
        "194": 2,
        "197": 5,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 8,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "12c0978f68ba004764ab9a0edd65a07c8cab1960e3b01bf6a133b41864521018"
    }
  }
}
