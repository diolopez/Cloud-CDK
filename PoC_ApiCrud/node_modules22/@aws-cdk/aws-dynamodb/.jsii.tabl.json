{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "5f99a73bbab87a7778e98e67cac5bed07b9f0041c98965758958c44ab52b5d0d": {
      "translations": {
        "python": {
          "source": "table = dynamodb.Table(self, \"Table\",\n    partition_key=dynamodb.Attribute(name=\"id\", type=dynamodb.AttributeType.STRING)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Table table = new Table(this, \"Table\", new TableProps {\n    PartitionKey = new Attribute { Name = \"id\", Type = AttributeType.STRING }\n});",
          "version": "1"
        },
        "java": {
          "source": "Table table = Table.Builder.create(this, \"Table\")\n        .partitionKey(Attribute.builder().name(\"id\").type(AttributeType.STRING).build())\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const table = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-dynamodb"
        },
        "field": {
          "field": "markdown",
          "line": 16
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.TableProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst table = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 9,
        "104": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "c3873c51b2ee5bdcd1f29a41f1d8eae1b1f48548426bed355e916ef223e7c029"
    },
    "3752a96bc1729afec6597b23fb5a96f88c59e1f37eec091c9482f3bef0479c0a": {
      "translations": {
        "python": {
          "source": "# user is of type User\n\ntable = dynamodb.Table.from_table_arn(self, \"ImportedTable\", \"arn:aws:dynamodb:us-east-1:111111111:table/my-table\")\n# now you can just call methods on the table\ntable.grant_read_write_data(user)",
          "version": "1"
        },
        "csharp": {
          "source": "User user;\n\nITable table = Table.FromTableArn(this, \"ImportedTable\", \"arn:aws:dynamodb:us-east-1:111111111:table/my-table\");\n// now you can just call methods on the table\ntable.GrantReadWriteData(user);",
          "version": "1"
        },
        "java": {
          "source": "User user;\n\nITable table = Table.fromTableArn(this, \"ImportedTable\", \"arn:aws:dynamodb:us-east-1:111111111:table/my-table\");\n// now you can just call methods on the table\ntable.grantReadWriteData(user);",
          "version": "1"
        },
        "$": {
          "source": "declare const user: iam.User;\nconst table = dynamodb.Table.fromTableArn(this, 'ImportedTable', 'arn:aws:dynamodb:us-east-1:111111111:table/my-table');\n// now you can just call methods on the table\ntable.grantReadWriteData(user);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-dynamodb"
        },
        "field": {
          "field": "markdown",
          "line": 28
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.ITable",
        "@aws-cdk/aws-dynamodb.ITable#grantReadWriteData",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.Table#fromTableArn",
        "@aws-cdk/aws-iam.IGrantable"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const user: iam.User;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst table = dynamodb.Table.fromTableArn(this, 'ImportedTable', 'arn:aws:dynamodb:us-east-1:111111111:table/my-table');\n// now you can just call methods on the table\ntable.grantReadWriteData(user);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 3,
        "196": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "290": 1
      },
      "fqnsFingerprint": "965d342e3e4fbfadc6587aabc23fafb0c4b01de32baf9231d28c54ce29ac3146"
    },
    "a3c8ceb7753f4c5803144390143fd4cd210136819fdc6f103a6ae7d600ce0f69": {
      "translations": {
        "python": {
          "source": "table = dynamodb.Table(self, \"Table\",\n    partition_key=dynamodb.Attribute(name=\"id\", type=dynamodb.AttributeType.STRING),\n    billing_mode=dynamodb.BillingMode.PAY_PER_REQUEST\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Table table = new Table(this, \"Table\", new TableProps {\n    PartitionKey = new Attribute { Name = \"id\", Type = AttributeType.STRING },\n    BillingMode = BillingMode.PAY_PER_REQUEST\n});",
          "version": "1"
        },
        "java": {
          "source": "Table table = Table.Builder.create(this, \"Table\")\n        .partitionKey(Attribute.builder().name(\"id\").type(AttributeType.STRING).build())\n        .billingMode(BillingMode.PAY_PER_REQUEST)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const table = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-dynamodb"
        },
        "field": {
          "field": "markdown",
          "line": 51
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.BillingMode",
        "@aws-cdk/aws-dynamodb.BillingMode#PAY_PER_REQUEST",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.TableProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst table = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 13,
        "104": 1,
        "193": 2,
        "194": 5,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "c98efcc5f0ccdf99c14f53aa75f5db75fb235d07c6694e8dee5c06f731c3ecf0"
    },
    "a693f0310ecc2e1197f703a762f9e62d59e8c27118bf74581874b9f81f54800d": {
      "translations": {
        "python": {
          "source": "read_scaling = table.auto_scale_read_capacity(min_capacity=1, max_capacity=50)\n\nread_scaling.scale_on_utilization(\n    target_utilization_percent=50\n)\n\nread_scaling.scale_on_schedule(\"ScaleUpInTheMorning\",\n    schedule=appscaling.Schedule.cron(hour=\"8\", minute=\"0\"),\n    min_capacity=20\n)\n\nread_scaling.scale_on_schedule(\"ScaleDownAtNight\",\n    schedule=appscaling.Schedule.cron(hour=\"20\", minute=\"0\"),\n    max_capacity=20\n)",
          "version": "1"
        },
        "csharp": {
          "source": "IScalableTableAttribute readScaling = table.AutoScaleReadCapacity(new EnableScalingProps { MinCapacity = 1, MaxCapacity = 50 });\n\nreadScaling.ScaleOnUtilization(new UtilizationScalingProps {\n    TargetUtilizationPercent = 50\n});\n\nreadScaling.ScaleOnSchedule(\"ScaleUpInTheMorning\", new ScalingSchedule {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"8\", Minute = \"0\" }),\n    MinCapacity = 20\n});\n\nreadScaling.ScaleOnSchedule(\"ScaleDownAtNight\", new ScalingSchedule {\n    Schedule = Schedule.Cron(new CronOptions { Hour = \"20\", Minute = \"0\" }),\n    MaxCapacity = 20\n});",
          "version": "1"
        },
        "java": {
          "source": "IScalableTableAttribute readScaling = table.autoScaleReadCapacity(EnableScalingProps.builder().minCapacity(1).maxCapacity(50).build());\n\nreadScaling.scaleOnUtilization(UtilizationScalingProps.builder()\n        .targetUtilizationPercent(50)\n        .build());\n\nreadScaling.scaleOnSchedule(\"ScaleUpInTheMorning\", ScalingSchedule.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"8\").minute(\"0\").build()))\n        .minCapacity(20)\n        .build());\n\nreadScaling.scaleOnSchedule(\"ScaleDownAtNight\", ScalingSchedule.builder()\n        .schedule(Schedule.cron(CronOptions.builder().hour(\"20\").minute(\"0\").build()))\n        .maxCapacity(20)\n        .build());",
          "version": "1"
        },
        "$": {
          "source": "const readScaling = table.autoScaleReadCapacity({ minCapacity: 1, maxCapacity: 50 });\n\nreadScaling.scaleOnUtilization({\n  targetUtilizationPercent: 50,\n});\n\nreadScaling.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: appscaling.Schedule.cron({ hour: '8', minute: '0' }),\n  minCapacity: 20,\n});\n\nreadScaling.scaleOnSchedule('ScaleDownAtNight', {\n  schedule: appscaling.Schedule.cron({ hour: '20', minute: '0' }),\n  maxCapacity: 20,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-dynamodb"
        },
        "field": {
          "field": "markdown",
          "line": 70
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-applicationautoscaling.CronOptions",
        "@aws-cdk/aws-applicationautoscaling.ScalingSchedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule",
        "@aws-cdk/aws-applicationautoscaling.Schedule#cron",
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.EnableScalingProps",
        "@aws-cdk/aws-dynamodb.IScalableTableAttribute",
        "@aws-cdk/aws-dynamodb.IScalableTableAttribute#scaleOnSchedule",
        "@aws-cdk/aws-dynamodb.IScalableTableAttribute#scaleOnUtilization",
        "@aws-cdk/aws-dynamodb.Table#autoScaleReadCapacity",
        "@aws-cdk/aws-dynamodb.UtilizationScalingProps",
        "@aws-cdk/core.RemovalPolicy"
      ],
      "fullSource": "import * as appscaling from '@aws-cdk/aws-applicationautoscaling';\nimport * as cdk from '@aws-cdk/core';\nimport * as dynamodb from '../lib';\n\nconst app = new cdk.App();\nconst stack = new cdk.Stack(app, 'aws-cdk-dynamodb');\n\nconst table = new dynamodb.Table(stack, 'Table', {\n  partitionKey: { name: 'hashKey', type: dynamodb.AttributeType.STRING },\n  removalPolicy: cdk.RemovalPolicy.DESTROY,\n});\n\n/// !show\nconst readScaling = table.autoScaleReadCapacity({ minCapacity: 1, maxCapacity: 50 });\n\nreadScaling.scaleOnUtilization({\n  targetUtilizationPercent: 50,\n});\n\nreadScaling.scaleOnSchedule('ScaleUpInTheMorning', {\n  schedule: appscaling.Schedule.cron({ hour: '8', minute: '0' }),\n  minCapacity: 20,\n});\n\nreadScaling.scaleOnSchedule('ScaleDownAtNight', {\n  schedule: appscaling.Schedule.cron({ hour: '20', minute: '0' }),\n  maxCapacity: 20,\n});\n/// !hide\n\napp.synth();\n",
      "syntaxKindCounter": {
        "8": 5,
        "10": 6,
        "75": 26,
        "193": 6,
        "194": 8,
        "196": 6,
        "225": 1,
        "226": 3,
        "242": 1,
        "243": 1,
        "281": 11
      },
      "fqnsFingerprint": "fcd01ac80d76df6d44bd7042c065e5cf30ad70c5e6eabc98f84c3224e7062a81"
    },
    "54b1bbe42d8ba3097c3f1021df0b66a9d4603ace5ac48e4edab1486c45b1a50e": {
      "translations": {
        "python": {
          "source": "global_table = dynamodb.Table(self, \"Table\",\n    partition_key=dynamodb.Attribute(name=\"id\", type=dynamodb.AttributeType.STRING),\n    replication_regions=[\"us-east-1\", \"us-east-2\", \"us-west-2\"]\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Table globalTable = new Table(this, \"Table\", new TableProps {\n    PartitionKey = new Attribute { Name = \"id\", Type = AttributeType.STRING },\n    ReplicationRegions = new [] { \"us-east-1\", \"us-east-2\", \"us-west-2\" }\n});",
          "version": "1"
        },
        "java": {
          "source": "Table globalTable = Table.Builder.create(this, \"Table\")\n        .partitionKey(Attribute.builder().name(\"id\").type(AttributeType.STRING).build())\n        .replicationRegions(List.of(\"us-east-1\", \"us-east-2\", \"us-west-2\"))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const globalTable = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  replicationRegions: ['us-east-1', 'us-east-2', 'us-west-2'],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-dynamodb"
        },
        "field": {
          "field": "markdown",
          "line": 96
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.TableProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst globalTable = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  replicationRegions: ['us-east-1', 'us-east-2', 'us-west-2'],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 10,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 3,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "c3873c51b2ee5bdcd1f29a41f1d8eae1b1f48548426bed355e916ef223e7c029"
    },
    "0addff6825a44a1a0f6e9fd6d6666810eb073a9f9614c547fd1cb66c46f0987b": {
      "translations": {
        "python": {
          "source": "global_table = dynamodb.Table(self, \"Table\",\n    partition_key=dynamodb.Attribute(name=\"id\", type=dynamodb.AttributeType.STRING),\n    replication_regions=[\"us-east-1\", \"us-east-2\", \"us-west-2\"],\n    billing_mode=dynamodb.BillingMode.PROVISIONED\n)\n\nglobal_table.auto_scale_write_capacity(\n    min_capacity=1,\n    max_capacity=10\n).scale_on_utilization(target_utilization_percent=75)",
          "version": "1"
        },
        "csharp": {
          "source": "Table globalTable = new Table(this, \"Table\", new TableProps {\n    PartitionKey = new Attribute { Name = \"id\", Type = AttributeType.STRING },\n    ReplicationRegions = new [] { \"us-east-1\", \"us-east-2\", \"us-west-2\" },\n    BillingMode = BillingMode.PROVISIONED\n});\n\nglobalTable.AutoScaleWriteCapacity(new EnableScalingProps {\n    MinCapacity = 1,\n    MaxCapacity = 10\n}).ScaleOnUtilization(new UtilizationScalingProps { TargetUtilizationPercent = 75 });",
          "version": "1"
        },
        "java": {
          "source": "Table globalTable = Table.Builder.create(this, \"Table\")\n        .partitionKey(Attribute.builder().name(\"id\").type(AttributeType.STRING).build())\n        .replicationRegions(List.of(\"us-east-1\", \"us-east-2\", \"us-west-2\"))\n        .billingMode(BillingMode.PROVISIONED)\n        .build();\n\nglobalTable.autoScaleWriteCapacity(EnableScalingProps.builder()\n        .minCapacity(1)\n        .maxCapacity(10)\n        .build()).scaleOnUtilization(UtilizationScalingProps.builder().targetUtilizationPercent(75).build());",
          "version": "1"
        },
        "$": {
          "source": "const globalTable = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  replicationRegions: ['us-east-1', 'us-east-2', 'us-west-2'],\n  billingMode: dynamodb.BillingMode.PROVISIONED,\n});\n\nglobalTable.autoScaleWriteCapacity({\n  minCapacity: 1,\n  maxCapacity: 10,\n}).scaleOnUtilization({ targetUtilizationPercent: 75 });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-dynamodb"
        },
        "field": {
          "field": "markdown",
          "line": 110
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.BillingMode",
        "@aws-cdk/aws-dynamodb.BillingMode#PROVISIONED",
        "@aws-cdk/aws-dynamodb.EnableScalingProps",
        "@aws-cdk/aws-dynamodb.IScalableTableAttribute#scaleOnUtilization",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.Table#autoScaleWriteCapacity",
        "@aws-cdk/aws-dynamodb.TableProps",
        "@aws-cdk/aws-dynamodb.UtilizationScalingProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst globalTable = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  replicationRegions: ['us-east-1', 'us-east-2', 'us-west-2'],\n  billingMode: dynamodb.BillingMode.PROVISIONED,\n});\n\nglobalTable.autoScaleWriteCapacity({\n  minCapacity: 1,\n  maxCapacity: 10,\n}).scaleOnUtilization({ targetUtilizationPercent: 75 });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 20,
        "104": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 8
      },
      "fqnsFingerprint": "914b998cdbd29112b226076ef4c501d8ea19fde7f7e85c15d00fb60ca29f0847"
    },
    "c05c094c41f8539ff1d27129f4b4d404306badf1e548e7feea04fbb4828930a5": {
      "translations": {
        "python": {
          "source": "global_table = dynamodb.Table(self, \"Table\",\n    partition_key=dynamodb.Attribute(name=\"id\", type=dynamodb.AttributeType.STRING),\n    replication_regions=[\"us-east-1\", \"us-east-2\", \"us-west-2\"],\n    replication_timeout=Duration.hours(2)\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Table globalTable = new Table(this, \"Table\", new TableProps {\n    PartitionKey = new Attribute { Name = \"id\", Type = AttributeType.STRING },\n    ReplicationRegions = new [] { \"us-east-1\", \"us-east-2\", \"us-west-2\" },\n    ReplicationTimeout = Duration.Hours(2)\n});",
          "version": "1"
        },
        "java": {
          "source": "Table globalTable = Table.Builder.create(this, \"Table\")\n        .partitionKey(Attribute.builder().name(\"id\").type(AttributeType.STRING).build())\n        .replicationRegions(List.of(\"us-east-1\", \"us-east-2\", \"us-west-2\"))\n        .replicationTimeout(Duration.hours(2))\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const globalTable = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  replicationRegions: ['us-east-1', 'us-east-2', 'us-west-2'],\n  replicationTimeout: Duration.hours(2), // defaults to Duration.minutes(30)\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-dynamodb"
        },
        "field": {
          "field": "markdown",
          "line": 126
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.TableProps",
        "@aws-cdk/core.Duration",
        "@aws-cdk/core.Duration#hours"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst globalTable = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  replicationRegions: ['us-east-1', 'us-east-2', 'us-west-2'],\n  replicationTimeout: Duration.hours(2), // defaults to Duration.minutes(30)\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 5,
        "75": 13,
        "104": 1,
        "192": 1,
        "193": 2,
        "194": 4,
        "196": 1,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "b900b6cdb8be1e2192482bb388676795d24bafb86a6b5a633bac588d18476d5c"
    },
    "39ddcad52841dcde85be9107aea646fa59279b0950153eb84063de6c55e312c0": {
      "translations": {
        "python": {
          "source": "table = dynamodb.Table(self, \"MyTable\",\n    partition_key=dynamodb.Attribute(name=\"id\", type=dynamodb.AttributeType.STRING),\n    encryption=dynamodb.TableEncryption.CUSTOMER_MANAGED\n)\n\n# You can access the CMK that was added to the stack on your behalf by the Table construct via:\ntable_encryption_key = table.encryption_key",
          "version": "1"
        },
        "csharp": {
          "source": "Table table = new Table(this, \"MyTable\", new TableProps {\n    PartitionKey = new Attribute { Name = \"id\", Type = AttributeType.STRING },\n    Encryption = TableEncryption.CUSTOMER_MANAGED\n});\n\n// You can access the CMK that was added to the stack on your behalf by the Table construct via:\nIKey? tableEncryptionKey = table.EncryptionKey;",
          "version": "1"
        },
        "java": {
          "source": "Table table = Table.Builder.create(this, \"MyTable\")\n        .partitionKey(Attribute.builder().name(\"id\").type(AttributeType.STRING).build())\n        .encryption(TableEncryption.CUSTOMER_MANAGED)\n        .build();\n\n// You can access the CMK that was added to the stack on your behalf by the Table construct via:\nIKey tableEncryptionKey = table.getEncryptionKey();",
          "version": "1"
        },
        "$": {
          "source": "const table = new dynamodb.Table(this, 'MyTable', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  encryption: dynamodb.TableEncryption.CUSTOMER_MANAGED,\n});\n\n// You can access the CMK that was added to the stack on your behalf by the Table construct via:\nconst tableEncryptionKey = table.encryptionKey;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-dynamodb"
        },
        "field": {
          "field": "markdown",
          "line": 144
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.Table#encryptionKey",
        "@aws-cdk/aws-dynamodb.TableEncryption",
        "@aws-cdk/aws-dynamodb.TableEncryption#CUSTOMER_MANAGED",
        "@aws-cdk/aws-dynamodb.TableProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst table = new dynamodb.Table(this, 'MyTable', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  encryption: dynamodb.TableEncryption.CUSTOMER_MANAGED,\n});\n\n// You can access the CMK that was added to the stack on your behalf by the Table construct via:\nconst tableEncryptionKey = table.encryptionKey;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "104": 1,
        "193": 2,
        "194": 6,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4
      },
      "fqnsFingerprint": "28841d105f01f4c37922dfc5c58a1ef05527a341c23b256220ef826b1d921ed2"
    },
    "3896ed901499b173e276795df900dcbfd85fc06492fda10463e681172a048591": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_kms as kms\n\n\nencryption_key = kms.Key(self, \"Key\",\n    enable_key_rotation=True\n)\ntable = dynamodb.Table(self, \"MyTable\",\n    partition_key=dynamodb.Attribute(name=\"id\", type=dynamodb.AttributeType.STRING),\n    encryption=dynamodb.TableEncryption.CUSTOMER_MANAGED,\n    encryption_key=encryption_key\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.KMS;\n\n\nKey encryptionKey = new Key(this, \"Key\", new KeyProps {\n    EnableKeyRotation = true\n});\nTable table = new Table(this, \"MyTable\", new TableProps {\n    PartitionKey = new Attribute { Name = \"id\", Type = AttributeType.STRING },\n    Encryption = TableEncryption.CUSTOMER_MANAGED,\n    EncryptionKey = encryptionKey\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.kms.*;\n\n\nKey encryptionKey = Key.Builder.create(this, \"Key\")\n        .enableKeyRotation(true)\n        .build();\nTable table = Table.Builder.create(this, \"MyTable\")\n        .partitionKey(Attribute.builder().name(\"id\").type(AttributeType.STRING).build())\n        .encryption(TableEncryption.CUSTOMER_MANAGED)\n        .encryptionKey(encryptionKey)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as kms from '@aws-cdk/aws-kms';\n\nconst encryptionKey = new kms.Key(this, 'Key', {\n  enableKeyRotation: true,\n});\nconst table = new dynamodb.Table(this, 'MyTable', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  encryption: dynamodb.TableEncryption.CUSTOMER_MANAGED,\n  encryptionKey, // This will be exposed as table.encryptionKey\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-dynamodb"
        },
        "field": {
          "field": "markdown",
          "line": 156
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.TableEncryption",
        "@aws-cdk/aws-dynamodb.TableEncryption#CUSTOMER_MANAGED",
        "@aws-cdk/aws-dynamodb.TableProps",
        "@aws-cdk/aws-kms.IKey",
        "@aws-cdk/aws-kms.Key",
        "@aws-cdk/aws-kms.KeyProps"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as kms from '@aws-cdk/aws-kms';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst encryptionKey = new kms.Key(this, 'Key', {\n  enableKeyRotation: true,\n});\nconst table = new dynamodb.Table(this, 'MyTable', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  encryption: dynamodb.TableEncryption.CUSTOMER_MANAGED,\n  encryptionKey, // This will be exposed as table.encryptionKey\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 19,
        "104": 2,
        "106": 1,
        "193": 3,
        "194": 6,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 5,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "4a50777252c2659495696dddfc8c033fab31ec170cc64b143f420e7bda15835d"
    },
    "4b5e085927c73559d60bc2091e50c1bf2ed95f64879a50a477a699105a8ae53f": {
      "translations": {
        "python": {
          "source": "table = dynamodb.Table(self, \"MyTable\",\n    partition_key=dynamodb.Attribute(name=\"id\", type=dynamodb.AttributeType.STRING),\n    encryption=dynamodb.TableEncryption.AWS_MANAGED\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Table table = new Table(this, \"MyTable\", new TableProps {\n    PartitionKey = new Attribute { Name = \"id\", Type = AttributeType.STRING },\n    Encryption = TableEncryption.AWS_MANAGED\n});",
          "version": "1"
        },
        "java": {
          "source": "Table table = Table.Builder.create(this, \"MyTable\")\n        .partitionKey(Attribute.builder().name(\"id\").type(AttributeType.STRING).build())\n        .encryption(TableEncryption.AWS_MANAGED)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const table = new dynamodb.Table(this, 'MyTable', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  encryption: dynamodb.TableEncryption.AWS_MANAGED,\n});\n\n// In this case, the CMK _cannot_ be accessed through table.encryptionKey.",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-dynamodb"
        },
        "field": {
          "field": "markdown",
          "line": 171
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.TableEncryption",
        "@aws-cdk/aws-dynamodb.TableEncryption#AWS_MANAGED",
        "@aws-cdk/aws-dynamodb.TableProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst table = new dynamodb.Table(this, 'MyTable', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  encryption: dynamodb.TableEncryption.AWS_MANAGED,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 13,
        "104": 1,
        "193": 2,
        "194": 5,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "b96557083e7ce881f7874116d175b525340de8b91c23391c1bee05d924fcd2d5"
    },
    "55a103e0956f2682190460d5d0ff5fc777bb5cbeda8dcf0f824097e1d5e35a10": {
      "translations": {
        "python": {
          "source": "# table is of type Table\n\nschema = table.schema()\npartition_key = schema.partition_key\nsort_key = schema.sort_key",
          "version": "1"
        },
        "csharp": {
          "source": "Table table;\n\nSchemaOptions schema = table.Schema();\nAttribute partitionKey = schema.PartitionKey;\nAttribute? sortKey = schema.SortKey;",
          "version": "1"
        },
        "java": {
          "source": "Table table;\n\nSchemaOptions schema = table.schema();\nAttribute partitionKey = schema.getPartitionKey();\nAttribute sortKey = schema.getSortKey();",
          "version": "1"
        },
        "$": {
          "source": "declare const table: dynamodb.Table;\nconst schema = table.schema();\nconst partitionKey = schema.partitionKey;\nconst sortKey = schema.sortKey;\n\n// In case you want to get schema details for any secondary index\n// const { partitionKey, sortKey } = table.schema(INDEX_NAME);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-dynamodb"
        },
        "field": {
          "field": "markdown",
          "line": 184
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.SchemaOptions",
        "@aws-cdk/aws-dynamodb.SchemaOptions#partitionKey",
        "@aws-cdk/aws-dynamodb.SchemaOptions#sortKey",
        "@aws-cdk/aws-dynamodb.Table#schema"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const table: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst schema = table.schema();\nconst partitionKey = schema.partitionKey;\nconst sortKey = schema.sortKey;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 12,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 3,
        "196": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "290": 1
      },
      "fqnsFingerprint": "bc3abe0e48d5d964a7aa644af5331e564ba931daf972d94cc0eb3403af328fb5"
    },
    "e761eb72ebae9960c3b1d4f7f984b24a337dd9304ffd89845a73b2b93c450929": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_kinesis as kinesis\n\n\nstream = kinesis.Stream(self, \"Stream\")\n\ntable = dynamodb.Table(self, \"Table\",\n    partition_key=dynamodb.Attribute(name=\"id\", type=dynamodb.AttributeType.STRING),\n    kinesis_stream=stream\n)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Kinesis;\n\n\nStream stream = new Stream(this, \"Stream\");\n\nTable table = new Table(this, \"Table\", new TableProps {\n    PartitionKey = new Attribute { Name = \"id\", Type = AttributeType.STRING },\n    KinesisStream = stream\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.kinesis.*;\n\n\nStream stream = new Stream(this, \"Stream\");\n\nTable table = Table.Builder.create(this, \"Table\")\n        .partitionKey(Attribute.builder().name(\"id\").type(AttributeType.STRING).build())\n        .kinesisStream(stream)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "import * as kinesis from '@aws-cdk/aws-kinesis';\n\nconst stream = new kinesis.Stream(this, 'Stream');\n\nconst table = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  kinesisStream: stream,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-dynamodb"
        },
        "field": {
          "field": "markdown",
          "line": 198
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.TableProps",
        "@aws-cdk/aws-kinesis.IStream",
        "@aws-cdk/aws-kinesis.Stream"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as kinesis from '@aws-cdk/aws-kinesis';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst stream = new kinesis.Stream(this, 'Stream');\n\nconst table = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  kinesisStream: stream,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 15,
        "104": 2,
        "193": 2,
        "194": 4,
        "197": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "62b0ffd93aab90aa467454bfdf39a0998bec6f850ffe01d52f5f75b3bdcae748"
    },
    "d53d74de9c4040cc214f48e260652fef4d45282d276d463896566d6b585f8b4b": {
      "translations": {
        "python": {
          "source": "global_table = dynamodb.Table(self, \"Table\",\n    partition_key=dynamodb.Attribute(name=\"id\", type=dynamodb.AttributeType.STRING),\n    replication_regions=[\"us-east-1\", \"us-east-2\", \"us-west-2\"],\n    billing_mode=dynamodb.BillingMode.PROVISIONED\n)\n\nglobal_table.auto_scale_write_capacity(\n    min_capacity=1,\n    max_capacity=10\n).scale_on_utilization(target_utilization_percent=75)",
          "version": "1"
        },
        "csharp": {
          "source": "Table globalTable = new Table(this, \"Table\", new TableProps {\n    PartitionKey = new Attribute { Name = \"id\", Type = AttributeType.STRING },\n    ReplicationRegions = new [] { \"us-east-1\", \"us-east-2\", \"us-west-2\" },\n    BillingMode = BillingMode.PROVISIONED\n});\n\nglobalTable.AutoScaleWriteCapacity(new EnableScalingProps {\n    MinCapacity = 1,\n    MaxCapacity = 10\n}).ScaleOnUtilization(new UtilizationScalingProps { TargetUtilizationPercent = 75 });",
          "version": "1"
        },
        "java": {
          "source": "Table globalTable = Table.Builder.create(this, \"Table\")\n        .partitionKey(Attribute.builder().name(\"id\").type(AttributeType.STRING).build())\n        .replicationRegions(List.of(\"us-east-1\", \"us-east-2\", \"us-west-2\"))\n        .billingMode(BillingMode.PROVISIONED)\n        .build();\n\nglobalTable.autoScaleWriteCapacity(EnableScalingProps.builder()\n        .minCapacity(1)\n        .maxCapacity(10)\n        .build()).scaleOnUtilization(UtilizationScalingProps.builder().targetUtilizationPercent(75).build());",
          "version": "1"
        },
        "$": {
          "source": "const globalTable = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  replicationRegions: ['us-east-1', 'us-east-2', 'us-west-2'],\n  billingMode: dynamodb.BillingMode.PROVISIONED,\n});\n\nglobalTable.autoScaleWriteCapacity({\n  minCapacity: 1,\n  maxCapacity: 10,\n}).scaleOnUtilization({ targetUtilizationPercent: 75 });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-dynamodb.Attribute"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.BillingMode",
        "@aws-cdk/aws-dynamodb.BillingMode#PROVISIONED",
        "@aws-cdk/aws-dynamodb.EnableScalingProps",
        "@aws-cdk/aws-dynamodb.IScalableTableAttribute#scaleOnUtilization",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.Table#autoScaleWriteCapacity",
        "@aws-cdk/aws-dynamodb.TableProps",
        "@aws-cdk/aws-dynamodb.UtilizationScalingProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst globalTable = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  replicationRegions: ['us-east-1', 'us-east-2', 'us-west-2'],\n  billingMode: dynamodb.BillingMode.PROVISIONED,\n});\n\nglobalTable.autoScaleWriteCapacity({\n  minCapacity: 1,\n  maxCapacity: 10,\n}).scaleOnUtilization({ targetUtilizationPercent: 75 });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 20,
        "104": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 8
      },
      "fqnsFingerprint": "914b998cdbd29112b226076ef4c501d8ea19fde7f7e85c15d00fb60ca29f0847"
    },
    "794482840a27f833a239967299f4e1d1b7454a19aa301ec2100426d3cd870d98": {
      "translations": {
        "python": {
          "source": "global_table = dynamodb.Table(self, \"Table\",\n    partition_key=dynamodb.Attribute(name=\"id\", type=dynamodb.AttributeType.STRING),\n    replication_regions=[\"us-east-1\", \"us-east-2\", \"us-west-2\"],\n    billing_mode=dynamodb.BillingMode.PROVISIONED\n)\n\nglobal_table.auto_scale_write_capacity(\n    min_capacity=1,\n    max_capacity=10\n).scale_on_utilization(target_utilization_percent=75)",
          "version": "1"
        },
        "csharp": {
          "source": "Table globalTable = new Table(this, \"Table\", new TableProps {\n    PartitionKey = new Attribute { Name = \"id\", Type = AttributeType.STRING },\n    ReplicationRegions = new [] { \"us-east-1\", \"us-east-2\", \"us-west-2\" },\n    BillingMode = BillingMode.PROVISIONED\n});\n\nglobalTable.AutoScaleWriteCapacity(new EnableScalingProps {\n    MinCapacity = 1,\n    MaxCapacity = 10\n}).ScaleOnUtilization(new UtilizationScalingProps { TargetUtilizationPercent = 75 });",
          "version": "1"
        },
        "java": {
          "source": "Table globalTable = Table.Builder.create(this, \"Table\")\n        .partitionKey(Attribute.builder().name(\"id\").type(AttributeType.STRING).build())\n        .replicationRegions(List.of(\"us-east-1\", \"us-east-2\", \"us-west-2\"))\n        .billingMode(BillingMode.PROVISIONED)\n        .build();\n\nglobalTable.autoScaleWriteCapacity(EnableScalingProps.builder()\n        .minCapacity(1)\n        .maxCapacity(10)\n        .build()).scaleOnUtilization(UtilizationScalingProps.builder().targetUtilizationPercent(75).build());",
          "version": "1"
        },
        "$": {
          "source": "const globalTable = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  replicationRegions: ['us-east-1', 'us-east-2', 'us-west-2'],\n  billingMode: dynamodb.BillingMode.PROVISIONED,\n});\n\nglobalTable.autoScaleWriteCapacity({\n  minCapacity: 1,\n  maxCapacity: 10,\n}).scaleOnUtilization({ targetUtilizationPercent: 75 });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-dynamodb.AttributeType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.BillingMode",
        "@aws-cdk/aws-dynamodb.BillingMode#PROVISIONED",
        "@aws-cdk/aws-dynamodb.EnableScalingProps",
        "@aws-cdk/aws-dynamodb.IScalableTableAttribute#scaleOnUtilization",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.Table#autoScaleWriteCapacity",
        "@aws-cdk/aws-dynamodb.TableProps",
        "@aws-cdk/aws-dynamodb.UtilizationScalingProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst globalTable = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  replicationRegions: ['us-east-1', 'us-east-2', 'us-west-2'],\n  billingMode: dynamodb.BillingMode.PROVISIONED,\n});\n\nglobalTable.autoScaleWriteCapacity({\n  minCapacity: 1,\n  maxCapacity: 10,\n}).scaleOnUtilization({ targetUtilizationPercent: 75 });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 20,
        "104": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 8
      },
      "fqnsFingerprint": "914b998cdbd29112b226076ef4c501d8ea19fde7f7e85c15d00fb60ca29f0847"
    },
    "8451775db304911f83d4b943da1203876ea9e5700dc50629e88bf1320e013a99": {
      "translations": {
        "python": {
          "source": "table = dynamodb.Table(self, \"Table\",\n    partition_key=dynamodb.Attribute(name=\"id\", type=dynamodb.AttributeType.STRING),\n    billing_mode=dynamodb.BillingMode.PAY_PER_REQUEST\n)",
          "version": "1"
        },
        "csharp": {
          "source": "Table table = new Table(this, \"Table\", new TableProps {\n    PartitionKey = new Attribute { Name = \"id\", Type = AttributeType.STRING },\n    BillingMode = BillingMode.PAY_PER_REQUEST\n});",
          "version": "1"
        },
        "java": {
          "source": "Table table = Table.Builder.create(this, \"Table\")\n        .partitionKey(Attribute.builder().name(\"id\").type(AttributeType.STRING).build())\n        .billingMode(BillingMode.PAY_PER_REQUEST)\n        .build();",
          "version": "1"
        },
        "$": {
          "source": "const table = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-dynamodb.BillingMode"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.BillingMode",
        "@aws-cdk/aws-dynamodb.BillingMode#PAY_PER_REQUEST",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.TableProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst table = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 13,
        "104": 1,
        "193": 2,
        "194": 5,
        "197": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "281": 4
      },
      "fqnsFingerprint": "c98efcc5f0ccdf99c14f53aa75f5db75fb235d07c6694e8dee5c06f731c3ecf0"
    },
    "ea72aad82e4306245fa3cdeb20ddb197d1554ce27823b293bf445f3ca5e7ebc5": {
      "translations": {
        "python": {
          "source": "global_table = dynamodb.Table(self, \"Table\",\n    partition_key=dynamodb.Attribute(name=\"id\", type=dynamodb.AttributeType.STRING),\n    replication_regions=[\"us-east-1\", \"us-east-2\", \"us-west-2\"],\n    billing_mode=dynamodb.BillingMode.PROVISIONED\n)\n\nglobal_table.auto_scale_write_capacity(\n    min_capacity=1,\n    max_capacity=10\n).scale_on_utilization(target_utilization_percent=75)",
          "version": "1"
        },
        "csharp": {
          "source": "Table globalTable = new Table(this, \"Table\", new TableProps {\n    PartitionKey = new Attribute { Name = \"id\", Type = AttributeType.STRING },\n    ReplicationRegions = new [] { \"us-east-1\", \"us-east-2\", \"us-west-2\" },\n    BillingMode = BillingMode.PROVISIONED\n});\n\nglobalTable.AutoScaleWriteCapacity(new EnableScalingProps {\n    MinCapacity = 1,\n    MaxCapacity = 10\n}).ScaleOnUtilization(new UtilizationScalingProps { TargetUtilizationPercent = 75 });",
          "version": "1"
        },
        "java": {
          "source": "Table globalTable = Table.Builder.create(this, \"Table\")\n        .partitionKey(Attribute.builder().name(\"id\").type(AttributeType.STRING).build())\n        .replicationRegions(List.of(\"us-east-1\", \"us-east-2\", \"us-west-2\"))\n        .billingMode(BillingMode.PROVISIONED)\n        .build();\n\nglobalTable.autoScaleWriteCapacity(EnableScalingProps.builder()\n        .minCapacity(1)\n        .maxCapacity(10)\n        .build()).scaleOnUtilization(UtilizationScalingProps.builder().targetUtilizationPercent(75).build());",
          "version": "1"
        },
        "$": {
          "source": "const globalTable = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  replicationRegions: ['us-east-1', 'us-east-2', 'us-west-2'],\n  billingMode: dynamodb.BillingMode.PROVISIONED,\n});\n\nglobalTable.autoScaleWriteCapacity({\n  minCapacity: 1,\n  maxCapacity: 10,\n}).scaleOnUtilization({ targetUtilizationPercent: 75 });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-dynamodb.EnableScalingProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.BillingMode",
        "@aws-cdk/aws-dynamodb.BillingMode#PROVISIONED",
        "@aws-cdk/aws-dynamodb.EnableScalingProps",
        "@aws-cdk/aws-dynamodb.IScalableTableAttribute#scaleOnUtilization",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.Table#autoScaleWriteCapacity",
        "@aws-cdk/aws-dynamodb.TableProps",
        "@aws-cdk/aws-dynamodb.UtilizationScalingProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst globalTable = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  replicationRegions: ['us-east-1', 'us-east-2', 'us-west-2'],\n  billingMode: dynamodb.BillingMode.PROVISIONED,\n});\n\nglobalTable.autoScaleWriteCapacity({\n  minCapacity: 1,\n  maxCapacity: 10,\n}).scaleOnUtilization({ targetUtilizationPercent: 75 });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 20,
        "104": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 8
      },
      "fqnsFingerprint": "914b998cdbd29112b226076ef4c501d8ea19fde7f7e85c15d00fb60ca29f0847"
    },
    "1b1c301f160345a4930ffdbd66a3fa9a2106a55c2d37d4dfcc928bc0b3ce309f": {
      "translations": {
        "python": {
          "source": "# table is of type Table\n\nschema = table.schema()\npartition_key = schema.partition_key\nsort_key = schema.sort_key",
          "version": "1"
        },
        "csharp": {
          "source": "Table table;\n\nSchemaOptions schema = table.Schema();\nAttribute partitionKey = schema.PartitionKey;\nAttribute? sortKey = schema.SortKey;",
          "version": "1"
        },
        "java": {
          "source": "Table table;\n\nSchemaOptions schema = table.schema();\nAttribute partitionKey = schema.getPartitionKey();\nAttribute sortKey = schema.getSortKey();",
          "version": "1"
        },
        "$": {
          "source": "declare const table: dynamodb.Table;\nconst schema = table.schema();\nconst partitionKey = schema.partitionKey;\nconst sortKey = schema.sortKey;\n\n// In case you want to get schema details for any secondary index\n// const { partitionKey, sortKey } = table.schema(INDEX_NAME);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-dynamodb.SchemaOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.SchemaOptions",
        "@aws-cdk/aws-dynamodb.SchemaOptions#partitionKey",
        "@aws-cdk/aws-dynamodb.SchemaOptions#sortKey",
        "@aws-cdk/aws-dynamodb.Table#schema"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const table: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\n\nconst schema = table.schema();\nconst partitionKey = schema.partitionKey;\nconst sortKey = schema.sortKey;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "75": 12,
        "130": 1,
        "153": 1,
        "169": 1,
        "194": 3,
        "196": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "290": 1
      },
      "fqnsFingerprint": "bc3abe0e48d5d964a7aa644af5331e564ba931daf972d94cc0eb3403af328fb5"
    },
    "128133fad3c664d468722635bd04787589a5baaed6f2351f82f015f31f190fd1": {
      "translations": {
        "python": {
          "source": "global_table = dynamodb.Table(self, \"Table\",\n    partition_key=dynamodb.Attribute(name=\"id\", type=dynamodb.AttributeType.STRING),\n    replication_regions=[\"us-east-1\", \"us-east-2\", \"us-west-2\"],\n    billing_mode=dynamodb.BillingMode.PROVISIONED\n)\n\nglobal_table.auto_scale_write_capacity(\n    min_capacity=1,\n    max_capacity=10\n).scale_on_utilization(target_utilization_percent=75)",
          "version": "1"
        },
        "csharp": {
          "source": "Table globalTable = new Table(this, \"Table\", new TableProps {\n    PartitionKey = new Attribute { Name = \"id\", Type = AttributeType.STRING },\n    ReplicationRegions = new [] { \"us-east-1\", \"us-east-2\", \"us-west-2\" },\n    BillingMode = BillingMode.PROVISIONED\n});\n\nglobalTable.AutoScaleWriteCapacity(new EnableScalingProps {\n    MinCapacity = 1,\n    MaxCapacity = 10\n}).ScaleOnUtilization(new UtilizationScalingProps { TargetUtilizationPercent = 75 });",
          "version": "1"
        },
        "java": {
          "source": "Table globalTable = Table.Builder.create(this, \"Table\")\n        .partitionKey(Attribute.builder().name(\"id\").type(AttributeType.STRING).build())\n        .replicationRegions(List.of(\"us-east-1\", \"us-east-2\", \"us-west-2\"))\n        .billingMode(BillingMode.PROVISIONED)\n        .build();\n\nglobalTable.autoScaleWriteCapacity(EnableScalingProps.builder()\n        .minCapacity(1)\n        .maxCapacity(10)\n        .build()).scaleOnUtilization(UtilizationScalingProps.builder().targetUtilizationPercent(75).build());",
          "version": "1"
        },
        "$": {
          "source": "const globalTable = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  replicationRegions: ['us-east-1', 'us-east-2', 'us-west-2'],\n  billingMode: dynamodb.BillingMode.PROVISIONED,\n});\n\nglobalTable.autoScaleWriteCapacity({\n  minCapacity: 1,\n  maxCapacity: 10,\n}).scaleOnUtilization({ targetUtilizationPercent: 75 });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-dynamodb.Table"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.BillingMode",
        "@aws-cdk/aws-dynamodb.BillingMode#PROVISIONED",
        "@aws-cdk/aws-dynamodb.EnableScalingProps",
        "@aws-cdk/aws-dynamodb.IScalableTableAttribute#scaleOnUtilization",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.Table#autoScaleWriteCapacity",
        "@aws-cdk/aws-dynamodb.TableProps",
        "@aws-cdk/aws-dynamodb.UtilizationScalingProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst globalTable = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  replicationRegions: ['us-east-1', 'us-east-2', 'us-west-2'],\n  billingMode: dynamodb.BillingMode.PROVISIONED,\n});\n\nglobalTable.autoScaleWriteCapacity({\n  minCapacity: 1,\n  maxCapacity: 10,\n}).scaleOnUtilization({ targetUtilizationPercent: 75 });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 20,
        "104": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 8
      },
      "fqnsFingerprint": "914b998cdbd29112b226076ef4c501d8ea19fde7f7e85c15d00fb60ca29f0847"
    },
    "e6d627ee7d2a83287dca69fef67f7bb589355e16a45e81661d742e66d48a8733": {
      "translations": {
        "python": {
          "source": "table = dynamodb.Table(self, \"MyTable\",\n    partition_key=dynamodb.Attribute(name=\"id\", type=dynamodb.AttributeType.STRING),\n    encryption=dynamodb.TableEncryption.CUSTOMER_MANAGED\n)\n\n# You can access the CMK that was added to the stack on your behalf by the Table construct via:\ntable_encryption_key = table.encryption_key",
          "version": "1"
        },
        "csharp": {
          "source": "Table table = new Table(this, \"MyTable\", new TableProps {\n    PartitionKey = new Attribute { Name = \"id\", Type = AttributeType.STRING },\n    Encryption = TableEncryption.CUSTOMER_MANAGED\n});\n\n// You can access the CMK that was added to the stack on your behalf by the Table construct via:\nIKey? tableEncryptionKey = table.EncryptionKey;",
          "version": "1"
        },
        "java": {
          "source": "Table table = Table.Builder.create(this, \"MyTable\")\n        .partitionKey(Attribute.builder().name(\"id\").type(AttributeType.STRING).build())\n        .encryption(TableEncryption.CUSTOMER_MANAGED)\n        .build();\n\n// You can access the CMK that was added to the stack on your behalf by the Table construct via:\nIKey tableEncryptionKey = table.getEncryptionKey();",
          "version": "1"
        },
        "$": {
          "source": "const table = new dynamodb.Table(this, 'MyTable', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  encryption: dynamodb.TableEncryption.CUSTOMER_MANAGED,\n});\n\n// You can access the CMK that was added to the stack on your behalf by the Table construct via:\nconst tableEncryptionKey = table.encryptionKey;",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-dynamodb.TableEncryption"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.Table#encryptionKey",
        "@aws-cdk/aws-dynamodb.TableEncryption",
        "@aws-cdk/aws-dynamodb.TableEncryption#CUSTOMER_MANAGED",
        "@aws-cdk/aws-dynamodb.TableProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst table = new dynamodb.Table(this, 'MyTable', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  encryption: dynamodb.TableEncryption.CUSTOMER_MANAGED,\n});\n\n// You can access the CMK that was added to the stack on your behalf by the Table construct via:\nconst tableEncryptionKey = table.encryptionKey;\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "104": 1,
        "193": 2,
        "194": 6,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "281": 4
      },
      "fqnsFingerprint": "28841d105f01f4c37922dfc5c58a1ef05527a341c23b256220ef826b1d921ed2"
    },
    "d9c697c653779e41df83d4d2a37848d2cb0340d72f40b58755bb002198b52583": {
      "translations": {
        "python": {
          "source": "global_table = dynamodb.Table(self, \"Table\",\n    partition_key=dynamodb.Attribute(name=\"id\", type=dynamodb.AttributeType.STRING),\n    replication_regions=[\"us-east-1\", \"us-east-2\", \"us-west-2\"],\n    billing_mode=dynamodb.BillingMode.PROVISIONED\n)\n\nglobal_table.auto_scale_write_capacity(\n    min_capacity=1,\n    max_capacity=10\n).scale_on_utilization(target_utilization_percent=75)",
          "version": "1"
        },
        "csharp": {
          "source": "Table globalTable = new Table(this, \"Table\", new TableProps {\n    PartitionKey = new Attribute { Name = \"id\", Type = AttributeType.STRING },\n    ReplicationRegions = new [] { \"us-east-1\", \"us-east-2\", \"us-west-2\" },\n    BillingMode = BillingMode.PROVISIONED\n});\n\nglobalTable.AutoScaleWriteCapacity(new EnableScalingProps {\n    MinCapacity = 1,\n    MaxCapacity = 10\n}).ScaleOnUtilization(new UtilizationScalingProps { TargetUtilizationPercent = 75 });",
          "version": "1"
        },
        "java": {
          "source": "Table globalTable = Table.Builder.create(this, \"Table\")\n        .partitionKey(Attribute.builder().name(\"id\").type(AttributeType.STRING).build())\n        .replicationRegions(List.of(\"us-east-1\", \"us-east-2\", \"us-west-2\"))\n        .billingMode(BillingMode.PROVISIONED)\n        .build();\n\nglobalTable.autoScaleWriteCapacity(EnableScalingProps.builder()\n        .minCapacity(1)\n        .maxCapacity(10)\n        .build()).scaleOnUtilization(UtilizationScalingProps.builder().targetUtilizationPercent(75).build());",
          "version": "1"
        },
        "$": {
          "source": "const globalTable = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  replicationRegions: ['us-east-1', 'us-east-2', 'us-west-2'],\n  billingMode: dynamodb.BillingMode.PROVISIONED,\n});\n\nglobalTable.autoScaleWriteCapacity({\n  minCapacity: 1,\n  maxCapacity: 10,\n}).scaleOnUtilization({ targetUtilizationPercent: 75 });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-dynamodb.TableProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.BillingMode",
        "@aws-cdk/aws-dynamodb.BillingMode#PROVISIONED",
        "@aws-cdk/aws-dynamodb.EnableScalingProps",
        "@aws-cdk/aws-dynamodb.IScalableTableAttribute#scaleOnUtilization",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.Table#autoScaleWriteCapacity",
        "@aws-cdk/aws-dynamodb.TableProps",
        "@aws-cdk/aws-dynamodb.UtilizationScalingProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst globalTable = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  replicationRegions: ['us-east-1', 'us-east-2', 'us-west-2'],\n  billingMode: dynamodb.BillingMode.PROVISIONED,\n});\n\nglobalTable.autoScaleWriteCapacity({\n  minCapacity: 1,\n  maxCapacity: 10,\n}).scaleOnUtilization({ targetUtilizationPercent: 75 });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 20,
        "104": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 8
      },
      "fqnsFingerprint": "914b998cdbd29112b226076ef4c501d8ea19fde7f7e85c15d00fb60ca29f0847"
    },
    "247542d957ea4d68723297979312d1084a09e6f43b7e6933b19502070fc1808c": {
      "translations": {
        "python": {
          "source": "global_table = dynamodb.Table(self, \"Table\",\n    partition_key=dynamodb.Attribute(name=\"id\", type=dynamodb.AttributeType.STRING),\n    replication_regions=[\"us-east-1\", \"us-east-2\", \"us-west-2\"],\n    billing_mode=dynamodb.BillingMode.PROVISIONED\n)\n\nglobal_table.auto_scale_write_capacity(\n    min_capacity=1,\n    max_capacity=10\n).scale_on_utilization(target_utilization_percent=75)",
          "version": "1"
        },
        "csharp": {
          "source": "Table globalTable = new Table(this, \"Table\", new TableProps {\n    PartitionKey = new Attribute { Name = \"id\", Type = AttributeType.STRING },\n    ReplicationRegions = new [] { \"us-east-1\", \"us-east-2\", \"us-west-2\" },\n    BillingMode = BillingMode.PROVISIONED\n});\n\nglobalTable.AutoScaleWriteCapacity(new EnableScalingProps {\n    MinCapacity = 1,\n    MaxCapacity = 10\n}).ScaleOnUtilization(new UtilizationScalingProps { TargetUtilizationPercent = 75 });",
          "version": "1"
        },
        "java": {
          "source": "Table globalTable = Table.Builder.create(this, \"Table\")\n        .partitionKey(Attribute.builder().name(\"id\").type(AttributeType.STRING).build())\n        .replicationRegions(List.of(\"us-east-1\", \"us-east-2\", \"us-west-2\"))\n        .billingMode(BillingMode.PROVISIONED)\n        .build();\n\nglobalTable.autoScaleWriteCapacity(EnableScalingProps.builder()\n        .minCapacity(1)\n        .maxCapacity(10)\n        .build()).scaleOnUtilization(UtilizationScalingProps.builder().targetUtilizationPercent(75).build());",
          "version": "1"
        },
        "$": {
          "source": "const globalTable = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  replicationRegions: ['us-east-1', 'us-east-2', 'us-west-2'],\n  billingMode: dynamodb.BillingMode.PROVISIONED,\n});\n\nglobalTable.autoScaleWriteCapacity({\n  minCapacity: 1,\n  maxCapacity: 10,\n}).scaleOnUtilization({ targetUtilizationPercent: 75 });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-dynamodb.UtilizationScalingProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-dynamodb.Attribute",
        "@aws-cdk/aws-dynamodb.AttributeType",
        "@aws-cdk/aws-dynamodb.AttributeType#STRING",
        "@aws-cdk/aws-dynamodb.BillingMode",
        "@aws-cdk/aws-dynamodb.BillingMode#PROVISIONED",
        "@aws-cdk/aws-dynamodb.EnableScalingProps",
        "@aws-cdk/aws-dynamodb.IScalableTableAttribute#scaleOnUtilization",
        "@aws-cdk/aws-dynamodb.Table",
        "@aws-cdk/aws-dynamodb.Table#autoScaleWriteCapacity",
        "@aws-cdk/aws-dynamodb.TableProps",
        "@aws-cdk/aws-dynamodb.UtilizationScalingProps"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Duration, Stack } from '@aws-cdk/core';\nimport dynamodb = require('@aws-cdk/aws-dynamodb');\nimport iam = require('@aws-cdk/aws-iam');\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst globalTable = new dynamodb.Table(this, 'Table', {\n  partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },\n  replicationRegions: ['us-east-1', 'us-east-2', 'us-west-2'],\n  billingMode: dynamodb.BillingMode.PROVISIONED,\n});\n\nglobalTable.autoScaleWriteCapacity({\n  minCapacity: 1,\n  maxCapacity: 10,\n}).scaleOnUtilization({ targetUtilizationPercent: 75 });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 3,
        "10": 5,
        "75": 20,
        "104": 1,
        "192": 1,
        "193": 4,
        "194": 7,
        "196": 2,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 8
      },
      "fqnsFingerprint": "914b998cdbd29112b226076ef4c501d8ea19fde7f7e85c15d00fb60ca29f0847"
    }
  }
}
