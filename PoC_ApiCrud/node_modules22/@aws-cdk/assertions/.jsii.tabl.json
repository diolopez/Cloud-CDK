{
  "version": "2",
  "toolVersion": "1.47.0",
  "snippets": {
    "50bfa2368f99d1833abc3dfd776ae6e3363396972f1bc5215f257e011cbef319": {
      "translations": {
        "python": {
          "source": "from aws_cdk.core import Stack\nfrom aws_cdk.assertions import Template\n\nstack = Stack()\n# ...\ntemplate = Template.from_stack(stack)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.Assertions;\n\nStack stack = new Stack();\n// ...\nTemplate template = Template.FromStack(stack);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.assertions.Template;\n\nStack stack = new Stack();\n// ...\nTemplate template = Template.fromStack(stack);",
          "version": "1"
        },
        "$": {
          "source": "import { Stack } from '@aws-cdk/core';\nimport { Template } from '@aws-cdk/assertions';\n\nconst stack = new Stack(/* ... */);\n// ...\nconst template = Template.fromStack(stack);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/assertions"
        },
        "field": {
          "field": "markdown",
          "line": 18
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assertions.Template",
        "@aws-cdk/assertions.Template#fromStack",
        "@aws-cdk/core.Stack"
      ],
      "fullSource": "import { Stack } from '@aws-cdk/core';\nimport { Template } from '@aws-cdk/assertions';\n\nconst stack = new Stack(/* ... */);\n// ...\nconst template = Template.fromStack(stack);",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "194": 1,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "290": 1
      },
      "fqnsFingerprint": "19971d4a11282c9fbc81b4bb399e63b84a66710cb2e531afe30fde97d36f7cd1"
    },
    "dde1e3ebcf5b96a222f0cbc619349dd525bee3876e4e3e0e4f09a5d00cb4990c": {
      "translations": {
        "python": {
          "source": "template_json = \"{ \\\"Resources\\\": ... }\" # The CloudFormation template as JSON serialized string.\ntemplate = Template.from_string(template_json)",
          "version": "1"
        },
        "csharp": {
          "source": "string templateJson = \"{ \\\"Resources\\\": ... }\"; /* The CloudFormation template as JSON serialized string. */\nTemplate template = Template.FromString(templateJson);",
          "version": "1"
        },
        "java": {
          "source": "String templateJson = \"{ \\\"Resources\\\": ... }\"; /* The CloudFormation template as JSON serialized string. */\nTemplate template = Template.fromString(templateJson);",
          "version": "1"
        },
        "$": {
          "source": "const templateJson = '{ \"Resources\": ... }'; /* The CloudFormation template as JSON serialized string. */\nconst template = Template.fromString(templateJson);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/assertions"
        },
        "field": {
          "field": "markdown",
          "line": 29
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assertions.Template",
        "@aws-cdk/assertions.Template#fromString"
      ],
      "fullSource": "import { Template } from '@aws-cdk/assertions';\n\n// Code snippet begins after !show marker below\n/// !show\nconst templateJson = '{ \"Resources\": ... }'; /* The CloudFormation template as JSON serialized string. */\nconst template = Template.fromString(templateJson);\n/// !hide\n// Code snippet ended before !hide marker above",
      "syntaxKindCounter": {
        "10": 1,
        "75": 5,
        "194": 1,
        "196": 1,
        "225": 2,
        "242": 2,
        "243": 2
      },
      "fqnsFingerprint": "3adddf6592362ed5837b3937fed9a81f177d035bdb894cc969371a95d5c97bc5"
    },
    "3fd5d4d934e8e0bc114cfd684c13a4649152ed10756b5b611eb707b1b294eede": {
      "translations": {
        "python": {
          "source": "template.template_matches({\n    \"Resources\": {\n        \"BarLogicalId\": {\n            \"Type\": \"Foo::Bar\",\n            \"Properties\": {\n                \"Baz\": \"Qux\"\n            }\n        }\n    }\n})",
          "version": "1"
        },
        "csharp": {
          "source": "template.TemplateMatches(new Dictionary<string, IDictionary<string, IDictionary<string, object>>> {\n    { \"Resources\", new Struct {\n        BarLogicalId = new Struct {\n            Type = \"Foo::Bar\",\n            Properties = new Struct {\n                Baz = \"Qux\"\n            }\n        }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "template.templateMatches(Map.of(\n        \"Resources\", Map.of(\n                \"BarLogicalId\", Map.of(\n                        \"Type\", \"Foo::Bar\",\n                        \"Properties\", Map.of(\n                                \"Baz\", \"Qux\")))));",
          "version": "1"
        },
        "$": {
          "source": "template.templateMatches({\n  Resources: {\n    BarLogicalId: {\n      Type: 'Foo::Bar',\n      Properties: {\n        Baz: 'Qux',\n      },\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/assertions"
        },
        "field": {
          "field": "markdown",
          "line": 39
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assertions.Template#templateMatches"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport { Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\ntemplate.templateMatches({\n  Resources: {\n    BarLogicalId: {\n      Type: 'Foo::Bar',\n      Properties: {\n        Baz: 'Qux',\n      },\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 7,
        "193": 4,
        "194": 1,
        "196": 1,
        "226": 1,
        "281": 5
      },
      "fqnsFingerprint": "669485a32cabf563c2d3a61c22166ad9acd66b62d5ac7096489004f46142d5b9"
    },
    "58b2bb454020b934de6c0df743fa954790557c4c47aa69a321ed6e7c70f7d55a": {
      "translations": {
        "python": {
          "source": "template.resource_count_is(\"Foo::Bar\", 2)",
          "version": "1"
        },
        "csharp": {
          "source": "template.ResourceCountIs(\"Foo::Bar\", 2);",
          "version": "1"
        },
        "java": {
          "source": "template.resourceCountIs(\"Foo::Bar\", 2);",
          "version": "1"
        },
        "$": {
          "source": "template.resourceCountIs('Foo::Bar', 2);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/assertions"
        },
        "field": {
          "field": "markdown",
          "line": 72
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assertions.Template#resourceCountIs"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport { Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\ntemplate.resourceCountIs('Foo::Bar', 2);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 1,
        "75": 2,
        "194": 1,
        "196": 1,
        "226": 1
      },
      "fqnsFingerprint": "b103fdba4af262ab46acc65c1f48282d3b1e8e44bb6f7d292d3377a728ef3cb1"
    },
    "e6e8b5b162cf33331c5723d09d4589dee12f3314154fb710e9537e41d026ed3e": {
      "translations": {
        "python": {
          "source": "template.has_resource_properties(\"Foo::Bar\", {\n    \"Foo\": \"Bar\",\n    \"Baz\": 5,\n    \"Qux\": [\"Waldo\", \"Fred\"]\n})",
          "version": "1"
        },
        "csharp": {
          "source": "template.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, object> {\n    { \"Foo\", \"Bar\" },\n    { \"Baz\", 5 },\n    { \"Qux\", new [] { \"Waldo\", \"Fred\" } }\n});",
          "version": "1"
        },
        "java": {
          "source": "template.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Foo\", \"Bar\",\n        \"Baz\", 5,\n        \"Qux\", List.of(\"Waldo\", \"Fred\")));",
          "version": "1"
        },
        "$": {
          "source": "template.hasResourceProperties('Foo::Bar', {\n  Foo: 'Bar',\n  Baz: 5,\n  Qux: [ 'Waldo', 'Fred' ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/assertions"
        },
        "field": {
          "field": "markdown",
          "line": 84
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assertions.Template#hasResourceProperties"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport { Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\ntemplate.hasResourceProperties('Foo::Bar', {\n  Foo: 'Bar',\n  Baz: 5,\n  Qux: [ 'Waldo', 'Fred' ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "8": 1,
        "10": 4,
        "75": 5,
        "192": 1,
        "193": 1,
        "194": 1,
        "196": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "7c24accab321682703aa2c3ed7a68b84ed7c9aa61125bf8eb2e53314a4ea0463"
    },
    "6445c16d25a4915cb705e34aa0e2ae9be5f4849da8d03152186fd610965de68d": {
      "translations": {
        "python": {
          "source": "template.has_resource(\"Foo::Bar\", {\n    \"Properties\": {\"Foo\": \"Bar\"},\n    \"DependsOn\": [\"Waldo\", \"Fred\"]\n})",
          "version": "1"
        },
        "csharp": {
          "source": "template.HasResource(\"Foo::Bar\", new Dictionary<string, object> {\n    { \"Properties\", new Struct { Foo = \"Bar\" } },\n    { \"DependsOn\", new [] { \"Waldo\", \"Fred\" } }\n});",
          "version": "1"
        },
        "java": {
          "source": "template.hasResource(\"Foo::Bar\", Map.of(\n        \"Properties\", Map.of(\"Foo\", \"Bar\"),\n        \"DependsOn\", List.of(\"Waldo\", \"Fred\")));",
          "version": "1"
        },
        "$": {
          "source": "template.hasResource('Foo::Bar', {\n  Properties: { Foo: 'Bar' },\n  DependsOn: [ 'Waldo', 'Fred' ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/assertions"
        },
        "field": {
          "field": "markdown",
          "line": 95
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assertions.Template#hasResource"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport { Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\ntemplate.hasResource('Foo::Bar', {\n  Properties: { Foo: 'Bar' },\n  DependsOn: [ 'Waldo', 'Fred' ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 5,
        "192": 1,
        "193": 2,
        "194": 1,
        "196": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "85902b924b2f9af5369c10cb8ee56b1cc607c2a0cf49f3c6dc3cfc32357b0d61"
    },
    "83b81076e9d003ebbb806290f131502c93d006f0a673a43fcf9788af9f1ec9f9": {
      "translations": {
        "python": {
          "source": "expected = {\n    \"Value\": \"Bar\",\n    \"Export\": {\"Name\": \"ExportBaz\"}\n}\ntemplate.has_output(\"Foo\", expected)",
          "version": "1"
        },
        "csharp": {
          "source": "IDictionary<string, object> expected = new Dictionary<string, object> {\n    { \"Value\", \"Bar\" },\n    { \"Export\", new Dictionary<string, string> { { \"Name\", \"ExportBaz\" } } }\n};\ntemplate.HasOutput(\"Foo\", expected);",
          "version": "1"
        },
        "java": {
          "source": "Map<String, Object> expected = Map.of(\n        \"Value\", \"Bar\",\n        \"Export\", Map.of(\"Name\", \"ExportBaz\"));\ntemplate.hasOutput(\"Foo\", expected);",
          "version": "1"
        },
        "$": {
          "source": "const expected = {\n  Value: 'Bar',\n  Export: { Name: 'ExportBaz' },\n};\ntemplate.hasOutput('Foo', expected);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/assertions"
        },
        "field": {
          "field": "markdown",
          "line": 116
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assertions.Template#hasOutput"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport { Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst expected = {\n  Value: 'Bar',\n  Export: { Name: 'ExportBaz' },\n};\ntemplate.hasOutput('Foo', expected);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "193": 2,
        "194": 1,
        "196": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3
      },
      "fqnsFingerprint": "e77a36ad54319a221bc231e24654b295f53959efbce4eb622581f1ad9feba1f5"
    },
    "3c26b199e49159b11b9b63be350a9375886d8e8e7df3ec07d852b1f7c73df58e": {
      "translations": {
        "python": {
          "source": "template.has_output(\"*\", {\n    \"Value\": \"Bar\",\n    \"Export\": {\"Name\": \"ExportBaz\"}\n})",
          "version": "1"
        },
        "csharp": {
          "source": "template.HasOutput(\"*\", new Dictionary<string, object> {\n    { \"Value\", \"Bar\" },\n    { \"Export\", new Struct { Name = \"ExportBaz\" } }\n});",
          "version": "1"
        },
        "java": {
          "source": "template.hasOutput(\"*\", Map.of(\n        \"Value\", \"Bar\",\n        \"Export\", Map.of(\"Name\", \"ExportBaz\")));",
          "version": "1"
        },
        "$": {
          "source": "template.hasOutput('*', {\n  Value: 'Bar',\n  Export: { Name: 'ExportBaz' },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/assertions"
        },
        "field": {
          "field": "markdown",
          "line": 126
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assertions.Template#hasOutput"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport { Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\ntemplate.hasOutput('*', {\n  Value: 'Bar',\n  Export: { Name: 'ExportBaz' },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 5,
        "193": 2,
        "194": 1,
        "196": 1,
        "226": 1,
        "281": 3
      },
      "fqnsFingerprint": "e77a36ad54319a221bc231e24654b295f53959efbce4eb622581f1ad9feba1f5"
    },
    "de9c868af298be2c11b4e1554c6464056f204a882bccc0bb0da12fe1f3c84a23": {
      "translations": {
        "python": {
          "source": "result = template.find_outputs(\"*\", {\"Value\": \"Fred\"})\nexpect(result.Foo).to_equal({\"Value\": \"Fred\", \"Description\": \"FooFred\"})\nexpect(result.Bar).to_equal({\"Value\": \"Fred\", \"Description\": \"BarFred\"})",
          "version": "1"
        },
        "csharp": {
          "source": "IDictionary<string, IDictionary<string, object>> result = template.FindOutputs(\"*\", new Dictionary<string, string> { { \"Value\", \"Fred\" } });\nExpect(result.Foo).ToEqual(new Dictionary<string, string> { { \"Value\", \"Fred\" }, { \"Description\", \"FooFred\" } });\nExpect(result.Bar).ToEqual(new Dictionary<string, string> { { \"Value\", \"Fred\" }, { \"Description\", \"BarFred\" } });",
          "version": "1"
        },
        "java": {
          "source": "Map<String, Map<String, Object>> result = template.findOutputs(\"*\", Map.of(\"Value\", \"Fred\"));\nexpect(result.Foo).toEqual(Map.of(\"Value\", \"Fred\", \"Description\", \"FooFred\"));\nexpect(result.Bar).toEqual(Map.of(\"Value\", \"Fred\", \"Description\", \"BarFred\"));",
          "version": "1"
        },
        "$": {
          "source": "const result = template.findOutputs('*', { Value: 'Fred' });\nexpect(result.Foo).toEqual({ Value: 'Fred', Description: 'FooFred' });\nexpect(result.Bar).toEqual({ Value: 'Fred', Description: 'BarFred' });",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/assertions"
        },
        "field": {
          "field": "markdown",
          "line": 136
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assertions.Template#findOutputs"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport { Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\nconst result = template.findOutputs('*', { Value: 'Fred' });\nexpect(result.Foo).toEqual({ Value: 'Fred', Description: 'FooFred' });\nexpect(result.Bar).toEqual({ Value: 'Fred', Description: 'BarFred' });\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 6,
        "75": 16,
        "193": 3,
        "194": 5,
        "196": 5,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 5
      },
      "fqnsFingerprint": "10a451e0ffdbb33ebf3713293e324af0a9637bef50b34b1f4e660f8c960e9293"
    },
    "4e5351aa164e776ee980b5dc1ccaf73554e0f94f4f82ec9d50bb229d90bba6e6": {
      "translations": {
        "python": {
          "source": "# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": {\n#           \"Wobble\": \"Flob\",\n#           \"Bob\": \"Cat\"\n#         }\n#       }\n#     }\n#   }\n# }\n\n# The following will NOT throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": Match.object_like({\n        \"Wobble\": \"Flob\"\n    })\n})\n\n# The following will throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": Match.object_like({\n        \"Brew\": \"Coffee\"\n    })\n})",
          "version": "1"
        },
        "csharp": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": \"Flob\",\n//           \"Bob\": \"Cat\"\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Matcher> {\n    { \"Fred\", Match.ObjectLike(new Dictionary<string, object> {\n        { \"Wobble\", \"Flob\" }\n    }) }\n});\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Matcher> {\n    { \"Fred\", Match.ObjectLike(new Dictionary<string, object> {\n        { \"Brew\", \"Coffee\" }\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": \"Flob\",\n//           \"Bob\": \"Cat\"\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", Match.objectLike(Map.of(\n                \"Wobble\", \"Flob\"))));\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", Match.objectLike(Map.of(\n                \"Brew\", \"Coffee\"))));",
          "version": "1"
        },
        "$": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": \"Flob\",\n//           \"Bob\": \"Cat\"\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.objectLike({\n    Wobble: 'Flob',\n  }),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.objectLike({\n    Brew: 'Coffee',\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/assertions"
        },
        "field": {
          "field": "markdown",
          "line": 160
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assertions.Match#objectLike",
        "@aws-cdk/assertions.Matcher",
        "@aws-cdk/assertions.Template#hasResourceProperties"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport { Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": \"Flob\",\n//           \"Bob\": \"Cat\"\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.objectLike({\n    Wobble: 'Flob',\n  }),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.objectLike({\n    Brew: 'Coffee',\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "193": 4,
        "194": 4,
        "196": 4,
        "226": 2,
        "281": 4
      },
      "fqnsFingerprint": "e1534b5a4902ce8b7b783f10075047ec081450bce66805026912ea049d8898e5"
    },
    "2532cb121c4882fc153e7e2122edf61174bc495060cb87f16797677bc740db56": {
      "translations": {
        "python": {
          "source": "# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": {\n#           \"Wobble\": \"Flob\",\n#         }\n#       }\n#     }\n#   }\n# }\n\n# The following will NOT throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": Match.object_like({\n        \"Bob\": Match.absent()\n    })\n})\n\n# The following will throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": Match.object_like({\n        \"Wobble\": Match.absent()\n    })\n})",
          "version": "1"
        },
        "csharp": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": \"Flob\",\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Matcher> {\n    { \"Fred\", Match.ObjectLike(new Dictionary<string, object> {\n        { \"Bob\", Match.Absent() }\n    }) }\n});\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Matcher> {\n    { \"Fred\", Match.ObjectLike(new Dictionary<string, object> {\n        { \"Wobble\", Match.Absent() }\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": \"Flob\",\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", Match.objectLike(Map.of(\n                \"Bob\", Match.absent()))));\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", Match.objectLike(Map.of(\n                \"Wobble\", Match.absent()))));",
          "version": "1"
        },
        "$": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": \"Flob\",\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.objectLike({\n    Bob: Match.absent(),\n  }),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.objectLike({\n    Wobble: Match.absent(),\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/assertions"
        },
        "field": {
          "field": "markdown",
          "line": 200
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assertions.Match#absent",
        "@aws-cdk/assertions.Match#objectLike",
        "@aws-cdk/assertions.Matcher",
        "@aws-cdk/assertions.Template#hasResourceProperties"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport { Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": \"Flob\",\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.objectLike({\n    Bob: Match.absent(),\n  }),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.objectLike({\n    Wobble: Match.absent(),\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 16,
        "193": 4,
        "194": 6,
        "196": 6,
        "226": 2,
        "281": 4
      },
      "fqnsFingerprint": "62e6b51d07b3c867ecad4286fdd2bfc61f12bc5b9e09cd24c94c25896e1df512"
    },
    "d1fb55692ea2680e2fc5fea45ba06e88987fa4483f27eb7caae9608a3c04574c": {
      "translations": {
        "python": {
          "source": "# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": {\n#           \"Wobble\": [\"Flob\", \"Flib\"],\n#         }\n#       }\n#     }\n#   }\n# }\n\n# The following will NOT throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": {\n        \"Wobble\": [Match.any_value(), \"Flip\"]\n    }\n})\n\n# The following will throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": {\n        \"Wimble\": Match.any_value()\n    }\n})",
          "version": "1"
        },
        "csharp": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": [\"Flob\", \"Flib\"],\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, IDictionary<string, object[]>> {\n    { \"Fred\", new Struct {\n        Wobble = new [] { Match.AnyValue(), \"Flip\" }\n    } }\n});\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, IDictionary<string, Matcher>> {\n    { \"Fred\", new Struct {\n        Wimble = Match.AnyValue()\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": [\"Flob\", \"Flib\"],\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", Map.of(\n                \"Wobble\", List.of(Match.anyValue(), \"Flip\"))));\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", Map.of(\n                \"Wimble\", Match.anyValue())));",
          "version": "1"
        },
        "$": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": [\"Flob\", \"Flib\"],\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: {\n    Wobble: [ Match.anyValue(), \"Flip\" ],\n  },\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: {\n    Wimble: Match.anyValue(),\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/assertions"
        },
        "field": {
          "field": "markdown",
          "line": 236
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assertions.Match#anyValue",
        "@aws-cdk/assertions.Matcher",
        "@aws-cdk/assertions.Template#hasResourceProperties"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport { Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": {\n//           \"Wobble\": [\"Flob\", \"Flib\"],\n//         }\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: {\n    Wobble: [ Match.anyValue(), \"Flip\" ],\n  },\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: {\n    Wimble: Match.anyValue(),\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 3,
        "75": 12,
        "192": 1,
        "193": 4,
        "194": 4,
        "196": 4,
        "226": 2,
        "281": 4
      },
      "fqnsFingerprint": "d5792ef0b4a6e14aa4c6091982a0bae4fbdbec1407c65132fafdcdca65a4e533"
    },
    "8f767a3048701f687338aadbd1611e96a647cf5e7e11bac52aa0138eb5f9234e": {
      "translations": {
        "python": {
          "source": "# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": [\"Flob\", \"Cat\"]\n#       }\n#     }\n#   }\n# }\n\n# The following will NOT throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": Match.array_with([\"Flob\"])\n})\n\n# The following will throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", Match.object_like({\n    \"Fred\": Match.array_with([\"Wobble\"])\n}))",
          "version": "1"
        },
        "csharp": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Matcher> {\n    { \"Fred\", Match.ArrayWith(new [] { \"Flob\" }) }\n});\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", Match.ObjectLike(new Dictionary<string, object> {\n    { \"Fred\", Match.ArrayWith(new [] { \"Wobble\" }) }\n}));",
          "version": "1"
        },
        "java": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", Match.arrayWith(List.of(\"Flob\"))));\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Match.objectLike(Map.of(\n        \"Fred\", Match.arrayWith(List.of(\"Wobble\")))));",
          "version": "1"
        },
        "$": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.arrayWith(['Flob']),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', Match.objectLike({\n  Fred: Match.arrayWith(['Wobble']),\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/assertions"
        },
        "field": {
          "field": "markdown",
          "line": 272
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assertions.Match#arrayWith",
        "@aws-cdk/assertions.Match#objectLike",
        "@aws-cdk/assertions.Matcher",
        "@aws-cdk/assertions.Template#hasResourceProperties"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport { Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.arrayWith(['Flob']),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', Match.objectLike({\n  Fred: Match.arrayWith(['Wobble']),\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 4,
        "75": 12,
        "192": 2,
        "193": 2,
        "194": 5,
        "196": 5,
        "226": 2,
        "281": 2
      },
      "fqnsFingerprint": "2e92c9264f1ef701531cde8b23f7beea8b14c0d561451ec5a9c7d5554f6e8305"
    },
    "e63bc21e4835c3b9088c41a35382b07204fd92caf5387001869d2b643a866456": {
      "translations": {
        "python": {
          "source": "# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": [\"Flob\", \"Cat\"]\n#       }\n#     }\n#   }\n# }\n\n# The following will NOT throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": Match.not([\"Flob\"])\n})\n\n# The following will throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", Match.object_like({\n    \"Fred\": Match.not([\"Flob\", \"Cat\"])\n}))",
          "version": "1"
        },
        "csharp": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Matcher> {\n    { \"Fred\", Match.Not(new [] { \"Flob\" }) }\n});\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", Match.ObjectLike(new Dictionary<string, object> {\n    { \"Fred\", Match.Not(new [] { \"Flob\", \"Cat\" }) }\n}));",
          "version": "1"
        },
        "java": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", Match.not(List.of(\"Flob\"))));\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Match.objectLike(Map.of(\n        \"Fred\", Match.not(List.of(\"Flob\", \"Cat\")))));",
          "version": "1"
        },
        "$": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.not(['Flob']),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', Match.objectLike({\n  Fred: Match.not(['Flob', 'Cat']),\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/assertions"
        },
        "field": {
          "field": "markdown",
          "line": 307
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assertions.Match#not",
        "@aws-cdk/assertions.Match#objectLike",
        "@aws-cdk/assertions.Matcher",
        "@aws-cdk/assertions.Template#hasResourceProperties"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport { Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"]\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: Match.not(['Flob']),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', Match.objectLike({\n  Fred: Match.not(['Flob', 'Cat']),\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 12,
        "192": 2,
        "193": 2,
        "194": 5,
        "196": 5,
        "226": 2,
        "281": 2
      },
      "fqnsFingerprint": "0e29c7a9122ba03a88344ab50f7d18b08e8cd9948a7242075146e880a70376c5"
    },
    "086cfa3a931d45be31b7eb1d228573e18872db9770a1b8b53899730ca35f7d9c": {
      "translations": {
        "python": {
          "source": "# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Baz\": \"{ \\\"Fred\\\": [\\\"Waldo\\\", \\\"Willow\\\"] }\"\n#       }\n#     }\n#   }\n# }\n\n# The following will NOT throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Baz\": Match.serialized_json({\n        \"Fred\": Match.array_with([\"Waldo\"])\n    })\n})\n\n# The following will throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Baz\": Match.serialized_json({\n        \"Fred\": [\"Waldo\", \"Johnny\"]\n    })\n})",
          "version": "1"
        },
        "csharp": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Baz\": \"{ \\\"Fred\\\": [\\\"Waldo\\\", \\\"Willow\\\"] }\"\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Matcher> {\n    { \"Baz\", Match.SerializedJson(new Dictionary<string, Matcher> {\n        { \"Fred\", Match.ArrayWith(new [] { \"Waldo\" }) }\n    }) }\n});\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Matcher> {\n    { \"Baz\", Match.SerializedJson(new Dictionary<string, string[]> {\n        { \"Fred\", new [] { \"Waldo\", \"Johnny\" } }\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Baz\": \"{ \\\"Fred\\\": [\\\"Waldo\\\", \\\"Willow\\\"] }\"\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Baz\", Match.serializedJson(Map.of(\n                \"Fred\", Match.arrayWith(List.of(\"Waldo\"))))));\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Baz\", Match.serializedJson(Map.of(\n                \"Fred\", List.of(\"Waldo\", \"Johnny\")))));",
          "version": "1"
        },
        "$": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Baz\": \"{ \\\"Fred\\\": [\\\"Waldo\\\", \\\"Willow\\\"] }\"\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Baz: Match.serializedJson({\n    Fred: Match.arrayWith([\"Waldo\"]),\n  }),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Baz: Match.serializedJson({\n    Fred: [\"Waldo\", \"Johnny\"],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/assertions"
        },
        "field": {
          "field": "markdown",
          "line": 341
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assertions.Match#arrayWith",
        "@aws-cdk/assertions.Match#serializedJson",
        "@aws-cdk/assertions.Matcher",
        "@aws-cdk/assertions.Template#hasResourceProperties"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport { Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Baz\": \"{ \\\"Fred\\\": [\\\"Waldo\\\", \\\"Willow\\\"] }\"\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Baz: Match.serializedJson({\n    Fred: Match.arrayWith([\"Waldo\"]),\n  }),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Baz: Match.serializedJson({\n    Fred: [\"Waldo\", \"Johnny\"],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 14,
        "192": 2,
        "193": 4,
        "194": 5,
        "196": 5,
        "226": 2,
        "281": 4
      },
      "fqnsFingerprint": "cc53fc2cce0a796d38eacf015dc9c48cf3189fc77633493456ae66fa266c06e7"
    },
    "28b98c9e58bffa636ed5cc0e5533eb16451dee711a4355823cef45cfb3f3a10d": {
      "translations": {
        "python": {
          "source": "# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": [\"Flob\", \"Cat\"],\n#         \"Waldo\": [\"Qix\", \"Qux\"],\n#       }\n#     }\n#   }\n# }\n\nfred_capture = Capture()\nwaldo_capture = Capture()\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": fred_capture,\n    \"Waldo\": [\"Qix\", waldo_capture]\n})\n\nfred_capture.as_array() # returns [\"Flob\", \"Cat\"]\nwaldo_capture.as_string()",
          "version": "1"
        },
        "csharp": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"],\n//         \"Waldo\": [\"Qix\", \"Qux\"],\n//       }\n//     }\n//   }\n// }\n\nCapture fredCapture = new Capture();\nCapture waldoCapture = new Capture();\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, object> {\n    { \"Fred\", fredCapture },\n    { \"Waldo\", new [] { \"Qix\", waldoCapture } }\n});\n\nfredCapture.AsArray(); // returns [\"Flob\", \"Cat\"]\nwaldoCapture.AsString();",
          "version": "1"
        },
        "java": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"],\n//         \"Waldo\": [\"Qix\", \"Qux\"],\n//       }\n//     }\n//   }\n// }\n\nCapture fredCapture = new Capture();\nCapture waldoCapture = new Capture();\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", fredCapture,\n        \"Waldo\", List.of(\"Qix\", waldoCapture)));\n\nfredCapture.asArray(); // returns [\"Flob\", \"Cat\"]\nwaldoCapture.asString();",
          "version": "1"
        },
        "$": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"],\n//         \"Waldo\": [\"Qix\", \"Qux\"],\n//       }\n//     }\n//   }\n// }\n\nconst fredCapture = new Capture();\nconst waldoCapture = new Capture();\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: fredCapture,\n  Waldo: [\"Qix\", waldoCapture],\n});\n\nfredCapture.asArray(); // returns [\"Flob\", \"Cat\"]\nwaldoCapture.asString(); // returns \"Qux\"",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/assertions"
        },
        "field": {
          "field": "markdown",
          "line": 378
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assertions.Capture",
        "@aws-cdk/assertions.Capture#asArray",
        "@aws-cdk/assertions.Capture#asString",
        "@aws-cdk/assertions.Template#hasResourceProperties"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport { Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"],\n//         \"Waldo\": [\"Qix\", \"Qux\"],\n//       }\n//     }\n//   }\n// }\n\nconst fredCapture = new Capture();\nconst waldoCapture = new Capture();\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: fredCapture,\n  Waldo: [\"Qix\", waldoCapture],\n});\n\nfredCapture.asArray(); // returns [\"Flob\", \"Cat\"]\nwaldoCapture.asString();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 14,
        "192": 1,
        "193": 1,
        "194": 3,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 3,
        "242": 2,
        "243": 2,
        "281": 2
      },
      "fqnsFingerprint": "ce3605ee9ea6d23b5f99eb15e5c450231c46baa630f4592743d3e9c6b05cc88d"
    },
    "f47edc85bd16034ca71c3d047d9bb63cfbff0f832d1a2e713ad331b5b94974ed": {
      "translations": {
        "python": {
          "source": "# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar1\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": [\"Flob\", \"Cat\"],\n#       }\n#     }\n#     \"MyBar2\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": [\"Qix\", \"Qux\"],\n#       }\n#     }\n#   }\n# }\n\ncapture = Capture(Match.array_with([\"Cat\"]))\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": capture\n})\n\ncapture.as_array()",
          "version": "1"
        },
        "csharp": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar1\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"],\n//       }\n//     }\n//     \"MyBar2\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Qix\", \"Qux\"],\n//       }\n//     }\n//   }\n// }\n\nCapture capture = new Capture(Match.ArrayWith(new [] { \"Cat\" }));\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Capture> {\n    { \"Fred\", capture }\n});\n\ncapture.AsArray();",
          "version": "1"
        },
        "java": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar1\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"],\n//       }\n//     }\n//     \"MyBar2\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Qix\", \"Qux\"],\n//       }\n//     }\n//   }\n// }\n\nCapture capture = new Capture(Match.arrayWith(List.of(\"Cat\")));\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", capture));\n\ncapture.asArray();",
          "version": "1"
        },
        "$": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar1\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"],\n//       }\n//     }\n//     \"MyBar2\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Qix\", \"Qux\"],\n//       }\n//     }\n//   }\n// }\n\nconst capture = new Capture(Match.arrayWith(['Cat']));\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: capture,\n});\n\ncapture.asArray(); // returns ['Flob', 'Cat']",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/assertions"
        },
        "field": {
          "field": "markdown",
          "line": 407
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assertions.Capture",
        "@aws-cdk/assertions.Capture#asArray",
        "@aws-cdk/assertions.Match#arrayWith",
        "@aws-cdk/assertions.Template#hasResourceProperties"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport { Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar1\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Flob\", \"Cat\"],\n//       }\n//     }\n//     \"MyBar2\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": [\"Qix\", \"Qux\"],\n//       }\n//     }\n//   }\n// }\n\nconst capture = new Capture(Match.arrayWith(['Cat']));\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: capture,\n});\n\ncapture.asArray();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 2,
        "75": 10,
        "192": 1,
        "193": 1,
        "194": 3,
        "196": 3,
        "197": 1,
        "225": 1,
        "226": 2,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "f7f1cdf8ea1a14a7d72fbf4b7ae63e564c80320860d97e8c56cb89fee2304c8e"
    },
    "1b2bd16700b90e164f454e00b81335e322f93b80e8aa49bbaee164db34b5ca2c": {
      "translations": {
        "python": {
          "source": "# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": \"Flob\",\n#       }\n#     },\n#     \"MyBaz\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": \"Quib\",\n#       }\n#     }\n#   }\n# }\n\nfred_capture = Capture()\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": fred_capture\n})\n\nfred_capture.as_string() # returns \"Flob\"\nfred_capture.next() # returns true\nfred_capture.as_string()",
          "version": "1"
        },
        "csharp": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Flob\",\n//       }\n//     },\n//     \"MyBaz\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Quib\",\n//       }\n//     }\n//   }\n// }\n\nCapture fredCapture = new Capture();\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Capture> {\n    { \"Fred\", fredCapture }\n});\n\nfredCapture.AsString(); // returns \"Flob\"\nfredCapture.Next(); // returns true\nfredCapture.AsString();",
          "version": "1"
        },
        "java": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Flob\",\n//       }\n//     },\n//     \"MyBaz\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Quib\",\n//       }\n//     }\n//   }\n// }\n\nCapture fredCapture = new Capture();\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", fredCapture));\n\nfredCapture.asString(); // returns \"Flob\"\nfredCapture.next(); // returns true\nfredCapture.asString();",
          "version": "1"
        },
        "$": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Flob\",\n//       }\n//     },\n//     \"MyBaz\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Quib\",\n//       }\n//     }\n//   }\n// }\n\nconst fredCapture = new Capture();\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: fredCapture,\n});\n\nfredCapture.asString(); // returns \"Flob\"\nfredCapture.next();     // returns true\nfredCapture.asString(); // returns \"Quib\"",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/assertions"
        },
        "field": {
          "field": "markdown",
          "line": 438
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assertions.Capture",
        "@aws-cdk/assertions.Capture#asString",
        "@aws-cdk/assertions.Capture#next",
        "@aws-cdk/assertions.Template#hasResourceProperties"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport { Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Flob\",\n//       }\n//     },\n//     \"MyBaz\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Quib\",\n//       }\n//     }\n//   }\n// }\n\nconst fredCapture = new Capture();\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: fredCapture,\n});\n\nfredCapture.asString(); // returns \"Flob\"\nfredCapture.next();     // returns true\nfredCapture.asString();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 12,
        "193": 1,
        "194": 4,
        "196": 4,
        "197": 1,
        "225": 1,
        "226": 4,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "1d71f0c610a16a46c8c12666a6b069d6b67fd040cd8aa44e736c5a10075c3455"
    },
    "dd9758a501fc985a7fd616be29a1d95c8253eeea80b3cb4c7f65a109b0e9cd7e": {
      "translations": {
        "python": {
          "source": "# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": \"Flob\",\n#       }\n#     },\n#     \"MyBaz\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Fred\": \"Quib\",\n#       }\n#     }\n#   }\n# }\n\nfred_capture = Capture()\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Fred\": fred_capture\n})\n\nfred_capture.as_string() # returns \"Flob\"\nfred_capture.next() # returns true\nfred_capture.as_string()",
          "version": "1"
        },
        "csharp": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Flob\",\n//       }\n//     },\n//     \"MyBaz\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Quib\",\n//       }\n//     }\n//   }\n// }\n\nCapture fredCapture = new Capture();\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Capture> {\n    { \"Fred\", fredCapture }\n});\n\nfredCapture.AsString(); // returns \"Flob\"\nfredCapture.Next(); // returns true\nfredCapture.AsString();",
          "version": "1"
        },
        "java": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Flob\",\n//       }\n//     },\n//     \"MyBaz\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Quib\",\n//       }\n//     }\n//   }\n// }\n\nCapture fredCapture = new Capture();\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Fred\", fredCapture));\n\nfredCapture.asString(); // returns \"Flob\"\nfredCapture.next(); // returns true\nfredCapture.asString();",
          "version": "1"
        },
        "$": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Flob\",\n//       }\n//     },\n//     \"MyBaz\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Quib\",\n//       }\n//     }\n//   }\n// }\n\nconst fredCapture = new Capture();\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: fredCapture,\n});\n\nfredCapture.asString(); // returns \"Flob\"\nfredCapture.next();     // returns true\nfredCapture.asString(); // returns \"Quib\"",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/assertions.Capture"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assertions.Capture",
        "@aws-cdk/assertions.Capture#asString",
        "@aws-cdk/assertions.Capture#next",
        "@aws-cdk/assertions.Template#hasResourceProperties"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport { Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Flob\",\n//       }\n//     },\n//     \"MyBaz\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Fred\": \"Quib\",\n//       }\n//     }\n//   }\n// }\n\nconst fredCapture = new Capture();\ntemplate.hasResourceProperties('Foo::Bar', {\n  Fred: fredCapture,\n});\n\nfredCapture.asString(); // returns \"Flob\"\nfredCapture.next();     // returns true\nfredCapture.asString();\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 1,
        "75": 12,
        "193": 1,
        "194": 4,
        "196": 4,
        "197": 1,
        "225": 1,
        "226": 4,
        "242": 1,
        "243": 1,
        "281": 1
      },
      "fqnsFingerprint": "1d71f0c610a16a46c8c12666a6b069d6b67fd040cd8aa44e736c5a10075c3455"
    },
    "76a3ef9b3262ee7ee1b630597bd03c4115d44986cf5fbeeb598be58c09c0ee84": {
      "translations": {
        "python": {
          "source": "# Given a template -\n# {\n#   \"Resources\": {\n#     \"MyBar\": {\n#       \"Type\": \"Foo::Bar\",\n#       \"Properties\": {\n#         \"Baz\": \"{ \\\"Fred\\\": [\\\"Waldo\\\", \\\"Willow\\\"] }\"\n#       }\n#     }\n#   }\n# }\n\n# The following will NOT throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Baz\": Match.serialized_json({\n        \"Fred\": Match.array_with([\"Waldo\"])\n    })\n})\n\n# The following will throw an assertion error\ntemplate.has_resource_properties(\"Foo::Bar\", {\n    \"Baz\": Match.serialized_json({\n        \"Fred\": [\"Waldo\", \"Johnny\"]\n    })\n})",
          "version": "1"
        },
        "csharp": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Baz\": \"{ \\\"Fred\\\": [\\\"Waldo\\\", \\\"Willow\\\"] }\"\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Matcher> {\n    { \"Baz\", Match.SerializedJson(new Dictionary<string, Matcher> {\n        { \"Fred\", Match.ArrayWith(new [] { \"Waldo\" }) }\n    }) }\n});\n\n// The following will throw an assertion error\ntemplate.HasResourceProperties(\"Foo::Bar\", new Dictionary<string, Matcher> {\n    { \"Baz\", Match.SerializedJson(new Dictionary<string, string[]> {\n        { \"Fred\", new [] { \"Waldo\", \"Johnny\" } }\n    }) }\n});",
          "version": "1"
        },
        "java": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Baz\": \"{ \\\"Fred\\\": [\\\"Waldo\\\", \\\"Willow\\\"] }\"\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Baz\", Match.serializedJson(Map.of(\n                \"Fred\", Match.arrayWith(List.of(\"Waldo\"))))));\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties(\"Foo::Bar\", Map.of(\n        \"Baz\", Match.serializedJson(Map.of(\n                \"Fred\", List.of(\"Waldo\", \"Johnny\")))));",
          "version": "1"
        },
        "$": {
          "source": "// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Baz\": \"{ \\\"Fred\\\": [\\\"Waldo\\\", \\\"Willow\\\"] }\"\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Baz: Match.serializedJson({\n    Fred: Match.arrayWith([\"Waldo\"]),\n  }),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Baz: Match.serializedJson({\n    Fred: [\"Waldo\", \"Johnny\"],\n  }),\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/assertions.Matcher"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assertions.Match#arrayWith",
        "@aws-cdk/assertions.Match#serializedJson",
        "@aws-cdk/assertions.Matcher",
        "@aws-cdk/assertions.Template#hasResourceProperties"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Construct } from 'constructs';\nimport { Stack } from '@aws-cdk/core';\nimport { Capture, Match, Template } from '@aws-cdk/assertions';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n\n    const stack = new Stack();\n    const template = Template.fromStack(stack);\n\n    // Code snippet begins after !show marker below\n/// !show\n// Given a template -\n// {\n//   \"Resources\": {\n//     \"MyBar\": {\n//       \"Type\": \"Foo::Bar\",\n//       \"Properties\": {\n//         \"Baz\": \"{ \\\"Fred\\\": [\\\"Waldo\\\", \\\"Willow\\\"] }\"\n//       }\n//     }\n//   }\n// }\n\n// The following will NOT throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Baz: Match.serializedJson({\n    Fred: Match.arrayWith([\"Waldo\"]),\n  }),\n});\n\n// The following will throw an assertion error\ntemplate.hasResourceProperties('Foo::Bar', {\n  Baz: Match.serializedJson({\n    Fred: [\"Waldo\", \"Johnny\"],\n  }),\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}\n",
      "syntaxKindCounter": {
        "10": 5,
        "75": 14,
        "192": 2,
        "193": 4,
        "194": 5,
        "196": 5,
        "226": 2,
        "281": 4
      },
      "fqnsFingerprint": "cc53fc2cce0a796d38eacf015dc9c48cf3189fc77633493456ae66fa266c06e7"
    },
    "def2cd646590e4acdabdf036c8abd2108e8fa8cb33f4efed97838a07679321fb": {
      "translations": {
        "python": {
          "source": "from aws_cdk.core import Stack\nfrom aws_cdk.assertions import Template\n\nstack = Stack()\n# ...\ntemplate = Template.from_stack(stack)",
          "version": "1"
        },
        "csharp": {
          "source": "using Amazon.CDK;\nusing Amazon.CDK.Assertions;\n\nStack stack = new Stack();\n// ...\nTemplate template = Template.FromStack(stack);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.core.Stack;\nimport software.amazon.awscdk.assertions.Template;\n\nStack stack = new Stack();\n// ...\nTemplate template = Template.fromStack(stack);",
          "version": "1"
        },
        "$": {
          "source": "import { Stack } from '@aws-cdk/core';\nimport { Template } from '@aws-cdk/assertions';\n\nconst stack = new Stack(/* ... */);\n// ...\nconst template = Template.fromStack(stack);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/assertions.Template"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/assertions.Template",
        "@aws-cdk/assertions.Template#fromStack",
        "@aws-cdk/core.Stack"
      ],
      "fullSource": "import { Stack } from '@aws-cdk/core';\nimport { Template } from '@aws-cdk/assertions';\n\nconst stack = new Stack(/* ... */);\n// ...\nconst template = Template.fromStack(stack);",
      "syntaxKindCounter": {
        "10": 2,
        "75": 8,
        "194": 1,
        "196": 1,
        "197": 1,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "257": 2,
        "258": 2,
        "290": 1
      },
      "fqnsFingerprint": "19971d4a11282c9fbc81b4bb399e63b84a66710cb2e531afe30fde97d36f7cd1"
    }
  }
}
