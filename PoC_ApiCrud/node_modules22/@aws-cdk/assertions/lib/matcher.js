"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MatchResult = exports.Matcher = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Represents a matcher that can perform special data matching capabilities between a given pattern and a target.
 *
 * @stability stable
 */
class Matcher {
    /**
     * Check whether the provided object is a subtype of the `IMatcher`.
     *
     * @stability stable
     */
    static isMatcher(x) {
        return x && x instanceof Matcher;
    }
}
exports.Matcher = Matcher;
_a = JSII_RTTI_SYMBOL_1;
Matcher[_a] = { fqn: "@aws-cdk/assertions.Matcher", version: "1.135.0" };
/**
 * The result of `Match.test()`.
 *
 * @stability stable
 */
class MatchResult {
    /**
     * @stability stable
     */
    constructor(target) {
        this.failures = [];
        this.captures = new Map();
        this.finalized = false;
        this.target = target;
    }
    /**
     * (deprecated) DEPRECATED.
     *
     * @deprecated use recordFailure()
     */
    push(matcher, path, message) {
        jsiiDeprecationWarnings.print("@aws-cdk/assertions.MatchResult#push", "use recordFailure()");
        jsiiDeprecationWarnings._aws_cdk_assertions_Matcher(matcher);
        return this.recordFailure({ matcher, path, message });
    }
    /**
     * Record a new failure into this result at a specific path.
     *
     * @stability stable
     */
    recordFailure(failure) {
        jsiiDeprecationWarnings._aws_cdk_assertions_MatchFailure(failure);
        this.failures.push(failure);
        return this;
    }
    /**
     * Does the result contain any failures.
     *
     * If not, the result is a success
     *
     * @stability stable
     */
    hasFailed() {
        return this.failures.length !== 0;
    }
    /**
     * The number of failures.
     *
     * @stability stable
     */
    get failCount() {
        return this.failures.length;
    }
    /**
     * Compose the results of a previous match as a subtree.
     *
     * @param id the id of the parent tree.
     * @stability stable
     */
    compose(id, inner) {
        jsiiDeprecationWarnings._aws_cdk_assertions_MatchResult(inner);
        const innerF = inner.failures;
        this.failures.push(...innerF.map(f => {
            return { path: [id, ...f.path], message: f.message, matcher: f.matcher };
        }));
        inner.captures.forEach((vals, capture) => {
            vals.forEach(value => this.recordCapture({ capture, value }));
        });
        return this;
    }
    /**
     * Prepare the result to be analyzed.
     *
     * This API *must* be called prior to analyzing these results.
     *
     * @stability stable
     */
    finished() {
        if (this.finalized) {
            return this;
        }
        if (this.failCount === 0) {
            this.captures.forEach((vals, cap) => cap._captured.push(...vals));
        }
        this.finalized = true;
        return this;
    }
    /**
     * Get the list of failures as human readable strings.
     *
     * @stability stable
     */
    toHumanStrings() {
        return this.failures.map(r => {
            const loc = r.path.length === 0 ? '' : ` at ${r.path.join('')}`;
            return '' + r.message + loc + ` (using ${r.matcher.name} matcher)`;
        });
    }
    /**
     * Record a capture against in this match result.
     *
     * @stability stable
     */
    recordCapture(options) {
        jsiiDeprecationWarnings._aws_cdk_assertions_MatchCapture(options);
        let values = this.captures.get(options.capture);
        if (values === undefined) {
            values = [];
        }
        values.push(options.value);
        this.captures.set(options.capture, values);
    }
}
exports.MatchResult = MatchResult;
_b = JSII_RTTI_SYMBOL_1;
MatchResult[_b] = { fqn: "@aws-cdk/assertions.MatchResult", version: "1.135.0" };
//# sourceMappingURL=data:application/json;base64,